!function(t,e){for(var r in e)t[r]=e[r]}(exports,function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=41)}([function(t,e,r){"use strict";r.d(e,"a",(function(){return o}));var n=r(1);class o{static ReadShort(t,e){return(t.charCodeAt(e)<<8)+t.charCodeAt(e+1)}static ReadShortX(t,e){return(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ReadInt(t,e){return 16777216*t.charCodeAt(e)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadSInt(t,e){return(t.charCodeAt(e)<<24)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadIntX(t,e){return 16777216*t.charCodeAt(e+3)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ShortToStr(t){return String.fromCharCode(t>>8&255,255&t)}static ShortToStrX(t){return String.fromCharCode(255&t,t>>8&255)}static IntToStr(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)}static IntToStrX(t){return String.fromCharCode(255&t,t>>8&255,t>>16&255,t>>24&255)}static MakeToArray(t){return t&&null!=t&&"object"!=typeof t?[t]:t}static SplitArray(t){return t.split(",")}static Clone(t){return JSON.parse(JSON.stringify(t))}static EscapeHtml(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof t||"number"==typeof t?t:void 0}static ArrayElementMove(t,e,r){t.splice(r,0,t.splice(e,1)[0])}static ObjectToStringEx(t,e){let r="";if(0!==t&&(!Object(n.a)(t)||null==t))return"(Null)";if(t instanceof Array)for(var o in t)r+="<br />"+this.gap(e)+"Item #"+o+": "+this.ObjectToStringEx(t[o],e+1);else if(t instanceof Object)for(var s in t)r+="<br />"+this.gap(e)+s+" = "+this.ObjectToStringEx(t[s],e+1);else r+=this.EscapeHtml(t);return r}static ObjectToStringEx2(t,e){let r="";if(0!==t&&(!Object(n.a)(t)||null==t))return"(Null)";if(t instanceof Array)for(var o in t)r+="\r\n"+this.gap2(e)+"Item #"+o+": "+this.ObjectToStringEx2(t[o],e+1);else if(t instanceof Object)for(var s in t)r+="\r\n"+this.gap2(e)+s+" = "+this.ObjectToStringEx2(t[s],e+1);else r+=this.EscapeHtml(t);return r}static gap(t){let e="";for(let r=0;r<4*t;r++)e+="&nbsp;";return e}static gap2(t){let e="";for(let r=0;r<4*t;r++)e+=" ";return e}static ObjectToString(t){return this.ObjectToStringEx(t,0)}static ObjectToString2(t){return this.ObjectToStringEx2(t,0)}static hex2rstr(t){if("string"!=typeof t||0===t.length)return"";let e="";const r=(""+t).match(/../g);let n;for(;n=r.shift();)e+=String.fromCharCode(Number("0x"+n));return e}static char2hex(t){return(t+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(t){let e,r="";for(e=0;e<t.length;e++)r+=this.char2hex(t.charCodeAt(e));return r}static encode_utf8(t){return unescape(encodeURIComponent(t))}static decode_utf8(t){return decodeURIComponent(escape(t))}static data2blob(t){const e=new Array(t.length);for(let r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return new Blob([new Uint8Array(e)])}static random(t){return Math.floor(Math.random()*t)}static trademarks(t){return t.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}},function(t,e,r){"use strict";r.d(e,"a",(function(){return n}));const n=t=>null!=t&&""!==t&&!1!==t&&0!==t},function(t,e){t.exports=require("react")},,function(t,e,r){"use strict";var n;r.d(e,"a",(function(){return n})),function(t){t[t.VERBOSE=5]="VERBOSE",t[t.INFO=4]="INFO",t[t.DEBUG=3]="DEBUG",t[t.WARNING=2]="WARNING",t[t.ERROR=1]="ERROR"}(n||(n={}))},,function(t,e,r){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},s=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),i=[];function a(t){for(var e=-1,r=0;r<i.length;r++)if(i[r].identifier===t){e=r;break}return e}function c(t,e){for(var r={},n=[],o=0;o<t.length;o++){var s=t[o],c=e.base?s[0]+e.base:s[0],h=r[c]||0,l="".concat(c," ").concat(h);r[c]=h+1;var u=a(l),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(d)):i.push({identifier:l,updater:p(d,e),references:1}),n.push(l)}return n}function h(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var i=s(t.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var l,u=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function d(t,e,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var s=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(s,i[e]):t.appendChild(s)}}function f(t,e,r){var n=r.css,o=r.media,s=r.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var g=null,m=0;function p(t,e){var r,n,o;if(e.singleton){var s=m++;r=g||(g=h(e)),n=d.bind(null,r,s,!1),o=d.bind(null,r,s,!0)}else r=h(e),n=f.bind(null,r,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var r=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var o=a(r[n]);i[o].references--}for(var s=c(t,e),h=0;h<r.length;h++){var l=a(r[h]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}r=s}}}},function(t,e,r){"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var r=[],n=!0,o=!1,s=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(r.push(i.value),!e||r.length!==e);n=!0);}catch(t){o=!0,s=t}finally{try{n||null==a.return||a.return()}finally{if(o)throw s}}return r}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){var e=n(t,4),r=e[1],o=e[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),a="/*# ".concat(i," */"),c=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[r].concat(c).concat([a]).join("\n")}return[r].join("\n")}},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=t(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(o[i]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);n&&o[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),e.push(c))}},e}},function(t,e,r){"use strict";r.d(e,"b",(function(){return n})),r.d(e,"a",(function(){return c}));var n,o=r(0),s=r(13),i=r.n(s),a=r(1);!function(t){t[t.SOL=1]="SOL",t[t.KVM=2]="KVM",t[t.IDER=3]="IDER"}(n||(n={}));class c{constructor(t,e,r,n,o,s,i,a,c,h){this.fileReader=r,this.randomNonceChars="abcdef0123456789",this.host=n,this.port=o,this.user=s,this.pass=i,this.tls=a,this.tlsv1only=c,this.protocol=e,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=h,this.amtAccumulator="",this.authUri="",this.logger=t}getWsLocation(){return this.isBrowser()&&!Object(a.a)(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const t="undefined"!=typeof window;return t&&this.logger.debug("!!!!!BROWSER!!!!!"),t}catch(t){return!1}}start(t){this.connectState=0,this.socket=new t(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);const e=t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))},r=t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())};Object(a.a)(this.fileReader)&&Object(a.a)(this.fileReader.readAsBinaryString)?this.fileReader.onload=e.bind(this):Object(a.a)(this.fileReader)&&Object(a.a)(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=r.bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){Object(a.a)(this.urlvars)&&Object(a.a)(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info("Start Redirect Session for protocol. "+this.protocol),this.protocol===n.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===n.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===n.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(t){try{if(this.inDataCount++,"object"==typeof t.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(t.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([t.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(t.data);else{let e="";const r=new Uint8Array(t.data),n=r.byteLength;for(let t=0;t<n;t++)e+=String.fromCharCode(r[t]);this.onSocketData(e)}}else this.onSocketData(t.data)}catch(t){this.logger.error(t),this.stop(),this.onError()}}onSocketData(t){if(Object(a.a)(t)&&-1!==this.connectState){if("object"==typeof t){let e="";const r=new Uint8Array(t),n=r.byteLength;for(let t=0;t<n;t++)e+=String.fromCharCode(r[t]);t=e}else if("string"!=typeof t)return;if((this.protocol===n.KVM||this.protocol===n.IDER)&&1===this.connectState)return this.onProcessData(t);for(this.amtAccumulator+=t;this.amtAccumulator.length>=1;){let t=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose("Start Redirection Session reply received for  "+this.protocol),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const e=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+e)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),t=13+e;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const e=o.a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+e)return;const r=this.amtAccumulator.charCodeAt(1),n=this.amtAccumulator.charCodeAt(4),s=[];for(let t=0;t<e;t++)s.push(this.amtAccumulator.charCodeAt(9+t));const i=this.amtAccumulator.substring(9,9+e);if(t=9+e,0===n)Object(a.a)(s.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+o.a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):Object(a.a)(s.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+o.a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):Object(a.a)(s.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+o.a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==n&&4!==n||1!==r)if(0===r){if(1===this.protocol){const t=1e4,e=100,r=0,n=1e4,s=100,i=0;this.socketSend(String.fromCharCode(32,0,0,0)+o.a.IntToStrX(this.amtSequence++)+o.a.ShortToStrX(t)+o.a.ShortToStrX(e)+o.a.ShortToStrX(r)+o.a.ShortToStrX(n)+o.a.ShortToStrX(s)+o.a.ShortToStrX(i)+o.a.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let t=0;const e=i.charCodeAt(t),r=i.substring(t+1,t+1+e);t+=e+1;const s=i.charCodeAt(t),a=i.substring(t+1,t+1+s);t+=s+1;let c=0,h=null;const l=this.generateRandomNonce(32),u="00000002";let d="";4===n&&(c=i.charCodeAt(t),h=i.substring(t+1,t+1+c),t+=c+1,d=`${u}:${l}:${String(h)} :`);const f=this.hex_md5(this.hex_md5(this.user+":"+r+":"+this.pass)+":"+a+":"+d+this.hex_md5("POST:"+this.authUri));let g=this.user.length+r.length+a.length+this.authUri.length+l.length+u.length+f.length+7;4===n&&(g+=parseInt(h.length)+1);let m=String.fromCharCode(19,0,0,0,n)+o.a.IntToStrX(g)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(r.length)+r+String.fromCharCode(a.length)+a+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(l.length)+l+String.fromCharCode(u.length)+u+String.fromCharCode(f.length)+f;4===n&&(m+=String.fromCharCode(h.length)+h),this.socketSend(m)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),t=23,this.socketSend(String.fromCharCode(39,0,0,0)+o.a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),t=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const e=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<e)break;this.onProcessData(this.amtAccumulator.substring(10,e)),t=e;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),t=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),t=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===t)return;this.amtAccumulator=this.amtAccumulator.substring(t)}}}hex_md5(t){return this.logger.verbose("MD5 the string"),i()(t)}socketSend(t){Object(a.a)(this.urlvars)&&Object(a.a)(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${t.length}): ${o.a.rstr2hex(t)}`);try{if(null!=this.socket&&1===this.socket.readyState){const e=new Uint8Array(t.length);this.logger.verbose(`Redir Send( ${t.length}): ${o.a.rstr2hex(t)}`);for(let r=0;r<t.length;++r)e[r]=t.charCodeAt(r);this.socket.send(e.buffer)}}catch(t){this.logger.error("Socket send error: "+String(t))}}send(t){this.logger.verbose("Send called "+t),null!=this.socket&&1===this.connectState&&(this.protocol===n.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+o.a.IntToStrX(this.amtSequence++)+o.a.ShortToStrX(t.length)+t):this.socketSend(t))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+o.a.IntToStrX(this.amtSequence++))}generateRandomNonce(t){let e="";for(let r=0;r<t;r++)e+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return e}onSocketClosed(t){Object(a.a)(this.urlvars)&&Object(a.a)(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(t){console.info("onstatechange",t),this.state!==t&&(this.state=t,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},function(t,e,r){"use strict";r.d(e,"a",(function(){return n}));const n=t=>null!=t&&""!==t&&!1!==t&&0!==t},function(t,e){t.exports=require("styled-components")},function(t,e,r){"use strict";r.d(e,"a",(function(){return o}));var n=r(4);class o{constructor(t){this.minLevel=t}log(t,e){switch(t){case n.a.VERBOSE:this.verbose(e);break;case n.a.INFO:this.info(e);break;case n.a.DEBUG:this.debug(e);break;case n.a.WARNING:this.warn(e);break;case n.a.ERROR:this.error(e)}}debug(t){this.minLevel>=n.a.DEBUG&&console.debug(t)}info(t){this.minLevel>=n.a.INFO&&console.info(t)}error(t){this.minLevel>=n.a.ERROR&&console.error(t)}warn(t){this.minLevel>=n.a.WARNING&&console.warn(t)}verbose(t){this.minLevel>=n.a.VERBOSE&&console.log(t)}}},function(t,e){t.exports=require("md5")},,,,,,,,,,,,,,,,,function(t,e,r){"use strict";r.d(e,"a",(function(){return n}));class n{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=t=>{},this.TermSendKeys=t=>this.onSend(t)}}},function(t,e,r){"use strict";r.d(e,"a",(function(){return n}));class n{constructor(t){this.processData=t=>{null!=this.terminal.capture&&(this.terminal.capture+=t);let e="";for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);"J"===t[r]?this.clearTerminal():e+=0!=(128&n)?String.fromCharCode(this.terminal.AsciiToUnicode[127&n]):""+t[r]}this.processDataToXterm(e)},this.terminal=t}}},,,,,,,function(t,e,r){"use strict";var n=r(7),o=r.n(n),s=r(8),i=r.n(s)()(o.a);i.push([t.i,".sol-header{display:flex}.power-options{display:block;position:absolute;right:1%}","",{version:3,sources:["webpack://./src/reactjs/components/SerialOverLAN/sol.scss"],names:[],mappings:"AAIA,YACI,YAAA,CAEJ,eACC,aAAA,CACA,iBAAA,CACA,QAAA",sourcesContent:["/*********************************************************************\r\n* Copyright (c) Intel Corporation 2019\r\n* SPDX-License-Identifier: Apache-2.0\r\n**********************************************************************/\r\n.sol-header {\r\n    display: flex;\r\n}\r\n.power-options {\r\n\tdisplay: block;\r\n\tposition: absolute;\r\n\tright: 1%;\r\n}\r\n"],sourceRoot:""}]),e.a=i},function(t,e){t.exports=require("xterm")},,function(t,e,r){"use strict";r.r(e),r.d(e,"Sol",(function(){return O}));var n=r(2),o=r.n(n),s=r(30),i=r(11),a=r.n(i),c=r(9),h=r(12),l=r(4),u=r(31),d=r(39),f=r(10);const g=a.a.div`
   display:block;
   text-align:center;
`,m=a.a.div`
   display:inline-block;
`;class p extends o.a.Component{componentDidMount(){var t;const e=null!==(t=document.getElementById("xterm"))&&void 0!==t?t:"",{xterm:r,handleKeyPress:n}=this.props;Object(f.a)(e)&&(r.open(e),r.onData(t=>n(t)),r.attachCustomKeyEventHandler(t=>(t.stopPropagation(),t.preventDefault(),Object(f.a)(t.ctrlKey)&&Object(f.a)(t.shiftKey)&&67===t.keyCode?navigator.clipboard.writeText(r.getSelection()):Object(f.a)(t.ctrlKey)&&Object(f.a)(t.shiftKey)&&86===t.keyCode?navigator.clipboard.readText().then(t=>n(t)):"Space"===t.code?n(t.key):void 0)))}render(){return o.a.createElement(g,null,o.a.createElement(m,{id:"xterm"}))}}var S=p,b=(r(47),r(6)),C=r.n(b),v=r(38),A={insert:"head",singleton:!1};C()(v.a,A),v.a.locals;const y=a.a.div`
display : inline-block;
padding : 0px 5px;
`,R=a.a.div`
background-color: darkgray;
padding: 5px;
font-size: 13px;
text-align: center;
`;class O extends o.a.Component{constructor(t){super(t),this.init=()=>{const t=null!=this.props.mpsServer?this.props.mpsServer.replace("http","ws"):"",e=null!=this.props.deviceId?this.props.deviceId:"";this.terminal=new s.a,this.redirector=new c.a(this.logger,c.b.SOL,new FileReader,e,16994,"","",0,0,t+"/relay"),this.dataProcessor=new u.a(this.terminal),this.terminal.onSend=this.redirector.send.bind(this.redirector),this.redirector.onNewState=this.terminal.StateChange.bind(this.terminal),this.redirector.onStateChanged=this.onTerminalStateChange.bind(this),this.redirector.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.dataProcessor.processDataToXterm=this.handleWriteToXterm.bind(this),this.dataProcessor.clearTerminal=this.handleClearTerminal.bind(this),this.term=new d.Terminal({cursorStyle:"block",fontWeight:"bold",rows:30,cols:100})},this.cleanUp=()=>{this.terminal=null,this.redirector=null,this.dataProcessor=null,this.term=null},this.handleWriteToXterm=t=>this.term.write(t),this.handleClearTerminal=()=>this.term.reset(),this.handleKeyPress=t=>this.terminal.TermSendKeys(t),this.handleKeyDownPress=t=>this.terminal.handleKeyDownEvents(t),this.startSOL=()=>{void 0!==this.redirector&&this.redirector.start(WebSocket)},this.stopSOL=()=>{void 0!==this.redirector&&this.redirector.stop(),this.handleClearTerminal(),this.cleanUp(),this.init()},this.handleSOLConnect=t=>{t.persist(),0===this.state.SOLstate?this.startSOL():this.stopSOL()},this.onTerminalStateChange=(t,e)=>this.setState({SOLstate:e}),this.handleFeatureStatus=t=>{this.setState({solNotEnabled:t})},this.getSOLState=()=>3===this.state.SOLstate?2:0,this.logger=new h.a(l.a.ERROR),this.state={isConnected:!1,SOLstate:0,powerState:0,showSuccess:!1,message:"",isSelected:!0,type:"",solNotEnabled:"",deviceOnSleep:"",isPowerStateLoaded:!1}}componentDidMount(){this.init()}render(){const{SOLstate:t}=this.state;return o.a.createElement(o.a.Fragment,null,o.a.createElement(R,null,o.a.createElement(y,null,o.a.createElement("button",{onClick:this.handleSOLConnect},3===t?"Disconnect":"Connect"))),3===t&&this.term&&o.a.createElement(S,{handleKeyPress:this.handleKeyPress,handleKeyDownPress:this.handleKeyDownPress,xterm:this.term}))}}},,,,,,function(t,e){t.exports=require("xterm/css/xterm.css")}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvQ29udmVydGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1V0aWxpdGllcy9VdGlsaXR5TWV0aG9kcy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0lMb2dnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvQU1UUmVkaXJlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9VdGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic3R5bGVkLWNvbXBvbmVudHNcIiIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9Db25zb2xlTG9nZ2VyLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1kNVwiIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0FNVFRlcm1pbmFsLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1Rlcm1pbmFsRGF0YVByb2Nlc3Nvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL1NlcmlhbE92ZXJMQU4vc29sLnNjc3MiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwieHRlcm1cIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL1NlcmlhbE92ZXJMQU4vVGVybWluYWwudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvU2VyaWFsT3ZlckxBTi9zb2wuc2Nzcz85YjkyIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvU2VyaWFsT3ZlckxBTi9Tb2wudHN4Iiwid2VicGFjazovLy9leHRlcm5hbCBcInh0ZXJtL2Nzcy94dGVybS5jc3NcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlR5cGVDb252ZXJ0ZXIiLCJ2IiwiY2hhckNvZGVBdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNwbGl0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwieCIsInJlcGxhY2UiLCJhcnIiLCJmcm9tIiwidG8iLCJzcGxpY2UiLCJBcnJheSIsInRoaXMiLCJnYXAiLCJPYmplY3RUb1N0cmluZ0V4IiwiaiIsIkVzY2FwZUh0bWwiLCJnYXAyIiwiT2JqZWN0VG9TdHJpbmdFeDIiLCJsZW5ndGgiLCJtYXRjaCIsInNoaWZ0IiwiTnVtYmVyIiwidG9TdHJpbmciLCJzdWJzdHIiLCJ0b1VwcGVyQ2FzZSIsImlucHV0IiwiY2hhcjJoZXgiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsImRhdGEiLCJieXRlcyIsIkJsb2IiLCJVaW50OEFycmF5IiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiaXNUcnV0aHkiLCJyZXF1aXJlIiwiTG9nTGV2ZWwiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJsaXN0Iiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImJhc2UiLCJjb3VudCIsImNvbmNhdCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsInB1c2giLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwiX3NsaWNlZFRvQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5Iiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwibGVuIiwiYXJyMiIsIl9pdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJtYXAiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiUHJvdG9jb2wiLCJBTVRSZWRpcmVjdG9yIiwibG9nZ2VyIiwicHJvdG9jb2wiLCJmciIsImhvc3QiLCJwb3J0IiwidXNlciIsInBhc3MiLCJ0bHMiLCJ0bHMxb25seSIsInNlcnZlciIsImZpbGVSZWFkZXIiLCJyYW5kb21Ob25jZUNoYXJzIiwidGxzdjFvbmx5IiwiUmVkaXJlY3RTdGFydFNvbCIsIlJlZGlyZWN0U3RhcnRLdm0iLCJSZWRpcmVjdFN0YXJ0SWRlciIsInVybHZhcnMiLCJhbXRBY2N1bXVsYXRvciIsImF1dGhVcmkiLCJpc0Jyb3dzZXIiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpc1dlYiIsImRlYnVnIiwiY29ubmVjdFN0YXRlIiwic29ja2V0IiwiZ2V0V3NMb2NhdGlvbiIsIm9ub3BlbiIsIm9uU29ja2V0Q29ubmVjdGVkIiwib25tZXNzYWdlIiwib25NZXNzYWdlIiwib25jbG9zZSIsIm9uU29ja2V0Q2xvc2VkIiwib25sb2FkIiwib25Tb2NrZXREYXRhIiwiZmlsZVJlYWRlckFjYyIsImZpbGVSZWFkZXJJblVzZSIsInJlYWRBc0JpbmFyeVN0cmluZyIsIm9ubG9hZGVuZCIsInJlYWRBc0FycmF5QnVmZmVyIiwidmVyYm9zZSIsIm9uU3RhdGVDaGFuZ2UiLCJyZWRpcnRyYWNlIiwiY29uc29sZSIsImxvZyIsImluZm8iLCJTT0wiLCJzb2NrZXRTZW5kIiwiS1ZNIiwiSURFUiIsImluRGF0YUNvdW50IiwiYmluYXJ5IiwiYnl0ZUxlbmd0aCIsImVycm9yIiwic3RvcCIsIm9uRXJyb3IiLCJvblByb2Nlc3NEYXRhIiwiY21kc2l6ZSIsIm9lbWxlbiIsImF1dGhEYXRhTGVuIiwiUmVhZEludFgiLCJzdGF0dXMiLCJhdXRoVHlwZSIsImF1dGhEYXRhIiwiYXV0aERhdGFCdWYiLCJpbmNsdWRlcyIsIkludFRvU3RyWCIsIndhcm4iLCJNYXhUeEJ1ZmZlciIsIlR4VGltZW91dCIsIlR4T3ZlcmZsb3dUaW1lb3V0IiwiUnhUaW1lb3V0IiwiUnhGbHVzaFRpbWVvdXQiLCJIZWFydGJlYXQiLCJhbXRTZXF1ZW5jZSIsIlNob3J0VG9TdHJYIiwiY3VycHRyIiwicmVhbG1sZW4iLCJyZWFsbSIsIm5vbmNlbGVuIiwicW9wbGVuIiwicW9wIiwiY25vbmNlIiwiZ2VuZXJhdGVSYW5kb21Ob25jZSIsInNuYyIsImV4dHJhIiwiZGlnZXN0IiwiaGV4X21kNSIsInRvdGFsbGVuIiwicGFyc2VJbnQiLCJidWYiLCJhbXRLZWVwQWxpdmVUaW1lciIsInNldEludGVydmFsIiwic2VuZEFtdEtlZXBBbGl2ZSIsImNzIiwib25TdGFydCIsInN0ciIsInJzdHIyaGV4IiwicmVhZHlTdGF0ZSIsImIiLCJzZW5kIiwiYnVmZmVyIiwiY2hhckF0IiwibmV3c3RhdGUiLCJzdGF0ZSIsIm9uTmV3U3RhdGUiLCJvblN0YXRlQ2hhbmdlZCIsImNsb3NlIiwiY2xlYXJJbnRlcnZhbCIsImlzRmFsc3kiLCJDb25zb2xlTG9nZ2VyIiwibGV2ZWwiLCJtaW5MZXZlbCIsIlZFUkJPU0UiLCJJTkZPIiwiREVCVUciLCJXQVJOSU5HIiwiRVJST1IiLCJBbXRUZXJtaW5hbCIsInRlcm1pbmFsRW11bGF0aW9uIiwiZnhFbXVsYXRpb24iLCJmeExpbmVCcmVhayIsIkFzY2lpVG9Vbmljb2RlIiwiQXNjaWlUb1VuaWNvZGVJbnRlbCIsIlN0YXRlQ2hhbmdlIiwibmV3U3RhdGUiLCJUZXJtU2VuZEtleXMiLCJvblNlbmQiLCJUZXJtaW5hbERhdGFQcm9jZXNzb3IiLCJ0ZXJtaW5hbCIsInByb2Nlc3NEYXRhIiwiY2FwdHVyZSIsImNoIiwiY2xlYXJUZXJtaW5hbCIsInByb2Nlc3NEYXRhVG9YdGVybSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiVGVybWluYWxDb250YWluZXIiLCJkaXYiLCJYVGVybSIsIkNvbXBvbmVudCIsImVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInh0ZXJtIiwiaGFuZGxlS2V5UHJlc3MiLCJwcm9wcyIsIm9wZW4iLCJvbkRhdGEiLCJhdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImN0cmxLZXkiLCJzaGlmdEtleSIsImtleUNvZGUiLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJnZXRTZWxlY3Rpb24iLCJyZWFkVGV4dCIsInRoZW4iLCJ0ZXh0IiwiY29kZSIsImxvY2FscyIsIlN0eWxlZERpdiIsIkhlYWRlclN0cmlwIiwic3VwZXIiLCJpbml0IiwibXBzU2VydmVyIiwiZGV2aWNlVXVpZCIsImRldmljZUlkIiwicmVkaXJlY3RvciIsIkZpbGVSZWFkZXIiLCJkYXRhUHJvY2Vzc29yIiwib25UZXJtaW5hbFN0YXRlQ2hhbmdlIiwiaGFuZGxlV3JpdGVUb1h0ZXJtIiwiaGFuZGxlQ2xlYXJUZXJtaW5hbCIsInRlcm0iLCJjdXJzb3JTdHlsZSIsImZvbnRXZWlnaHQiLCJyb3dzIiwiY29scyIsImNsZWFuVXAiLCJ3cml0ZSIsInJlc2V0IiwiZG9tRXZlbnQiLCJoYW5kbGVLZXlEb3duUHJlc3MiLCJoYW5kbGVLZXlEb3duRXZlbnRzIiwic3RhcnRTT0wiLCJzdGFydCIsIldlYlNvY2tldCIsInN0b3BTT0wiLCJoYW5kbGVTT0xDb25uZWN0IiwicGVyc2lzdCIsIlNPTHN0YXRlIiwic2V0U3RhdGUiLCJoYW5kbGVGZWF0dXJlU3RhdHVzIiwic29sTm90RW5hYmxlZCIsImdldFNPTFN0YXRlIiwiaXNDb25uZWN0ZWQiLCJwb3dlclN0YXRlIiwic2hvd1N1Y2Nlc3MiLCJtZXNzYWdlIiwiaXNTZWxlY3RlZCIsInR5cGUiLCJkZXZpY2VPblNsZWVwIiwiaXNQb3dlclN0YXRlTG9hZGVkIiwiRnJhZ21lbnQiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiNkRBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQ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LEtBQUFDLGtCQUFvQixFQUNwQixLQUFBQyxZQUFjLEVBQ2QsS0FBQUMsWUFBYyxFQUdkLEtBQUFDLGVBQWlCLENBQ2YsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxJQUNBLElBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxLQUdGLEtBQUFDLG9CQUFzQixDQUNwQixJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsSUFDQSxJQUNBLElB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TUFDMUIsT0FDRSxrQkFBQyxJQUFNcUcsU0FBUSxLQUNiLGtCQUFDMUMsRUFBVyxLQUNWLGtCQUFDRCxFQUFTLEtBQ1IsNEJBQVE0QyxRQUFTdFcsS0FBS3NWLGtCQUFnQyxJQUFiRSxFQUFpQixhQUFlLGFBRy9ELElBQWJBLEdBQWtCeFYsS0FBS3VVLE1BQVEsa0JBQUMsRUFBSSxDQUFDaEMsZUFBZ0J2UyxLQUFLdVMsZUFBZ0J5QyxtQkFBb0JoVixLQUFLZ1YsbUJBQW9CMUMsTUFBT3RTLEtBQUt1VSxXLG1CQzNLNUl4WCxFQUFPRCxRQUFVK0UsUUFBUSIsImZpbGUiOiJzb2wuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQxKTtcbiIsImltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi9VdGlsaXRpZXMvVXRpbGl0eU1ldGhvZHMnXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBWaW5heSBHXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5leHBvcnQgY2xhc3MgVHlwZUNvbnZlcnRlciB7XHJcbiAgLy8gQmluYXJ5IGVuY29kaW5nIGFuZCBkZWNvZGluZyBmdW5jdGlvbnNcclxuICBzdGF0aWMgUmVhZFNob3J0ICh2OiBzdHJpbmcsIHA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAvL1xyXG4gICAgcmV0dXJuICh2LmNoYXJDb2RlQXQocCkgPDwgOCkgKyB2LmNoYXJDb2RlQXQocCArIDEpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmVhZFNob3J0WCAodjogc3RyaW5nLCBwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDgpICsgdi5jaGFyQ29kZUF0KHApXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmVhZEludCAodjogc3RyaW5nLCBwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh2LmNoYXJDb2RlQXQocCkgKiAweDEwMDAwMDApICsgKHYuY2hhckNvZGVBdChwICsgMSkgPDwgMTYpICtcclxuICAgICAgICAgICAodi5jaGFyQ29kZUF0KHAgKyAyKSA8PCA4KSArIHYuY2hhckNvZGVBdChwICsgMylcclxuICB9IC8vIFdlIHVzZSBcIioweDEwMDAwMDBcIiBpbnN0ZWFkIG9mIFwiPDwyNFwiIGJlY2F1c2UgdGhlIHNoaWZ0IGNvbnZlcnRzIHRoZSBudW1iZXIgdG8gc2lnbmVkIGludDMyLlxyXG5cclxuICBzdGF0aWMgUmVhZFNJbnQgKHY6IHN0cmluZywgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHApIDw8IDI0KSArICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDE2KSArXHJcbiAgICAgICAgICAgKHYuY2hhckNvZGVBdChwICsgMikgPDwgOCkgKyB2LmNoYXJDb2RlQXQocCArIDMpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmVhZEludFggKHY6IHN0cmluZywgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHAgKyAzKSAqIDB4MTAwMDAwMCkgKyAodi5jaGFyQ29kZUF0KHAgKyAyKSA8PCAxNikgK1xyXG4gICAgICAgICAgICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDgpICsgdi5jaGFyQ29kZUF0KHApXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgU2hvcnRUb1N0ciAodjogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkYpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgU2hvcnRUb1N0clggKHY6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2ICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIEludFRvU3RyICh2OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKHYgPj4gMjQpICYgMHhGRiwgKHYgPj4gMTYpICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRilcclxuICB9XHJcblxyXG4gIHN0YXRpYyBJbnRUb1N0clggKHY6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2ICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCAodiA+PiAxNikgJiAweEZGLCAodiA+PiAyNCkgJiAweEZGKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIE1ha2VUb0FycmF5ICh2OiBudW1iZXIpOiBudW1iZXIgfCBudW1iZXJbXSB7XHJcbiAgICBpZiAoIXYgfHwgdiA9PSBudWxsIHx8IHR5cGVvZiB2ID09PSAnb2JqZWN0JykgcmV0dXJuIHY7IHJldHVybiBbdl1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBTcGxpdEFycmF5ICh2OiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdi5zcGxpdCgnLCcpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgQ2xvbmUgKHY6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2KSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBFc2NhcGVIdG1sICh4OiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB4LnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpXHJcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvJy9nLCAnJmFwb3M7JylcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7IHJldHVybiB4IH1cclxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHsgcmV0dXJuIHggfVxyXG4gIH1cclxuXHJcbiAgLy8gTW92ZSBhbiBlbGVtZW50IGZyb20gb25lIHBvc2l0aW9uIGluIGFuIGFycmF5IHRvIGEgbmV3IHBvc2l0aW9uXHJcbiAgc3RhdGljIEFycmF5RWxlbWVudE1vdmUgKGFycjogbnVtYmVyW10sIGZyb206IG51bWJlciwgdG86IG51bWJlcik6IHZvaWQge1xyXG4gICAgYXJyLnNwbGljZSh0bywgMCwgYXJyLnNwbGljZShmcm9tLCAxKVswXSlcclxuICB9O1xyXG5cclxuICAvLyBQcmludCBvYmplY3QgZm9yIEhUTUxcclxuICBzdGF0aWMgT2JqZWN0VG9TdHJpbmdFeCAoeDogYW55LCBjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHI6IHN0cmluZyA9ICcnXHJcbiAgICBpZiAoeCAhPT0gMCAmJiAoIWlzVHJ1dGh5KHgpIHx8IHggPT0gbnVsbCkpIHJldHVybiAnKE51bGwpJ1xyXG4gICAgaWYgKHggaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICBmb3IgKHZhciBpIGluIHgpIHtcclxuICAgICAgICByICs9ICc8YnIgLz4nICsgdGhpcy5nYXAoYykgKyAnSXRlbSAjJyArIGkgKyAnOiAnICsgdGhpcy5PYmplY3RUb1N0cmluZ0V4KHhbaV0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgZm9yICh2YXIgaiBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnPGJyIC8+JyArIHRoaXMuZ2FwKGMpICsgaiArICcgPSAnICsgdGhpcy5PYmplY3RUb1N0cmluZ0V4KHhbal0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByICs9IHRoaXMuRXNjYXBlSHRtbCh4KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIC8vIFByaW50IG9iamVjdCBmb3IgY29uc29sZVxyXG4gIHN0YXRpYyBPYmplY3RUb1N0cmluZ0V4MiAoeDogYW55LCBjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHI6IHN0cmluZyA9ICcnXHJcbiAgICBpZiAoeCAhPT0gMCAmJiAoIWlzVHJ1dGh5KHgpIHx8IHggPT0gbnVsbCkpIHsgcmV0dXJuICcoTnVsbCknIH1cclxuICAgIGlmICh4IGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnXFxyXFxuJyArIHRoaXMuZ2FwMihjKSArICdJdGVtICMnICsgaSArICc6ICcgKyB0aGlzLk9iamVjdFRvU3RyaW5nRXgyKHhbaV0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgZm9yICh2YXIgaiBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnXFxyXFxuJyArIHRoaXMuZ2FwMihjKSArIGogKyAnID0gJyArIHRoaXMuT2JqZWN0VG9TdHJpbmdFeDIoeFtqXSwgYyArIDEpXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHIgKz0gdGhpcy5Fc2NhcGVIdG1sKHgpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gclxyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGFuIGlkZW50IGdhcFxyXG4gIHN0YXRpYyBnYXAgKGM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgeCA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChjICogNCk7IGkrKykge1xyXG4gICAgICB4ICs9ICcmbmJzcDsnXHJcbiAgICB9XHJcbiAgICByZXR1cm4geFxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdhcDIgKGM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgeCA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChjICogNCk7IGkrKykge1xyXG4gICAgICB4ICs9ICcgJ1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHhcclxuICB9XHJcblxyXG4gIC8vIFByaW50IGFuIG9iamVjdCBpbiBodG1sXHJcbiAgc3RhdGljIE9iamVjdFRvU3RyaW5nICh4OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuT2JqZWN0VG9TdHJpbmdFeCh4LCAwKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIE9iamVjdFRvU3RyaW5nMiAoeDogYW55KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLk9iamVjdFRvU3RyaW5nRXgyKHgsIDApXHJcbiAgfVxyXG5cclxuICAvLyBDb252ZXJ0IGEgaGV4IHN0cmluZyB0byBhIHJhdyBzdHJpbmdcclxuICBzdGF0aWMgaGV4MnJzdHIgKGQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIGQgIT09ICdzdHJpbmcnIHx8IGQubGVuZ3RoID09PSAwKSB7IHJldHVybiAnJyB9XHJcbiAgICBsZXQgciA9ICcnOyBjb25zdCBtOiBhbnkgPSAoJycgKyBkKS5tYXRjaCgvLi4vZyk7IGxldCB0XHJcbiAgICB3aGlsZSAodCA9IG0uc2hpZnQoKSkgeyByICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoTnVtYmVyKCcweCcgKyB0KSkgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIC8vIENvbnZlcnQgZGVjaW1hbCB0byBoZXhcclxuICBzdGF0aWMgY2hhcjJoZXggKGk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigtMikudG9VcHBlckNhc2UoKVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBoZXggc3RyaW5nXHJcbiAgc3RhdGljIHJzdHIyaGV4IChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCByID0gJyc7IGxldCBpXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgciArPSB0aGlzLmNoYXIyaGV4KGlucHV0LmNoYXJDb2RlQXQoaSkpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gclxyXG4gIH1cclxuXHJcbiAgLy8gVVRGLTggZW5jb2RpbmcgJiBkZWNvZGluZyBmdW5jdGlvbnNcclxuICBzdGF0aWMgZW5jb2RlX3V0ZjggKHM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHMpKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlY29kZV91dGY4IChzOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUocykpXHJcbiAgfVxyXG5cclxuICAvLyBDb252ZXJ0IGEgc3RyaW5nIGludG8gYSBibG9iXHJcbiAgc3RhdGljIGRhdGEyYmxvYiAoZGF0YTogc3RyaW5nKTogYW55IHtcclxuICAgIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7IGJ5dGVzW2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpIH1cclxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpXSlcclxuICAgIHJldHVybiBibG9iXHJcbiAgfVxyXG5cclxuICAvLyBHZW5lcmF0ZSByYW5kb20gbnVtYmVyc1xyXG4gIHN0YXRpYyByYW5kb20gKG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpXHJcbiAgfVxyXG5cclxuICAvLyBUcmFkZW1hcmtzXHJcbiAgc3RhdGljIHRyYWRlbWFya3MgKHg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4geC5yZXBsYWNlKC9cXChSXFwpL2csICcmcmVnOycpLnJlcGxhY2UoL1xcKFRNXFwpL2csICcmdHJhZGU7JylcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMjFcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5leHBvcnQgY29uc3QgaXNUcnV0aHkgPSAodmFsdWU6IGFueSk6IGJvb2xlYW4gPT4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gJycgJiYgdmFsdWUgIT09IGZhbHNlICYmIHZhbHVlICE9PSAwXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmludGVyZmFjZSBJTG9nZ2VyIHtcclxuICBkZWJ1ZzogKGxvZzogc3RyaW5nKSA9PiB2b2lkXHJcbiAgaW5mbzogKGxvZzogc3RyaW5nKSA9PiB2b2lkXHJcbiAgZXJyb3I6IChsb2c6IHN0cmluZykgPT4gdm9pZFxyXG4gIHdhcm46IChsb2c6IHN0cmluZykgPT4gdm9pZFxyXG4gIHZlcmJvc2U6IChsb2c6IHN0cmluZykgPT4gdm9pZFxyXG59XHJcbmVudW0gTG9nTGV2ZWwge1xyXG4gIFZFUkJPU0UgPSA1LFxyXG4gIElORk8gPSA0LFxyXG4gIERFQlVHID0gMyxcclxuICBXQVJOSU5HID0gMixcclxuICBFUlJPUiA9IDFcclxufVxyXG5leHBvcnQgeyBJTG9nZ2VyLCBMb2dMZXZlbCB9XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnLi9Db252ZXJ0ZXInXHJcbmltcG9ydCB7IElDb21tdW5pY2F0b3IgfSBmcm9tICcuL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCBtZDUgZnJvbSAnbWQ1J1xyXG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSAnLi9JTG9nZ2VyJ1xyXG5pbXBvcnQgeyBpc1RydXRoeSB9IGZyb20gJy4vVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzJ1xyXG4vKipcclxuICogUHJvdG9jb2wgZm9yIGRpZmZlcmVudCBSZWRpciBwcm90b2NvbHMuIFNPTD0xLEtWTT0yLElERVI9VVNCLVJcclxuICovXHJcbmV4cG9ydCBlbnVtIFByb3RvY29sIHtcclxuICBTT0wgPSAxLFxyXG4gIEtWTSA9IDIsXHJcbiAgSURFUiA9IDNcclxufVxyXG4vKipcclxuICogQU1UUmVkaXJlY3RvciBwcm92aWRlcyBhbGwgY29tbXVuaWNhdGlvbiBvdmVyIFdlYlNvY2tldHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBTVRSZWRpcmVjdG9yIGltcGxlbWVudHMgSUNvbW11bmljYXRvciB7XHJcbiAgc3RhdGU6IG51bWJlclxyXG4gIHNvY2tldDogYW55XHJcbiAgaG9zdDogc3RyaW5nXHJcbiAgcG9ydDogbnVtYmVyXHJcbiAgdXNlcjogc3RyaW5nXHJcbiAgcGFzczogc3RyaW5nXHJcbiAgdGxzOiBudW1iZXJcclxuICBhdXRoVXJpOiBzdHJpbmdcclxuICB0bHN2MW9ubHk6IG51bWJlclxyXG4gIGNvbm5lY3RTdGF0ZTogbnVtYmVyXHJcbiAgcHJvdG9jb2w6IFByb3RvY29sXHJcbiAgYW10QWNjdW11bGF0b3I6IHN0cmluZ1xyXG4gIGFtdFNlcXVlbmNlOiBudW1iZXJcclxuICBhbXRLZWVwQWxpdmVUaW1lcjogYW55XHJcblxyXG4gIGZpbGVSZWFkZXI6IEZpbGVSZWFkZXJcclxuICBmaWxlUmVhZGVySW5Vc2U6IGJvb2xlYW5cclxuICBmaWxlUmVhZGVyQWNjOiBhbnlbXVxyXG4gIHJhbmRvbU5vbmNlQ2hhcnM6IHN0cmluZ1xyXG4gIFJlZGlyZWN0U3RhcnRTb2w6IHN0cmluZ1xyXG4gIFJlZGlyZWN0U3RhcnRLdm06IHN0cmluZ1xyXG4gIFJlZGlyZWN0U3RhcnRJZGVyOiBzdHJpbmdcclxuICB1cmx2YXJzOiBhbnlcclxuICBpbkRhdGFDb3VudDogbnVtYmVyXHJcbiAgc2VydmVyOiBzdHJpbmcgfCB1bmRlZmluZWRcclxuICBsb2dnZXI6IElMb2dnZXJcclxuICBvblByb2Nlc3NEYXRhOiAoZGF0YTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgb25TdGFydDogKCkgPT4gdm9pZFxyXG4gIG9uTmV3U3RhdGU6IChzdGF0ZTogbnVtYmVyKSA9PiB2b2lkXHJcbiAgb25TdGF0ZUNoYW5nZWQ6IChyZWRpcmVjdG9yOiBhbnksIHN0YXRlOiBudW1iZXIpID0+IHZvaWRcclxuICBvbkVycm9yOiAoKSA9PiB2b2lkXHJcblxyXG4gIGNvbnN0cnVjdG9yIChsb2dnZXI6IElMb2dnZXIsIHByb3RvY29sOiBudW1iZXIsIGZyOiBGaWxlUmVhZGVyLCBob3N0OiBzdHJpbmcsIHBvcnQ6IG51bWJlciwgdXNlcjogc3RyaW5nLCBwYXNzOiBzdHJpbmcsIHRsczogbnVtYmVyLCB0bHMxb25seTogbnVtYmVyLCBzZXJ2ZXI/OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuZmlsZVJlYWRlciA9IGZyXHJcbiAgICB0aGlzLnJhbmRvbU5vbmNlQ2hhcnMgPSAnYWJjZGVmMDEyMzQ1Njc4OSdcclxuICAgIHRoaXMuaG9zdCA9IGhvc3RcclxuICAgIHRoaXMucG9ydCA9IHBvcnRcclxuICAgIHRoaXMudXNlciA9IHVzZXJcclxuICAgIHRoaXMucGFzcyA9IHBhc3NcclxuICAgIHRoaXMudGxzID0gdGxzXHJcbiAgICB0aGlzLnRsc3Yxb25seSA9IHRsczFvbmx5XHJcbiAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2xcclxuICAgIHRoaXMuUmVkaXJlY3RTdGFydFNvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg1MywgMHg0RiwgMHg0QywgMHgyMClcclxuICAgIHRoaXMuUmVkaXJlY3RTdGFydEt2bSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHg0YiwgMHg1NiwgMHg0ZCwgMHg1MilcclxuICAgIHRoaXMuUmVkaXJlY3RTdGFydElkZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDksIDB4NDQsIDB4NDUsIDB4NTIpXHJcbiAgICB0aGlzLnVybHZhcnMgPSB7fVxyXG4gICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXJcclxuICAgIHRoaXMuYW10QWNjdW11bGF0b3IgPSAnJ1xyXG4gICAgdGhpcy5hdXRoVXJpID0gJydcclxuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIFdlYlNvY2tldCBwYXRoIHRvIGNvbm5lY3QgdG8gdXNpbmcgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbiAgICogVXNlcyBob3N0KGRldmljZWlkKSwgcG9ydCwgdGxzLCB0bHN2MW9ubHksIHVzZXIsIHBhc3Mgb3B0aW9ucyB0byBidWlsZCB0aGUgdXJsLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0V3NMb2NhdGlvbiAoKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLmlzQnJvd3NlcigpICYmICFpc1RydXRoeSh0aGlzLnNlcnZlcikpIHtcclxuICAgICAgcmV0dXJuIGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKCdodHRwJywgJ3dzJyl9Ly9cclxuICAgICAgJHt3aW5kb3cubG9jYXRpb24uaG9zdH1cclxuICAgICAgJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDAsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5sYXN0SW5kZXhPZignLycpKX1cclxuICAgICAgL3dlYnJlbGF5LmFzaHg/cD0yJmhvc3Q9JHt0aGlzLmhvc3R9JnBvcnQ9JHt0aGlzLnBvcnR9JnRscz0ke3RoaXMudGxzfSR7KCh0aGlzLnVzZXIgPT09ICcqJykgPyAnJnNlcnZlcmF1dGg9MScgOiAnJyl9JHsoKHR5cGVvZiB0aGlzLnBhc3MgPT09ICd1bmRlZmluZWQnKSA/ICgnJnNlcnZlcmF1dGg9MSZ1c2VyPScgKyB0aGlzLnVzZXIpIDogJycpfSZ0bHMxb25seT0ke3RoaXMudGxzdjFvbmx5fWBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBgJHtTdHJpbmcodGhpcy5zZXJ2ZXIpfS93ZWJyZWxheS5hc2h4P3A9MiZob3N0PSR7dGhpcy5ob3N0fSZwb3J0PSR7dGhpcy5wb3J0fSZ0bHM9JHt0aGlzLnRsc30keygodGhpcy51c2VyID09PSAnKicpID8gJyZzZXJ2ZXJhdXRoPTEnIDogJycpfSR7KCh0eXBlb2YgdGhpcy5wYXNzID09PSAndW5kZWZpbmVkJykgPyAoJyZzZXJ2ZXJhdXRoPTEmdXNlcj0nICsgdGhpcy51c2VyKSA6ICcnKX0mdGxzMW9ubHk9JHt0aGlzLnRsc3Yxb25seX1gXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBjdXJyZW50IGVudmlyb25tZW50IGlzIGJyb3dzZXIgb3IgdGVzdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNCcm93c2VyICgpOiBib29sZWFuIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGlzV2ViID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBpZiAoaXNXZWIpIHRoaXMubG9nZ2VyLmRlYnVnKCchISEhIUJST1dTRVIhISEhIScpXHJcbiAgICAgIHJldHVybiBpc1dlYlxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldHMgV3MgTG9jYXRpb24gYW5kIHN0YXJ0cyBhIHdlYnNvY2tldCBmb3IgbGlzdGVuaW5nXHJcbiAgICogQHBhcmFtIGMgaXMgYmFzZSB0eXBlIGZvciBXZWJTb2NrZXRcclxuICAgKi9cclxuICBzdGFydDxUPiAoYzogbmV3KHBhdGg6IHN0cmluZykgPT4gVCk6IGFueSB7IC8vIFVzaW5nIHRoaXMgZ2VuZXJpYyBzaWduYXR1cmUgYWxsb3dzIHVzIHRvIHBhc3MgdGhlIFdlYlNvY2tldCB0eXBlIGZyb20gdW5pdCB0ZXN0cyBvciBpbiBwcm9kdWNpb24gZnJvbSBhIHdlYiBicm93c2VyXHJcbiAgICB0aGlzLmNvbm5lY3RTdGF0ZSA9IDBcclxuICAgIC8vIGxldCB3cyA9IG5ldyBjKHRoaXMuZ2V0V3NMb2NhdGlvbigpKSAvLyB1c2luZyBjcmVhdGUgZnVuY3Rpb24gYyBpbnZva2VzIHRoZSBjb25zdHJ1Y3RvciBXZWJTb2NrZXQoKVxyXG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgYyh0aGlzLmdldFdzTG9jYXRpb24oKSkgLy8gVGhlIFwicD0yXCIgaW5kaWNhdGVzIHRvIHRoZSByZWxheSB0aGF0IHRoaXMgaXMgYSBSRURJUkVDVElPTiBzZXNzaW9uXHJcbiAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSB0aGlzLm9uU29ja2V0Q29ubmVjdGVkLmJpbmQodGhpcylcclxuICAgIHRoaXMuc29ja2V0Lm9ubWVzc2FnZSA9IHRoaXMub25NZXNzYWdlLmJpbmQodGhpcylcclxuICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSB0aGlzLm9uU29ja2V0Q2xvc2VkLmJpbmQodGhpcylcclxuICAgIGNvbnN0IG9ubG9hZCA9IChlOiBhbnkpOiBhbnkgPT4ge1xyXG4gICAgICB0aGlzLm9uU29ja2V0RGF0YShlLnRhcmdldC5yZXN1bHQpXHJcbiAgICAgIGlmICh0aGlzLmZpbGVSZWFkZXJBY2MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5maWxlUmVhZGVySW5Vc2UgPSBmYWxzZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcobmV3IEJsb2IoW3RoaXMuZmlsZVJlYWRlckFjYy5zaGlmdCgpXSkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IG9ubG9hZGVuZCA9IChlOiBhbnkpOiBhbnkgPT4ge1xyXG4gICAgICB0aGlzLm9uU29ja2V0RGF0YShlLnRhcmdldC5yZXN1bHQpXHJcbiAgICAgIGlmICh0aGlzLmZpbGVSZWFkZXJBY2MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5maWxlUmVhZGVySW5Vc2UgPSBmYWxzZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcih0aGlzLmZpbGVSZWFkZXJBY2Muc2hpZnQoKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlzVHJ1dGh5KHRoaXMuZmlsZVJlYWRlcikgJiYgaXNUcnV0aHkodGhpcy5maWxlUmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZykpIHtcclxuICAgIC8vIENocm9tZSAmIEZpcmVmb3ggKERyYWZ0KVxyXG4gICAgICB0aGlzLmZpbGVSZWFkZXIub25sb2FkID0gb25sb2FkLmJpbmQodGhpcylcclxuICAgIH0gZWxzZSBpZiAoaXNUcnV0aHkodGhpcy5maWxlUmVhZGVyKSAmJiBpc1RydXRoeSh0aGlzLmZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIpKSB7XHJcbiAgICAvLyBDaHJvbWUgJiBGaXJlZm94IChTcGVjKVxyXG4gICAgICB0aGlzLmZpbGVSZWFkZXIub25sb2FkZW5kID0gb25sb2FkZW5kLmJpbmQodGhpcylcclxuICAgIH1cclxuICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0Nvbm5lY3RpbmcgdG8gd2Vic29ja2V0JylcclxuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgxKVxyXG4gIH1cclxuXHJcbiAgb25Tb2NrZXRDb25uZWN0ZWQgKCk6IGFueSB7XHJcbiAgICBpZiAoaXNUcnV0aHkodGhpcy51cmx2YXJzKSAmJiBpc1RydXRoeSh0aGlzLnVybHZhcnMucmVkaXJ0cmFjZSkpIGNvbnNvbGUubG9nKCdSRURJUi1DT05ORUNUJylcclxuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgyKVxyXG4gICAgdGhpcy5sb2dnZXIudmVyYm9zZShgQ29ubmVjdGVkIHRvIHdlYnNvY2tldCBzZXJ2ZXIuIFdpdGggcHJvdG9jb2wgJHt0aGlzLnByb3RvY29sfSAoMiA9IEtWTSlgKVxyXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgU3RhcnQgUmVkaXJlY3QgU2Vzc2lvbiBmb3IgcHJvdG9jb2wuICR7dGhpcy5wcm90b2NvbH1gKVxyXG4gICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLlNPTCkgdGhpcy5zb2NrZXRTZW5kKHRoaXMuUmVkaXJlY3RTdGFydFNvbCkgLy8gVE9ETzogUHV0IHRoZXNlIHN0cmluZ3MgaW4gaGlnaGVyIGxldmVsIG1vZHVsZSB0byB0aWdodGVuIGNvZGVcclxuICAgIGlmICh0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5LVk0pIHRoaXMuc29ja2V0U2VuZCh0aGlzLlJlZGlyZWN0U3RhcnRLdm0pIC8vIERvbid0IG5lZWQgdGhlc2UgaXMgdGhlIGZlYXR1cmUgaXMgbm90IGNvbXBpbGVkLWluLlxyXG4gICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLklERVIpIHRoaXMuc29ja2V0U2VuZCh0aGlzLlJlZGlyZWN0U3RhcnRJZGVyKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgbmV3IGRhdGEgb24gdGhlIHdlYnNvY2tldFxyXG4gICAqIEBwYXJhbSBlIGRhdGEgcmVjZWl2ZWQgb3ZlciB0aGUgd2Vic29ja2V0XHJcbiAgICovXHJcbiAgb25NZXNzYWdlIChlOiBhbnkpOiBhbnkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gY29uc29sZS5sb2coZS5kYXRhKVxyXG4gICAgICB0aGlzLmluRGF0YUNvdW50KytcclxuICAgICAgaWYgKHR5cGVvZiBlLmRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVJlYWRlckluVXNlKSB7XHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXJBY2MucHVzaChlLmRhdGEpXHJcbiAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcgIT0gbnVsbCkge1xyXG4gICAgICAgICAgLy8gQ2hyb21lICYgRmlyZWZveCAoRHJhZnQpXHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXJJblVzZSA9IHRydWVcclxuICAgICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcobmV3IEJsb2IoW2UuZGF0YV0pKVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyICE9IG51bGwpIHtcclxuICAgICAgICAgIC8vIENocm9tZSAmIEZpcmVmb3ggKFNwZWMpXHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXJJblVzZSA9IHRydWVcclxuICAgICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihlLmRhdGEpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIElFMTAsIHJlYWRBc0JpbmFyeVN0cmluZyBkb2VzIG5vdCBleGlzdCwgdXNlIGFuIGFsdGVybmF0aXZlLlxyXG4gICAgICAgICAgbGV0IGJpbmFyeSA9ICcnOyBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YSk7IGNvbnN0IGxlbmd0aCA9IGJ5dGVzLmJ5dGVMZW5ndGhcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pIH1cclxuICAgICAgICAgIHRoaXMub25Tb2NrZXREYXRhKGJpbmFyeSlcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gSWYgd2UgZ2V0IGEgc3RyaW5nIG9iamVjdCwgaXQgbWF5YmUgdGhlIFdlYlJUQyBjb25maXJtLiBJZ25vcmUgaXQuXHJcbiAgICAgICAgLy8gdGhpcy5kZWJ1ZyhcIk1lc2hEYXRhQ2hhbm5lbCAtIE9uRGF0YSAtIFwiICsgdHlwZW9mIGUuZGF0YSArIFwiIC0gXCIgKyBlLmRhdGEubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLm9uU29ja2V0RGF0YShlLmRhdGEpXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKVxyXG4gICAgICB0aGlzLnN0b3AoKVxyXG4gICAgICB0aGlzLm9uRXJyb3IoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIGZyb20gb25NZXNzYWdlXHJcbiAgICogQHBhcmFtIGRhdGEgZGF0YSBvdmVyIHRoZSB3aXJlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBvblNvY2tldERhdGEgKGRhdGE6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoIWlzVHJ1dGh5KGRhdGEpIHx8IHRoaXMuY29ubmVjdFN0YXRlID09PSAtMSkgcmV0dXJuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAvLyBUaGlzIGlzIGFuIEFycmF5QnVmZmVyLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nIGFycmF5ICh1c2VkIGluIElFKVxyXG4gICAgICBsZXQgYmluYXJ5ID0gJydcclxuICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShkYXRhKVxyXG4gICAgICBjb25zdCBsZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pIH1cclxuICAgICAgZGF0YSA9IGJpbmFyeVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIH1cclxuXHJcbiAgICBpZiAoKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLktWTSB8fCB0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5JREVSKSAmJiB0aGlzLmNvbm5lY3RTdGF0ZSA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5vblByb2Nlc3NEYXRhKGRhdGEpXHJcbiAgICB9IC8vIEtWTSB0cmFmZmljLCBmb3J3YXJkIGl0IGRpcmVjdGx5LlxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdiZWZvcmU6ICcsIHRoaXMuYW10QWNjdW11bGF0b3IpXHJcbiAgICB0aGlzLmFtdEFjY3VtdWxhdG9yICs9IGRhdGFcclxuICAgIC8vIGNvbnNvbGUubG9nKCdhZnRlcjogJywgdGhpcy5hbXRBY2N1bXVsYXRvcilcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiUkVESVItUkVDVihcIiArIHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoICsgXCIpOiBcIiArIFR5cGVDb252ZXJ0ZXIucnN0cjJoZXgodGhpcy5hbXRBY2N1bXVsYXRvcikpO1xyXG4gICAgd2hpbGUgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoID49IDEpIHtcclxuICAgICAgbGV0IGNtZHNpemUgPSAwXHJcbiAgICAgIHN3aXRjaCAodGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDApKSB7XHJcbiAgICAgICAgY2FzZSAweDExOiB7IC8vIFN0YXJ0UmVkaXJlY3Rpb25TZXNzaW9uUmVwbHkgKDE3KVxyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShgU3RhcnQgUmVkaXJlY3Rpb24gU2Vzc2lvbiByZXBseSByZWNlaXZlZCBmb3IgICR7dGhpcy5wcm90b2NvbH1gKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgNCkgcmV0dXJuXHJcbiAgICAgICAgICBjb25zdCBzdGF0dXNjb2RlID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDEpXHJcbiAgICAgICAgICBzd2l0Y2ggKHN0YXR1c2NvZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAwOiB7IC8vIFNUQVRVU19TVUNDRVNTXHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnU2Vzc2lvbiBzdGF0dXMgc3VjY2Vzcy4gU3RhcnQgaGFuZHNoYWtlJylcclxuICAgICAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCAxMykgcmV0dXJuXHJcbiAgICAgICAgICAgICAgY29uc3Qgb2VtbGVuID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDEyKVxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDEzICsgb2VtbGVuKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgICAgLy8gUXVlcnkgZm9yIGF2YWlsYWJsZSBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ1F1ZXJ5IGZvciBhdmFpbGFibGUgYXV0aGVudGljYXRpb24nKVxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDApKSAvLyBRdWVyeSBhdXRoZW50aWNhdGlvbiBzdXBwb3J0XHJcbiAgICAgICAgICAgICAgY21kc2l6ZSA9ICgxMyArIG9lbWxlbilcclxuICAgICAgICAgICAgICBicmVhayB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWsgfVxyXG4gICAgICAgIGNhc2UgMHgxNDogeyAvLyBBdXRoZW50aWNhdGVTZXNzaW9uUmVwbHkgKDIwKVxyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnQXZhaWxhYmxlIEF1dGhlbnRpY2F0aW9ucyByZXBseSByZWNlaXZlZC4nKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgOSkgcmV0dXJuXHJcbiAgICAgICAgICBjb25zdCBhdXRoRGF0YUxlbiA9IFR5cGVDb252ZXJ0ZXIuUmVhZEludFgodGhpcy5hbXRBY2N1bXVsYXRvciwgNSlcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDkgKyBhdXRoRGF0YUxlbikgcmV0dXJuXHJcbiAgICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoMSlcclxuICAgICAgICAgIGNvbnN0IGF1dGhUeXBlID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDQpXHJcbiAgICAgICAgICBjb25zdCBhdXRoRGF0YTogYW55ID0gW11cclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXV0aERhdGFMZW47IGkrKykgeyBhdXRoRGF0YS5wdXNoKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg5ICsgaSkpIH1cclxuICAgICAgICAgIGNvbnN0IGF1dGhEYXRhQnVmID0gdGhpcy5hbXRBY2N1bXVsYXRvci5zdWJzdHJpbmcoOSwgOSArIGF1dGhEYXRhTGVuKVxyXG4gICAgICAgICAgY21kc2l6ZSA9IDkgKyBhdXRoRGF0YUxlblxyXG5cclxuICAgICAgICAgIGlmIChhdXRoVHlwZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBRdWVyeVxyXG4gICAgICAgICAgICBpZiAoaXNUcnV0aHkoYXV0aERhdGEuaW5jbHVkZXMoNCkpKSB7XHJcbiAgICAgICAgICAgICAgLy8gR29vZCBEaWdlc3QgQXV0aCAoV2l0aCBjbm9uY2UgYW5kIGFsbClcclxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdHb29kIERpZ2VzdCBBdXRoIChXaXRoIGNub25jZSBhbmQgYWxsKScpXHJcbiAgICAgICAgICAgICAgdGhpcy5zb2NrZXRTZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNCkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCh0aGlzLnVzZXIubGVuZ3RoICsgdGhpcy5hdXRoVXJpLmxlbmd0aCArIDgpICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnVzZXIubGVuZ3RoKSArIHRoaXMudXNlciArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuYXV0aFVyaS5sZW5ndGgpICsgdGhpcy5hdXRoVXJpICsgU3RyaW5nLmZyb21DaGFyQ29kZSgweDAwLCAweDAwLCAweDAwLCAweDAwKSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RydXRoeShhdXRoRGF0YS5pbmNsdWRlcygzKSkpIHtcclxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdCYWQgRGlnZXN0IEF1dGgnKVxyXG4gICAgICAgICAgICAgIC8vIEJhZCBEaWdlc3QgQXV0aCAoTm90IHN1cmUgd2h5IHRoaXMgaXMgc3VwcG9ydGVkLCBjbm9uY2UgaXMgbm90IHVzZWQhKVxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDMpICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy51c2VyLmxlbmd0aCArIHRoaXMuYXV0aFVyaS5sZW5ndGggKyA3KSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy51c2VyLmxlbmd0aCkgKyB0aGlzLnVzZXIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MDAsIDB4MDApICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmF1dGhVcmkubGVuZ3RoKSArIHRoaXMuYXV0aFVyaSArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCwgMHgwMCkpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUcnV0aHkoYXV0aERhdGEuaW5jbHVkZXMoMSkpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnQmFzaWMgQXV0aCcpXHJcbiAgICAgICAgICAgICAgLy8gQmFzaWMgQXV0aCAoUHJvYmFibHkgYSBnb29kIGlkZWEgdG8gbm90IHN1cHBvcnQgdGhpcyB1bmxlc3MgdGhpcyBpcyBhbiBvbGQgdmVyc2lvbiBvZiBJbnRlbCBBTVQpXHJcbiAgICAgICAgICAgICAgdGhpcy5zb2NrZXRTZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCh0aGlzLnVzZXIubGVuZ3RoICsgdGhpcy5wYXNzLmxlbmd0aCArIDIpICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnVzZXIubGVuZ3RoKSArIHRoaXMudXNlciArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5wYXNzLmxlbmd0aCkgKyB0aGlzLnBhc3MpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0F1dGggVHlwZSBub3QgcmVjb2duaXplZC4gU3RvcHBpbmcuJylcclxuICAgICAgICAgICAgICB0aGlzLnN0b3AoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKChhdXRoVHlwZSA9PT0gMyB8fCBhdXRoVHlwZSA9PT0gNCkgJiYgc3RhdHVzID09PSAxKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJwdHIgPSAwXHJcblxyXG4gICAgICAgICAgICAvLyBSZWFsbVxyXG4gICAgICAgICAgICBjb25zdCByZWFsbWxlbiA9IGF1dGhEYXRhQnVmLmNoYXJDb2RlQXQoY3VycHRyKVxyXG4gICAgICAgICAgICBjb25zdCByZWFsbSA9IGF1dGhEYXRhQnVmLnN1YnN0cmluZyhjdXJwdHIgKyAxLCBjdXJwdHIgKyAxICsgcmVhbG1sZW4pXHJcbiAgICAgICAgICAgIGN1cnB0ciArPSAocmVhbG1sZW4gKyAxKVxyXG5cclxuICAgICAgICAgICAgLy8gTm9uY2VcclxuICAgICAgICAgICAgY29uc3Qgbm9uY2VsZW4gPSBhdXRoRGF0YUJ1Zi5jaGFyQ29kZUF0KGN1cnB0cilcclxuICAgICAgICAgICAgY29uc3Qgbm9uY2UgPSBhdXRoRGF0YUJ1Zi5zdWJzdHJpbmcoY3VycHRyICsgMSwgY3VycHRyICsgMSArIG5vbmNlbGVuKVxyXG4gICAgICAgICAgICBjdXJwdHIgKz0gKG5vbmNlbGVuICsgMSlcclxuXHJcbiAgICAgICAgICAgIC8vIFFPUFxyXG4gICAgICAgICAgICBsZXQgcW9wbGVuID0gMFxyXG4gICAgICAgICAgICBsZXQgcW9wOiBhbnkgPSBudWxsXHJcbiAgICAgICAgICAgIGNvbnN0IGNub25jZTogc3RyaW5nID0gdGhpcy5nZW5lcmF0ZVJhbmRvbU5vbmNlKDMyKVxyXG4gICAgICAgICAgICBjb25zdCBzbmMgPSAnMDAwMDAwMDInXHJcbiAgICAgICAgICAgIGxldCBleHRyYSA9ICcnXHJcbiAgICAgICAgICAgIGlmIChhdXRoVHlwZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgIHFvcGxlbiA9IGF1dGhEYXRhQnVmLmNoYXJDb2RlQXQoY3VycHRyKVxyXG4gICAgICAgICAgICAgIHFvcCA9IGF1dGhEYXRhQnVmLnN1YnN0cmluZyhjdXJwdHIgKyAxLCBjdXJwdHIgKyAxICsgcW9wbGVuKVxyXG4gICAgICAgICAgICAgIGN1cnB0ciArPSAocW9wbGVuICsgMSlcclxuICAgICAgICAgICAgICBleHRyYSA9IGAke3NuY306JHtjbm9uY2V9OiR7U3RyaW5nKHFvcCl9IDpgXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpZ2VzdCA9IHRoaXMuaGV4X21kNSh0aGlzLmhleF9tZDUodGhpcy51c2VyICsgJzonICsgcmVhbG0gKyAnOicgKyB0aGlzLnBhc3MpICsgJzonICsgbm9uY2UgKyAnOicgKyBleHRyYSArIHRoaXMuaGV4X21kNSgnUE9TVDonICsgdGhpcy5hdXRoVXJpKSlcclxuICAgICAgICAgICAgbGV0IHRvdGFsbGVuOiBudW1iZXIgPSB0aGlzLnVzZXIubGVuZ3RoICsgcmVhbG0ubGVuZ3RoICsgbm9uY2UubGVuZ3RoICsgdGhpcy5hdXRoVXJpLmxlbmd0aCArIGNub25jZS5sZW5ndGggKyBzbmMubGVuZ3RoICsgZGlnZXN0Lmxlbmd0aCArIDdcclxuICAgICAgICAgICAgaWYgKGF1dGhUeXBlID09PSA0KSB0b3RhbGxlbiArPSAocGFyc2VJbnQocW9wLmxlbmd0aCkgKyAxKVxyXG4gICAgICAgICAgICBsZXQgYnVmOiBhbnkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIGF1dGhUeXBlKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRvdGFsbGVuKSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy51c2VyLmxlbmd0aCkgKyB0aGlzLnVzZXIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlYWxtLmxlbmd0aCkgKyByZWFsbSArIFN0cmluZy5mcm9tQ2hhckNvZGUobm9uY2UubGVuZ3RoKSArIG5vbmNlICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmF1dGhVcmkubGVuZ3RoKSArIHRoaXMuYXV0aFVyaSArIFN0cmluZy5mcm9tQ2hhckNvZGUoY25vbmNlLmxlbmd0aCkgKyBjbm9uY2UgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHNuYy5sZW5ndGgpICsgc25jICsgU3RyaW5nLmZyb21DaGFyQ29kZShkaWdlc3QubGVuZ3RoKSArIGRpZ2VzdFxyXG4gICAgICAgICAgICBpZiAoYXV0aFR5cGUgPT09IDQpIGJ1ZiArPSAoU3RyaW5nLmZyb21DaGFyQ29kZShxb3AubGVuZ3RoKSArIHFvcClcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXRTZW5kKGJ1ZilcclxuICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMCkgeyAvLyBTdWNjZXNzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvY29sID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgLy8gU2VyaWFsLW92ZXItTEFOOiBTZW5kIEludGVsIEFNVCBzZXJpYWwgc2V0dGluZ3MuLi5cclxuICAgICAgICAgICAgICBjb25zdCBNYXhUeEJ1ZmZlciA9IDEwMDAwXHJcbiAgICAgICAgICAgICAgY29uc3QgVHhUaW1lb3V0ID0gMTAwXHJcbiAgICAgICAgICAgICAgY29uc3QgVHhPdmVyZmxvd1RpbWVvdXQgPSAwXHJcbiAgICAgICAgICAgICAgY29uc3QgUnhUaW1lb3V0ID0gMTAwMDBcclxuICAgICAgICAgICAgICBjb25zdCBSeEZsdXNoVGltZW91dCA9IDEwMFxyXG4gICAgICAgICAgICAgIGNvbnN0IEhlYXJ0YmVhdCA9IDAvLyA1MDAwO1xyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjAsIDB4MDAsIDB4MDAsIDB4MDApICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy5hbXRTZXF1ZW5jZSsrKSArIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoTWF4VHhCdWZmZXIpICtcclxuICAgICAgICAgICAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChUeFRpbWVvdXQpICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChUeE92ZXJmbG93VGltZW91dCkgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHJYKFJ4VGltZW91dCkgK1xyXG4gICAgICAgICAgICAgICAgICBUeXBlQ29udmVydGVyLlNob3J0VG9TdHJYKFJ4Rmx1c2hUaW1lb3V0KSArIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoSGVhcnRiZWF0KSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvY29sID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgLy8gUmVtb3RlIERlc2t0b3A6IFNlbmQgdHJhZmZpYyBkaXJlY3RseS4uLlxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvY29sID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgLy8gUmVtb3RlIElERVI6IFNlbmQgdHJhZmZpYyBkaXJlY3RseS4uLlxyXG4gICAgICAgICAgICAgIHRoaXMuY29ubmVjdFN0YXRlID0gMVxyXG4gICAgICAgICAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgdGhpcy5zdG9wKClcclxuICAgICAgICAgIGJyZWFrIH1cclxuICAgICAgICBjYXNlIDB4MjE6IHsgLy8gUmVzcG9uc2UgdG8gc2V0dGluZ3MgKDMzKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMjMpIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdSZXNwb25zZSB0byBzZXR0aW5ncycpXHJcbiAgICAgICAgICBjbWRzaXplID0gMjNcclxuICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjcsIDB4MDAsIDB4MDAsIDB4MDApICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy5hbXRTZXF1ZW5jZSsrKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCwgMHgxQiwgMHgwMCwgMHgwMCwgMHgwMCkpXHJcbiAgICAgICAgICBpZiAodGhpcy5wcm90b2NvbCA9PT0gMSkgeyB0aGlzLmFtdEtlZXBBbGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5zZW5kQW10S2VlcEFsaXZlLmJpbmQodGhpcyksIDIwMDApIH1cclxuICAgICAgICAgIHRoaXMuY29ubmVjdFN0YXRlID0gMVxyXG4gICAgICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKDMpXHJcbiAgICAgICAgICBicmVhayB9XHJcbiAgICAgICAgY2FzZSAweDI5OiAvLyBTZXJpYWwgU2V0dGluZ3MgKDQxKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMTApIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdTZXJpYWwgU2V0dGluZ3MnKVxyXG4gICAgICAgICAgY21kc2l6ZSA9IDEwXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIGNhc2UgMHgyQTogeyAvLyBJbmNvbWluZyBkaXNwbGF5IGRhdGEgKDQyKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMTApIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdJbmNvbWluZyBkaXNwbGF5IGRhdGEnKVxyXG4gICAgICAgICAgY29uc3QgY3MgPSAoMTAgKyAoKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg5KSAmIDB4RkYpIDw8IDgpICsgKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg4KSAmIDB4RkYpKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgY3MpIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLm9uUHJvY2Vzc0RhdGEodGhpcy5hbXRBY2N1bXVsYXRvci5zdWJzdHJpbmcoMTAsIGNzKSlcclxuICAgICAgICAgIGNtZHNpemUgPSBjc1xyXG4gICAgICAgICAgYnJlYWsgfVxyXG4gICAgICAgIGNhc2UgMHgyQjogLy8gS2VlcCBhbGl2ZSBtZXNzYWdlICg0MylcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDgpIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdLZWVwIEFsdmUgbWVzc2FnZScpXHJcbiAgICAgICAgICBjbWRzaXplID0gOFxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlIDB4NDE6XHJcbiAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCA4KSBicmVha1xyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnS1ZNIHRyYWZmaWMuIENhbGwgb25TdGFydCBoYW5kbGVyLiBBbmQgZm9yd2FyZCByZXN0IG9mIGFjYyBkaXJlY3RseS4nKVxyXG4gICAgICAgICAgdGhpcy5jb25uZWN0U3RhdGUgPSAxXHJcbiAgICAgICAgICB0aGlzLm9uU3RhcnQoKVxyXG4gICAgICAgICAgLy8gS1ZNIHRyYWZmaWMsIGZvcndhcmQgcmVzdCBvZiBhY2N1bXVsYXRvciBkaXJlY3RseS5cclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA+IDgpIHsgdGhpcy5vblByb2Nlc3NEYXRhKHRoaXMuYW10QWNjdW11bGF0b3Iuc3Vic3RyaW5nKDgpKSB9XHJcbiAgICAgICAgICBjbWRzaXplID0gdGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGhcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBVbmtub3duIEludGVsIEFNVCBjb21tYW5kOiAgJHt0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoMCl9ICBhY2NsZW49JHt0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aH1gKVxyXG4gICAgICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIGlmIChjbWRzaXplID09PSAwKSByZXR1cm5cclxuICAgICAgdGhpcy5hbXRBY2N1bXVsYXRvciA9IHRoaXMuYW10QWNjdW11bGF0b3Iuc3Vic3RyaW5nKGNtZHNpemUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoZXhfbWQ1IChzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdNRDUgdGhlIHN0cmluZycpXHJcbiAgICByZXR1cm4gbWQ1KHN0cilcclxuICB9XHJcblxyXG4gIHNvY2tldFNlbmQgKGRhdGE6IHN0cmluZyk6IGFueSB7IC8vIHh4U2VuZFxyXG4gICAgaWYgKGlzVHJ1dGh5KHRoaXMudXJsdmFycykgJiYgaXNUcnV0aHkodGhpcy51cmx2YXJzLnJlZGlydHJhY2UpKSB7IHRoaXMubG9nZ2VyLnZlcmJvc2UoYFJFRElSLVNFTkQoJHtkYXRhLmxlbmd0aH0pOiAke1R5cGVDb252ZXJ0ZXIucnN0cjJoZXgoZGF0YSl9YCkgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICh0aGlzLnNvY2tldCAhPSBudWxsICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IDEpIHsgLy8gMSA9IFdlYlNvY2tldC5PUEVOXHJcbiAgICAgICAgY29uc3QgYiA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYFJlZGlyIFNlbmQoICR7ZGF0YS5sZW5ndGh9KTogJHtUeXBlQ29udmVydGVyLnJzdHIyaGV4KGRhdGEpfWApXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7IGJbaV0gPSBkYXRhLmNoYXJDb2RlQXQoaSkgfVxyXG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQoYi5idWZmZXIpXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBTb2NrZXQgc2VuZCBlcnJvcjogJHtTdHJpbmcoZXJyb3IpfWApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kIHNlbmRzIGRhdGEgb3ZlciB0aGUgd2Vic29ja2V0IHRvIHRoZSBzZXJ2ZXIuXHJcbiAgICogQHBhcmFtIGRhdGEgZGF0YSB0byBzZW5kIHRvIHNlcnZlclxyXG4gICAqL1xyXG4gIHNlbmQgKGRhdGE6IHN0cmluZyk6IGFueSB7IC8vIHNlbmRcclxuICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ1NlbmQgY2FsbGVkICcgKyBkYXRhKVxyXG4gICAgaWYgKHRoaXMuc29ja2V0ID09IG51bGwgfHwgdGhpcy5jb25uZWN0U3RhdGUgIT09IDEpIHJldHVyblxyXG4gICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLlNPTCkge1xyXG4gICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDI4LCAweDAwLCAweDAwLCAweDAwKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy5hbXRTZXF1ZW5jZSsrKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChkYXRhLmxlbmd0aCkgK1xyXG4gICAgICAgIGRhdGEpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNvY2tldFNlbmQoZGF0YSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlbmRBbXRLZWVwQWxpdmUgKCk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5zb2NrZXQgPT0gbnVsbCkgcmV0dXJuXHJcbiAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDJCLCAweDAwLCAweDAwLCAweDAwKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRoaXMuYW10U2VxdWVuY2UrKykpXHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZVJhbmRvbU5vbmNlIChsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgcjogc3RyaW5nID0gJydcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsgciArPSB0aGlzLnJhbmRvbU5vbmNlQ2hhcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMucmFuZG9tTm9uY2VDaGFycy5sZW5ndGgpKSB9XHJcbiAgICByZXR1cm4gclxyXG4gIH1cclxuXHJcbiAgb25Tb2NrZXRDbG9zZWQgKGU6IEV2ZW50KTogYW55IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGUpXHJcbiAgICBpZiAoaXNUcnV0aHkodGhpcy51cmx2YXJzKSAmJiBpc1RydXRoeSh0aGlzLnVybHZhcnMucmVkaXJ0cmFjZSkpIHsgY29uc29sZS5sb2coJ1JFRElSLUNMT1NFRCcpIH1cclxuICAgIHRoaXMubG9nZ2VyLndhcm4oJ1JlZGlyIFNvY2tldCBDbG9zZWQnKVxyXG4gICAgdGhpcy5zdG9wKClcclxuICB9XHJcblxyXG4gIG9uU3RhdGVDaGFuZ2UgKG5ld3N0YXRlOiBudW1iZXIpOiBhbnkge1xyXG4gICAgY29uc29sZS5pbmZvKCdvbnN0YXRlY2hhbmdlJywgbmV3c3RhdGUpXHJcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gbmV3c3RhdGUpIHJldHVyblxyXG4gICAgdGhpcy5zdGF0ZSA9IG5ld3N0YXRlXHJcbiAgICB0aGlzLm9uTmV3U3RhdGUodGhpcy5zdGF0ZSlcclxuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2VkICE9IG51bGwpIHRoaXMub25TdGF0ZUNoYW5nZWQodGhpcywgdGhpcy5zdGF0ZSlcclxuICB9XHJcblxyXG4gIHN0b3AgKCk6IHZvaWQge1xyXG4gICAgdGhpcy5sb2dnZXIud2FybignU3RvcCBjYWxsZWQgb24gUmVkaXJlY3Rvci4gQ2hhbmdlIHN0YXRlIHRvIDAgYW5kIGNsb3NlIFNvY2tldC4nKVxyXG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlKDApXHJcbiAgICB0aGlzLmNvbm5lY3RTdGF0ZSA9IC0xXHJcbiAgICB0aGlzLmFtdEFjY3VtdWxhdG9yID0gJydcclxuICAgIGlmICh0aGlzLnNvY2tldCAhPSBudWxsKSB7IHRoaXMuc29ja2V0LmNsb3NlKCk7IHRoaXMuc29ja2V0ID0gbnVsbCB9XHJcbiAgICBpZiAodGhpcy5hbXRLZWVwQWxpdmVUaW1lciAhPSBudWxsKSB7IGNsZWFySW50ZXJ2YWwodGhpcy5hbXRLZWVwQWxpdmVUaW1lcik7IHRoaXMuYW10S2VlcEFsaXZlVGltZXIgPSBudWxsIH1cclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKiogdXRpbGl0eSBmdW5jdGlvbiB0byBqb2luIHRoZSBjc3MgY2xhc3MgbmFtZXMgKi9cclxuZXhwb3J0IGNvbnN0IGpvaW5DbGFzc2VzID0gKC4uLmNsYXNzTmFtZXMpOiBhbnkgPT5cclxuICBjbGFzc05hbWVzXHJcbiAgICAuZmlsdGVyKChuYW1lKSA9PiAhIWlzRmFsc3kobmFtZSkpXHJcbiAgICAuam9pbignICcpXHJcbiAgICAudHJpbSgpXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHByZXBhcmVIZWFkZXJzID0gKCk6IGFueSA9PiB7XHJcbiAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gIH1cclxuICByZXR1cm4gaGVhZGVyc1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaXNGYWxzeSA9ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSAnJyAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgdmFsdWUgIT09IDBcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIik7IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBJTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJy4vSUxvZ2dlcidcclxuXHJcbi8qKlxyXG4gKiBDb25zb2xlTG9nZ2VyIGltcGxlbWVudHMgSUxvZ2dlciB0byBwcm92aWRlIGJhc2ljIGNvbnNvbGUgbG9nZ2luZyBmdW5jdGlvbmFsaXR5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnNvbGVMb2dnZXIgaW1wbGVtZW50cyBJTG9nZ2VyIHtcclxuICBtaW5MZXZlbDogTG9nTGV2ZWxcclxuICBjb25zdHJ1Y3RvciAobGV2ZWw6IExvZ0xldmVsKSB7XHJcbiAgICB0aGlzLm1pbkxldmVsID0gbGV2ZWxcclxuICB9XHJcblxyXG4gIGxvZyAobGV2ZWw6IExvZ0xldmVsLCBkYXRhOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAobGV2ZWwpIHtcclxuICAgICAgY2FzZSBMb2dMZXZlbC5WRVJCT1NFOlxyXG4gICAgICAgIHRoaXMudmVyYm9zZShkYXRhKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgTG9nTGV2ZWwuSU5GTzpcclxuICAgICAgICB0aGlzLmluZm8oZGF0YSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIExvZ0xldmVsLkRFQlVHOlxyXG4gICAgICAgIHRoaXMuZGVidWcoZGF0YSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIExvZ0xldmVsLldBUk5JTkc6XHJcbiAgICAgICAgdGhpcy53YXJuKGRhdGEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcclxuICAgICAgICB0aGlzLmVycm9yKGRhdGEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVidWcgKGxvZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5taW5MZXZlbCA+PSBMb2dMZXZlbC5ERUJVRykgY29uc29sZS5kZWJ1Zyhsb2cpXHJcbiAgfVxyXG5cclxuICBpbmZvIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuSU5GTykgY29uc29sZS5pbmZvKGxvZylcclxuICB9XHJcblxyXG4gIGVycm9yIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuRVJST1IpIGNvbnNvbGUuZXJyb3IobG9nKVxyXG4gIH1cclxuXHJcbiAgd2FybiAobG9nOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm1pbkxldmVsID49IExvZ0xldmVsLldBUk5JTkcpIGNvbnNvbGUud2Fybihsb2cpXHJcbiAgfVxyXG5cclxuICB2ZXJib3NlIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuVkVSQk9TRSkgY29uc29sZS5sb2cobG9nKVxyXG4gIH1cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtZDVcIik7IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5leHBvcnQgY2xhc3MgQW10VGVybWluYWwge1xyXG4gIHRlcm1pbmFsRW11bGF0aW9uID0gMVxyXG4gIGZ4RW11bGF0aW9uID0gMFxyXG4gIGZ4TGluZUJyZWFrID0gMCAvLyAwID0gQ1IrTEYsIDEgPSBMRlxyXG5cclxuICAvKiogdXNlZCB0byBtYXAgQXNjaWkgdmFsdWVzIHJlY2VpdmVkIGZyb20gc2VyaWFsIHBvcnQgdG8gdW5pY29kZSBjaGFyYWN0ZXJzICovXHJcbiAgQXNjaWlUb1VuaWNvZGUgPSBbXHJcbiAgICAweDAwYzcsXHJcbiAgICAweDAwZmMsXHJcbiAgICAweDAwZTksXHJcbiAgICAweDAwZTIsXHJcbiAgICAweDAwZTQsXHJcbiAgICAweDAwZTAsXHJcbiAgICAweDAwZTUsXHJcbiAgICAweDAwZTcsXHJcbiAgICAweDAwZWEsXHJcbiAgICAweDAwZWIsXHJcbiAgICAweDAwZTgsXHJcbiAgICAweDAwZWYsXHJcbiAgICAweDAwZWUsXHJcbiAgICAweDAwZWMsXHJcbiAgICAweDAwYzQsXHJcbiAgICAweDAwYzUsXHJcbiAgICAweDAwYzksXHJcbiAgICAweDAwZTYsXHJcbiAgICAweDAwYzYsXHJcbiAgICAweDAwZjQsXHJcbiAgICAweDAwZjYsXHJcbiAgICAweDAwZjIsXHJcbiAgICAweDAwZmIsXHJcbiAgICAweDAwZjksXHJcbiAgICAweDAwZmYsXHJcbiAgICAweDAwZDYsXHJcbiAgICAweDAwZGMsXHJcbiAgICAweDAwYTIsXHJcbiAgICAweDAwYTMsXHJcbiAgICAweDAwYTUsXHJcbiAgICAweDIwYTcsXHJcbiAgICAweDAxOTIsXHJcbiAgICAweDAwZTEsXHJcbiAgICAweDAwZWQsXHJcbiAgICAweDAwZjMsXHJcbiAgICAweDAwZmEsXHJcbiAgICAweDAwZjEsXHJcbiAgICAweDAwZDEsXHJcbiAgICAweDAwYWEsXHJcbiAgICAweDAwZGEsXHJcbiAgICAweDAwYmYsXHJcbiAgICAweDIzMTAsXHJcbiAgICAweDAwYWMsXHJcbiAgICAweDAwYmQsXHJcbiAgICAweDAwYmMsXHJcbiAgICAweDAwYTEsXHJcbiAgICAweDAwYWIsXHJcbiAgICAweDAwYmIsXHJcbiAgICAweDI1OTMsXHJcbiAgICAweDI1OTIsXHJcbiAgICAweDI1OTEsXHJcbiAgICAweDI1MDIsXHJcbiAgICAweDI1MjQsXHJcbiAgICAweDI1NjEsXHJcbiAgICAweDI1NjIsXHJcbiAgICAweDI1NTYsXHJcbiAgICAweDI1NTUsXHJcbiAgICAweDI1NjMsXHJcbiAgICAweDI1NTEsXHJcbiAgICAweDI1NTcsXHJcbiAgICAweDI1NWQsXHJcbiAgICAweDI1NWMsXHJcbiAgICAweDI1NWIsXHJcbiAgICAweDI1MTAsXHJcbiAgICAweDI1MTQsXHJcbiAgICAweDI1MzQsXHJcbiAgICAweDI1MmMsXHJcbiAgICAweDI1MWMsXHJcbiAgICAweDI1MDAsXHJcbiAgICAweDI1M2MsXHJcbiAgICAweDI1NWUsXHJcbiAgICAweDI1NWYsXHJcbiAgICAweDI1NWEsXHJcbiAgICAweDI1NTQsXHJcbiAgICAweDI1NjksXHJcbiAgICAweDI1NjYsXHJcbiAgICAweDI1NjAsXHJcbiAgICAweDI1NTAsXHJcbiAgICAweDI1NmMsXHJcbiAgICAweDI1NjcsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NjQsXHJcbiAgICAweDI1NjUsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NTgsXHJcbiAgICAweDI1NTIsXHJcbiAgICAweDI1NTMsXHJcbiAgICAweDI1NmIsXHJcbiAgICAweDI1NmEsXHJcbiAgICAweDI1MTgsXHJcbiAgICAweDI1MGMsXHJcbiAgICAweDI1ODgsXHJcbiAgICAweDI1ODQsXHJcbiAgICAweDI1OGIsXHJcbiAgICAweDI1OTAsXHJcbiAgICAweDI1ODAsXHJcbiAgICAweDAzYjEsXHJcbiAgICAweDAwZGYsXHJcbiAgICAweDAzOTMsXHJcbiAgICAweDAzYzAsXHJcbiAgICAweDAzYTMsXHJcbiAgICAweDAzYzMsXHJcbiAgICAweDAwYjUsXHJcbiAgICAweDAzYzQsXHJcbiAgICAweDAzYzYsXHJcbiAgICAweDAzYjgsXHJcbiAgICAweDIxMjYsXHJcbiAgICAweDAzYjQsXHJcbiAgICAweDIyMWUsXHJcbiAgICAweDAwZjgsXHJcbiAgICAweDAzYjUsXHJcbiAgICAweDIyMGYsXHJcbiAgICAweDIyNjEsXHJcbiAgICAweDAwYjEsXHJcbiAgICAweDIyNjUsXHJcbiAgICAweDIyNjYsXHJcbiAgICAweDIzMjAsXHJcbiAgICAweDIzMjEsXHJcbiAgICAweDAwZjcsXHJcbiAgICAweDIyNDgsXHJcbiAgICAweDAwYjAsXHJcbiAgICAweDIwMjIsXHJcbiAgICAweDAwYjcsXHJcbiAgICAweDIyMWEsXHJcbiAgICAweDIwN2YsXHJcbiAgICAweDAwYjIsXHJcbiAgICAweDIyMGUsXHJcbiAgICAweDAwYTBcclxuICBdXHJcblxyXG4gIEFzY2lpVG9Vbmljb2RlSW50ZWwgPSBbXHJcbiAgICAweDAwYzcsXHJcbiAgICAweDAwZmMsXHJcbiAgICAweDAwZTksXHJcbiAgICAweDAwZTIsXHJcbiAgICAweDAwZTQsXHJcbiAgICAweDAwZTAsXHJcbiAgICAweDAwZTUsXHJcbiAgICAweDAwZTcsXHJcbiAgICAweDAwZWEsXHJcbiAgICAweDAwZWIsXHJcbiAgICAweDAwZTgsXHJcbiAgICAweDAwZWYsXHJcbiAgICAweDAwZWUsXHJcbiAgICAweDAwZWMsXHJcbiAgICAweDAwYzQsXHJcbiAgICAweDAwYzUsXHJcbiAgICAweDAwYzksXHJcbiAgICAweDAwZTYsXHJcbiAgICAweDAwYzYsXHJcbiAgICAweDAwZjQsXHJcbiAgICAweDAwZjYsXHJcbiAgICAweDAwZjIsXHJcbiAgICAweDAwZmIsXHJcbiAgICAweDAwZjksXHJcbiAgICAweDAwZmYsXHJcbiAgICAweDAwZDYsXHJcbiAgICAweDAwZGMsXHJcbiAgICAweDAwYTIsXHJcbiAgICAweDAwYTMsXHJcbiAgICAweDAwYTUsXHJcbiAgICAweDIwYTcsXHJcbiAgICAweDAxOTIsXHJcbiAgICAweDAwZTEsXHJcbiAgICAweDAwZWQsXHJcbiAgICAweDAwZjMsXHJcbiAgICAweDAwZmEsXHJcbiAgICAweDAwZjEsXHJcbiAgICAweDAwZDEsXHJcbiAgICAweDAwYWEsXHJcbiAgICAweDAwZGEsXHJcbiAgICAweDAwYmYsXHJcbiAgICAweDIzMTAsXHJcbiAgICAweDAwYWMsXHJcbiAgICAweDAwYmQsXHJcbiAgICAweDAwYmMsXHJcbiAgICAweDAwYTEsXHJcbiAgICAweDAwYWUsXHJcbiAgICAweDAwYmIsXHJcbiAgICAweDI1OTMsXHJcbiAgICAweDI1OTIsXHJcbiAgICAweDI1OTEsXHJcbiAgICAweDI1MDIsXHJcbiAgICAweDI1MjQsXHJcbiAgICAweDI1NjEsXHJcbiAgICAweDI1NjIsXHJcbiAgICAweDI1NTYsXHJcbiAgICAweDI1NTUsXHJcbiAgICAweDI1NjMsXHJcbiAgICAweDI1NTEsXHJcbiAgICAweDI1NTcsXHJcbiAgICAweDI1NWQsXHJcbiAgICAweDI1NWMsXHJcbiAgICAweDI1NWIsXHJcbiAgICAweDI1MTAsXHJcbiAgICAweDI1MTQsXHJcbiAgICAweDI1MzQsXHJcbiAgICAweDI1MmMsXHJcbiAgICAweDI1MWMsXHJcbiAgICAweDI1MDAsXHJcbiAgICAweDI1M2MsXHJcbiAgICAweDI1NWUsXHJcbiAgICAweDI1NWYsXHJcbiAgICAweDI1NWEsXHJcbiAgICAweDI1NTQsXHJcbiAgICAweDI1NjksXHJcbiAgICAweDI1NjYsXHJcbiAgICAweDI1NjAsXHJcbiAgICAweDI1NTAsXHJcbiAgICAweDI1NmMsXHJcbiAgICAweDI1NjcsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NjQsXHJcbiAgICAweDI1NjUsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NTgsXHJcbiAgICAweDI1NTIsXHJcbiAgICAweDI1NTMsXHJcbiAgICAweDI1NmIsXHJcbiAgICAweDI1NmEsXHJcbiAgICAweDI1MTgsXHJcbiAgICAweDI1MGMsXHJcbiAgICAweDI1ODgsXHJcbiAgICAweDI1ODQsXHJcbiAgICAweDI1OGIsXHJcbiAgICAweDI1OTAsXHJcbiAgICAweDI1ODAsXHJcbiAgICAweDAzYjEsXHJcbiAgICAweDAwZGYsXHJcbiAgICAweDAzOTMsXHJcbiAgICAweDAzYzAsXHJcbiAgICAweDAzYTMsXHJcbiAgICAweDAzYzMsXHJcbiAgICAweDAwYjUsXHJcbiAgICAweDAzYzQsXHJcbiAgICAweDAzYzYsXHJcbiAgICAweDAzYjgsXHJcbiAgICAweDIxMjYsXHJcbiAgICAweDAzYjQsXHJcbiAgICAweDIyMWUsXHJcbiAgICAweDAwZjgsXHJcbiAgICAweDAzYjUsXHJcbiAgICAweDIyMGYsXHJcbiAgICAweDIyNjEsXHJcbiAgICAweDAwYjEsXHJcbiAgICAweDIyNjUsXHJcbiAgICAweDIyNjYsXHJcbiAgICAweDIzMjAsXHJcbiAgICAweDIzMjEsXHJcbiAgICAweDAwZjcsXHJcbiAgICAweDIyNDgsXHJcbiAgICAweDAwYjAsXHJcbiAgICAweDIwMjIsXHJcbiAgICAweDAwYjcsXHJcbiAgICAweDIyMWEsXHJcbiAgICAweDIwN2YsXHJcbiAgICAweDAwYjIsXHJcbiAgICAweDIyMGUsXHJcbiAgICAweDAwYTBcclxuICBdXHJcblxyXG4gIFN0YXRlQ2hhbmdlID0gKG5ld1N0YXRlKTogYW55ID0+IHsgfVxyXG5cclxuICAvKiogc2VuZGluZyAgbXVsdGlwbGUgdW5pY29kZSB2YWx1ZXMgdG8gc29ja2V0ICovXHJcbiAgVGVybVNlbmRLZXlzID0gKGtleXMpOiBhbnkgPT4gdGhpcy5vblNlbmQoa2V5cylcclxuXHJcbiAgb25TZW5kOiAoZGF0YTogYW55KSA9PiB2b2lkXHJcblxyXG4gIFByb2Nlc3NEYXRhOiAoc3RyOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IElEYXRhUHJvY2Vzc29yIH0gZnJvbSAnLi9JRGF0YVByb2Nlc3NvcidcclxuXHJcbi8qKiBjbGFzcyB0byBwcm9jZXNzIHNlcmlhbCBvdmVyIGxhbiBkYXRhICoqL1xyXG5leHBvcnQgY2xhc3MgVGVybWluYWxEYXRhUHJvY2Vzc29yIGltcGxlbWVudHMgSURhdGFQcm9jZXNzb3Ige1xyXG4gIHRlcm1pbmFsOiBhbnlcclxuICBjb25zdHJ1Y3RvciAodGVybWluYWwpIHtcclxuICAgIHRoaXMudGVybWluYWwgPSB0ZXJtaW5hbFxyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc0RhdGFUb1h0ZXJtOiAoc3RyOiBhbnkpID0+IHZvaWRcclxuICBjbGVhclRlcm1pbmFsOiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKiBwcm9jZXNzaW5nIGRhdGEgcmVjZWl2ZWQgZnJvbSBzZXJpYWwgcG9ydCoqL1xyXG4gIHByb2Nlc3NEYXRhID0gKHN0cjogc3RyaW5nKTogYW55ID0+IHtcclxuICAgIGlmICh0aGlzLnRlcm1pbmFsLmNhcHR1cmUgIT0gbnVsbCkgdGhpcy50ZXJtaW5hbC5jYXB0dXJlICs9IHN0clxyXG4gICAgbGV0IGM6IHN0cmluZyA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBjaCA9IHN0ci5jaGFyQ29kZUF0KGkpXHJcbiAgICAgIGlmIChzdHJbaV0gPT09ICdKJykge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUZXJtaW5hbCgpXHJcbiAgICAgIH0gZWxzZSBpZiAoKGNoICYgMHg4MCkgIT09IDApIHtcclxuICAgICAgICBjICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy50ZXJtaW5hbC5Bc2NpaVRvVW5pY29kZVtjaCAmIDB4N2ZdKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGMgKz0gYCR7c3RyW2ldfWBcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5wcm9jZXNzRGF0YVRvWHRlcm0oYylcclxuICB9XHJcbn1cclxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc29sLWhlYWRlcntkaXNwbGF5OmZsZXh9LnBvd2VyLW9wdGlvbnN7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxJX1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL1NlcmlhbE92ZXJMQU4vc29sLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsWUFDSSxZQUFBLENBRUosZUFDQyxhQUFBLENBQ0EsaUJBQUEsQ0FDQSxRQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXHJcXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxcclxcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcXHJcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcclxcbi5zb2wtaGVhZGVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG59XFxyXFxuLnBvd2VyLW9wdGlvbnMge1xcclxcblxcdGRpc3BsYXk6IGJsb2NrO1xcclxcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRyaWdodDogMSU7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ4dGVybVwiKTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFN0eWxlIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxuXHJcbmNvbnN0IFRlcm1pbmFsQ29udGFpbmVyID0gU3R5bGUuZGl2YFxyXG4gICBkaXNwbGF5OmJsb2NrO1xyXG4gICB0ZXh0LWFsaWduOmNlbnRlcjtcclxuYFxyXG5jb25zdCBYVGVybSA9IFN0eWxlLmRpdmBcclxuICAgZGlzcGxheTppbmxpbmUtYmxvY2s7XHJcbmBcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BUZXJtaW5hbCB7XHJcbiAgaGFuZGxlS2V5UHJlc3M6IGFueVxyXG4gIHh0ZXJtOiBhbnlcclxuICBoYW5kbGVLZXlEb3duUHJlc3M6IGFueVxyXG59XHJcblxyXG5jbGFzcyBUZXJtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wVGVybWluYWw+IHtcclxuICBjb21wb25lbnREaWRNb3VudCAoKTogdm9pZCB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3h0ZXJtJykgPz8gJydcclxuICAgIGNvbnN0IHsgeHRlcm0sIGhhbmRsZUtleVByZXNzIH0gPSB0aGlzLnByb3BzXHJcbiAgICBpZiAoaXNGYWxzeShlbGVtZW50KSkge1xyXG4gICAgICB4dGVybS5vcGVuKGVsZW1lbnQpXHJcbiAgICAgIHh0ZXJtLm9uRGF0YShkYXRhID0+IGhhbmRsZUtleVByZXNzKGRhdGEpKVxyXG4gICAgICB4dGVybS5hdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIoZSA9PiB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgIGlmIChpc0ZhbHN5KGUuY3RybEtleSkgJiYgaXNGYWxzeShlLnNoaWZ0S2V5KSAmJiAoZS5rZXlDb2RlID09PSA2NykpIHtcclxuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh4dGVybS5nZXRTZWxlY3Rpb24oKSlcclxuICAgICAgICB9IGVsc2UgaWYgKGlzRmFsc3koZS5jdHJsS2V5KSAmJiBpc0ZhbHN5KGUuc2hpZnRLZXkpICYmIChlLmtleUNvZGUgPT09IDg2KSkge1xyXG4gICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKVxyXG4gICAgICAgICAgICAudGhlbih0ZXh0ID0+IGhhbmRsZUtleVByZXNzKHRleHQpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9IGVsc2UgaWYgKGUuY29kZSA9PT0gJ1NwYWNlJykge1xyXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUtleVByZXNzKGUua2V5KVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxUZXJtaW5hbENvbnRhaW5lcj5cclxuICAgICAgICA8WFRlcm0gaWQ9XCJ4dGVybVwiIC8+XHJcbiAgICAgIDwvVGVybWluYWxDb250YWluZXI+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXJtXHJcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NvbC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IEFtdFRlcm1pbmFsIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9BTVRUZXJtaW5hbCdcclxuaW1wb3J0IFN0eWxlIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgeyBBTVRSZWRpcmVjdG9yLCBQcm90b2NvbCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQU1UUmVkaXJlY3RvcidcclxuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQ29uc29sZUxvZ2dlcidcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0lMb2dnZXInXHJcbmltcG9ydCB7IFRlcm1pbmFsRGF0YVByb2Nlc3NvciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvVGVybWluYWxEYXRhUHJvY2Vzc29yJ1xyXG5pbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gJ3h0ZXJtJ1xyXG5pbXBvcnQgVGVybSBmcm9tICcuL1Rlcm1pbmFsJ1xyXG5pbXBvcnQgJ3h0ZXJtL2Nzcy94dGVybS5jc3MnXHJcbmltcG9ydCAnLi9zb2wuc2NzcydcclxuXHJcbmNvbnN0IFN0eWxlZERpdiA9IFN0eWxlLmRpdmBcclxuZGlzcGxheSA6IGlubGluZS1ibG9jaztcclxucGFkZGluZyA6IDBweCA1cHg7XHJcbmBcclxuXHJcbmNvbnN0IEhlYWRlclN0cmlwID0gU3R5bGUuZGl2YFxyXG5iYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JheTtcclxucGFkZGluZzogNXB4O1xyXG5mb250LXNpemU6IDEzcHg7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxuYFxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTT0xQcm9wcyB7XHJcbiAgZGV2aWNlSWQ6IHN0cmluZyB8IG51bGxcclxuICBtcHNTZXJ2ZXI6IHN0cmluZyB8IG51bGxcclxuICBhdXRvQ29ubmVjdD86IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTT0xTdGF0ZXMge1xyXG4gIGlzQ29ubmVjdGVkOiBib29sZWFuXHJcbiAgU09Mc3RhdGU6IG51bWJlclxyXG4gIHBvd2VyU3RhdGU6IG51bWJlclxyXG4gIHNob3dTdWNjZXNzOiBib29sZWFuXHJcbiAgbWVzc2FnZTogc3RyaW5nXHJcbiAgaXNTZWxlY3RlZDogYm9vbGVhblxyXG4gIHR5cGU6IHN0cmluZ1xyXG4gIHNvbE5vdEVuYWJsZWQ6IHN0cmluZ1xyXG4gIGRldmljZU9uU2xlZXA6IHN0cmluZ1xyXG4gIGlzUG93ZXJTdGF0ZUxvYWRlZDogYm9vbGVhblxyXG59XHJcblxyXG4vKiogY29udGFpbmVyIGNsYXNzIGZvciBTT0wgKi9cclxuZXhwb3J0IGNsYXNzIFNvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxTT0xQcm9wcywgU09MU3RhdGVzPiB7XHJcbiAgcmVkaXJlY3RvcjogYW55XHJcbiAgdGVybWluYWw6IGFueVxyXG4gIGxvZ2dlcjogYW55XHJcbiAgZGF0YVByb2Nlc3NvcjogYW55XHJcbiAgY2FsbGJhY2s6IGFueVxyXG4gIHRlcm06IGFueVxyXG4gIGZyOiBGaWxlUmVhZGVyXHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBTT0xQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLmxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKExvZ0xldmVsLkVSUk9SKVxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaXNDb25uZWN0ZWQ6IGZhbHNlLFxyXG4gICAgICBTT0xzdGF0ZTogMCxcclxuICAgICAgcG93ZXJTdGF0ZTogMCxcclxuICAgICAgc2hvd1N1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiAnJyxcclxuICAgICAgaXNTZWxlY3RlZDogdHJ1ZSxcclxuICAgICAgdHlwZTogJycsXHJcbiAgICAgIHNvbE5vdEVuYWJsZWQ6ICcnLFxyXG4gICAgICBkZXZpY2VPblNsZWVwOiAnJyxcclxuICAgICAgaXNQb3dlclN0YXRlTG9hZGVkOiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdCA9ICgpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IHNlcnZlcjogc3RyaW5nID0gdGhpcy5wcm9wcy5tcHNTZXJ2ZXIgIT0gbnVsbCA/IHRoaXMucHJvcHMubXBzU2VydmVyLnJlcGxhY2UoJ2h0dHAnLCAnd3MnKSA6ICcnXHJcbiAgICBjb25zdCBkZXZpY2VVdWlkOiBzdHJpbmcgPSB0aGlzLnByb3BzLmRldmljZUlkICE9IG51bGwgPyB0aGlzLnByb3BzLmRldmljZUlkIDogJydcclxuICAgIHRoaXMudGVybWluYWwgPSBuZXcgQW10VGVybWluYWwoKVxyXG4gICAgdGhpcy5yZWRpcmVjdG9yID0gbmV3IEFNVFJlZGlyZWN0b3IoXHJcbiAgICAgIHRoaXMubG9nZ2VyLFxyXG4gICAgICBQcm90b2NvbC5TT0wsXHJcbiAgICAgIG5ldyBGaWxlUmVhZGVyKCksXHJcbiAgICAgIGRldmljZVV1aWQsXHJcbiAgICAgIDE2OTk0LFxyXG4gICAgICAnJyxcclxuICAgICAgJycsXHJcbiAgICAgIDAsXHJcbiAgICAgIDAsXHJcbiAgICAgIGAke3NlcnZlcn0vcmVsYXlgXHJcbiAgICApXHJcbiAgICB0aGlzLmRhdGFQcm9jZXNzb3IgPSBuZXcgVGVybWluYWxEYXRhUHJvY2Vzc29yKHRoaXMudGVybWluYWwpXHJcbiAgICB0aGlzLnRlcm1pbmFsLm9uU2VuZCA9IHRoaXMucmVkaXJlY3Rvci5zZW5kLmJpbmQodGhpcy5yZWRpcmVjdG9yKVxyXG4gICAgdGhpcy5yZWRpcmVjdG9yLm9uTmV3U3RhdGUgPSB0aGlzLnRlcm1pbmFsLlN0YXRlQ2hhbmdlLmJpbmQodGhpcy50ZXJtaW5hbClcclxuICAgIHRoaXMucmVkaXJlY3Rvci5vblN0YXRlQ2hhbmdlZCA9IHRoaXMub25UZXJtaW5hbFN0YXRlQ2hhbmdlLmJpbmQodGhpcylcclxuICAgIHRoaXMucmVkaXJlY3Rvci5vblByb2Nlc3NEYXRhID0gdGhpcy5kYXRhUHJvY2Vzc29yLnByb2Nlc3NEYXRhLmJpbmQodGhpcy5kYXRhUHJvY2Vzc29yKVxyXG4gICAgdGhpcy5kYXRhUHJvY2Vzc29yLnByb2Nlc3NEYXRhVG9YdGVybSA9IHRoaXMuaGFuZGxlV3JpdGVUb1h0ZXJtLmJpbmQodGhpcylcclxuICAgIHRoaXMuZGF0YVByb2Nlc3Nvci5jbGVhclRlcm1pbmFsID0gdGhpcy5oYW5kbGVDbGVhclRlcm1pbmFsLmJpbmQodGhpcylcclxuICAgIHRoaXMudGVybSA9IG5ldyBUZXJtaW5hbCh7XHJcbiAgICAgIGN1cnNvclN0eWxlOiAnYmxvY2snLFxyXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgIHJvd3M6IDMwLFxyXG4gICAgICBjb2xzOiAxMDBcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjbGVhblVwID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy50ZXJtaW5hbCA9IG51bGxcclxuICAgIHRoaXMucmVkaXJlY3RvciA9IG51bGxcclxuICAgIHRoaXMuZGF0YVByb2Nlc3NvciA9IG51bGxcclxuICAgIHRoaXMudGVybSA9IG51bGxcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpOiB2b2lkIHtcclxuICAgIHRoaXMuaW5pdCgpXHJcbiAgfVxyXG5cclxuICAvKiogd3JpdGUgdGhlIHByb2Nlc3NlZCBkYXRhIGZyb20gd2Vic2Nva2V0IGluIHRvIHh0ZXJtICovXHJcblxyXG4gIGhhbmRsZVdyaXRlVG9YdGVybSA9IChzdHIpOiBhbnkgPT4gdGhpcy50ZXJtLndyaXRlKHN0cilcclxuXHJcbiAgaGFuZGxlQ2xlYXJUZXJtaW5hbCA9ICgpOiBhbnkgPT4gdGhpcy50ZXJtLnJlc2V0KClcclxuXHJcbiAgLyoqIGNhcHR1cmUgdGhlIGRhdGEgb24geHRlcm0ga2V5IHByZXNzICovXHJcbiAgaGFuZGxlS2V5UHJlc3MgPSAoZG9tRXZlbnQpOiBhbnkgPT4gdGhpcy50ZXJtaW5hbC5UZXJtU2VuZEtleXMoZG9tRXZlbnQpXHJcblxyXG4gIGhhbmRsZUtleURvd25QcmVzcyA9IChkb21FdmVudCk6IGFueSA9PiB0aGlzLnRlcm1pbmFsLmhhbmRsZUtleURvd25FdmVudHMoZG9tRXZlbnQpXHJcblxyXG4gIHN0YXJ0U09MID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucmVkaXJlY3Rvci5zdGFydChXZWJTb2NrZXQpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdG9wU09MID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucmVkaXJlY3Rvci5zdG9wKClcclxuICAgIH1cclxuICAgIHRoaXMuaGFuZGxlQ2xlYXJUZXJtaW5hbCgpXHJcbiAgICB0aGlzLmNsZWFuVXAoKVxyXG4gICAgdGhpcy5pbml0KClcclxuICB9XHJcblxyXG4gIGhhbmRsZVNPTENvbm5lY3QgPSAoZSk6IHZvaWQgPT4ge1xyXG4gICAgZS5wZXJzaXN0KClcclxuICAgIGlmICh0aGlzLnN0YXRlLlNPTHN0YXRlID09PSAwKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRTT0woKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdG9wU09MKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uVGVybWluYWxTdGF0ZUNoYW5nZSA9IChyZWRpcmVjdG9yLCBzdGF0ZTogbnVtYmVyKTogdm9pZCA9PiB0aGlzLnNldFN0YXRlKHsgU09Mc3RhdGU6IHN0YXRlIH0pXHJcblxyXG4gIC8qKiBjYWxsYmFjayBmdW5jdGlvbnMgZnJvbSBjaGlsZCBjb21wb25lbnRzIHRvIHVwZGF0ZSB0aGUgc3RhdGUgdmFsdWVzICovXHJcbiAgaGFuZGxlRmVhdHVyZVN0YXR1cyA9ICh2YWx1ZSk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNvbE5vdEVuYWJsZWQ6IHZhbHVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0U09MU3RhdGUgPSAoKTogYW55ID0+IHRoaXMuc3RhdGUuU09Mc3RhdGUgPT09IDMgPyAyIDogMFxyXG5cclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICBjb25zdCB7IFNPTHN0YXRlIH0gPSB0aGlzLnN0YXRlXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgPEhlYWRlclN0cmlwPlxyXG4gICAgICAgICAgPFN0eWxlZERpdj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZVNPTENvbm5lY3R9PntTT0xzdGF0ZSA9PT0gMyA/ICdEaXNjb25uZWN0JyA6ICdDb25uZWN0J308L2J1dHRvbj5cclxuICAgICAgICAgIDwvU3R5bGVkRGl2PlxyXG4gICAgICAgIDwvSGVhZGVyU3RyaXA+XHJcbiAgICAgICAge1NPTHN0YXRlID09PSAzICYmIHRoaXMudGVybSAmJiA8VGVybSBoYW5kbGVLZXlQcmVzcz17dGhpcy5oYW5kbGVLZXlQcmVzc30gaGFuZGxlS2V5RG93blByZXNzPXt0aGlzLmhhbmRsZUtleURvd25QcmVzc30geHRlcm09e3RoaXMudGVybX0gLz59XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ4dGVybS9jc3MveHRlcm0uY3NzXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=