!function(t,e){for(var n in e)t[n]=e[n]}(exports,function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=80)}([function(t,e){t.exports=require("react")},function(t,e,n){"use strict";n.d(e,"a",(function(){return l})),n.d(e,"f",(function(){return c})),n.d(e,"h",(function(){return d})),n.d(e,"i",(function(){return A})),n.d(e,"j",(function(){return p})),n.d(e,"b",(function(){return u})),n.d(e,"d",(function(){return g})),n.d(e,"g",(function(){return C})),n.d(e,"c",(function(){return b})),n.d(e,"k",(function(){return x})),n.d(e,"l",(function(){return v})),n.d(e,"e",(function(){return y}));var i=n(19),r=n.n(i),o=n(20),a=n.n(o);const s=t=>Array.isArray(t)?t.map(s):null!==t&&y("object"==typeof t)?Object.entries(t).reduce((t,[e,n])=>(t[a()(e)]=s(n),t),{}):t,l=(t,e)=>((t,e)=>Object.keys(e).reduce((n,i)=>r.a.copy(i,e[i],t,n),{}))(s(t),e),c=t=>"function"==typeof t,d=t=>new RegExp("^[a-zA-Z0-9$@$!%*#?&-_~^]+$").test(t),A=t=>new RegExp("^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9$@$!%*#?&-_~^]{8,32}$").test(t),p=t=>new RegExp("^(102[4-9]|10[3-9][0-9]|1[1-9][0-9]{2}|[2-9][0-9]{3}|[1-3][0-9]{4}|4[0-8][0-9]{3}|490[0-9]{2}|491[0-4][0-9]|4915[01])$").test(t),u=t=>!y(t)||new RegExp("[^a-zA-Z0-9._-]").test(t),g=(t,e)=>3===t?h(e):6===t?f(e):201===t?m(e):"",h=t=>new RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(t),f=t=>new RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(t),m=t=>/^(?=.{1,254}$)((?=[a-z0-9-]{1,63}\.)(xn--+)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/.test(t),C=(...t)=>t.filter(t=>!!y(t)).join(" ").trim(),b=t=>{const e={"#":"%23","%":"%25"};return t.replace(/#|%/g,t=>e[t])},x=(t,e)=>{const n={Accept:"application/json","Content-Type":"application/json"};return y(e)?n["X-MPS-API-Key"]=t:n["X-RPS-API-Key"]=t,n},v=t=>!!y(/(\.pfx)$/i.exec(t)),y=t=>null!=t&&""!==t&&!1!==t&&0!==t},function(t,e,n){"use strict";n.d(e,"a",(function(){return a})),n.d(e,"c",(function(){return s})),n.d(e,"b",(function(){return l}));var i=n(12),r=n.n(i),o=n(1);const a=t=>t.map(t=>{const e=Object.assign({},t.headerComponentParams),n=Object(o.e)(t.headerName)?r.a.t(t.headerName):void 0,i=Object(o.e)(t.headerTooltip)?r.a.t(t.headerTooltip):n;return e.description=Object(o.e)(t.headerComponentParams)&&Object(o.e)(t.headerComponentParams.description)?r.a.t(t.headerComponentParams.description):n,Object.assign(Object.assign({},t),{headerName:n,headerComponentParams:e,headerTooltip:i})}),s=t=>r.a.t(t),l=(t,e)=>r.a.t(t,{translate:e})},,,function(t,e,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function s(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function l(t,e){for(var n={},i=[],r=0;r<t.length;r++){var o=t[r],l=e.base?o[0]+e.base:o[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var A=s(d),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==A?(a[A].references++,a[A].updater(p)):a.push({identifier:d,updater:f(p,e),references:1}),i.push(d)}return i}function c(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var d,A=(d=[],function(t,e){return d[t]=e,d.filter(Boolean).join("\n")});function p(t,e,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=A(e,r);else{var o=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function u(t,e,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var g=null,h=0;function f(t,e){var n,i,r;if(e.singleton){var o=h++;n=g||(g=c(e)),i=p.bind(null,n,o,!1),r=p.bind(null,n,o,!0)}else n=c(e),i=u.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=r());var n=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var r=s(n[i]);a[r].references--}for(var o=l(t,e),c=0;c<n.length;c++){var d=s(n[c]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}n=o}}}},function(t,e,n){"use strict";function i(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);i=!0);}catch(t){r=!0,o=t}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var e=i(t,4),n=e[1],r=e[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),s="/*# ".concat(a," */"),l=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(l).concat([s]).join("\n")}return[n].join("\n")}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);i&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},function(t,e){t.exports=require("@fortawesome/react-fontawesome")},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var i=n(1),r=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{l(i.next(t))}catch(t){o(t)}}function s(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((i=i.apply(t,e||[])).next())}))};class o{static get(t,e,n={}){return r(this,void 0,void 0,(function*(){const r=Object(i.k)(e);return yield o.fetch(t,Object.assign(Object.assign({},n),{method:"GET",headers:r}))}))}static post(t,e={},n,a,s={}){return r(this,void 0,void 0,(function*(){const r=Object(i.k)(n,a);return Object(i.e)(a)?yield o.fetch(t,Object.assign(Object.assign({},s),{method:"POST",body:e,headers:r})):yield o.fetchRPS(t,Object.assign(Object.assign({},s),{method:"POST",body:e,headers:r}))}))}static delete(t,e,n={}){return r(this,void 0,void 0,(function*(){const r=Object(i.k)(e);return yield o.fetchRPS(t,Object.assign(Object.assign({},n),{method:"DELETE",headers:r}))}))}static patch(t,e={},n,a={}){return r(this,void 0,void 0,(function*(){const r=Object(i.k)(n);return yield o.fetchRPS(t,Object.assign(Object.assign({},a),{method:"PATCH",body:e,headers:r}))}))}static fetch(t,e={}){return r(this,void 0,void 0,(function*(){return e.mode="cors",e.credentials="include",e.withCredentials=!0,yield fetch(t,e).then(t=>r(this,void 0,void 0,(function*(){return yield t.json()})))}))}static fetchRPS(t,e={}){return r(this,void 0,void 0,(function*(){return yield fetch(t,e).then(t=>r(this,void 0,void 0,(function*(){return{status:t.status,data:204===t.status?null:yield t.json()}})))}))}}},function(t,e,n){"use strict";var i=n(0),r=n.n(i),o=n(13);const a=n.n(o).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:t})=>s(t)};
border: ${({type:t})=>"1px solid "+s(t)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,s=t=>"success"===t?"#4caf50":"warning"===t?"#ff9800":"error"===t?"#f44336":"#000000";e.a=({message:t,type:e})=>r.a.createElement(a,{type:e},t)},function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return a})),n.d(e,"a",(function(){return s}));var i=n(0),r=n.n(i);const o=r.a.createContext({data:{}});class a extends r.a.Component{render(){return r.a.createElement(o.Provider,{value:{data:this.props.data}},this.props.children)}}const s=({children:t})=>r.a.createElement(o.Consumer,null,t)},function(t,e){t.exports=require("i18next")},function(t,e){t.exports=require("styled-components")},,,,function(t,e){t.exports=require("@fortawesome/free-solid-svg-icons")},,function(t,e){t.exports=require("dot-object")},function(t,e){t.exports=require("camelcase")},function(t,e){t.exports=require("@fortawesome/fontawesome-svg-core")},,function(t,e){t.exports=require("ag-grid-react")},,,,,,,,,function(t,e){t.exports=require("ag-grid-community/dist/styles/ag-grid.css")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";var i=n(6),r=n.n(i),o=n(7),a=n.n(o)()(r.a);a.push([t.i,'.tooltip{position:relative;display:inline;align-content:center}.tooltip .tooltip__text{width:200px;z-index:1;white-space:normal;margin:10px 10px 10px 10px;background:#fff;color:#27394f;padding:4px 8px;font-size:12px;line-height:1.4;min-width:100px;text-align:center;border-radius:6px;border:1px solid #000;transition:opacity 1s}.tooltip .tooltip__text::after{content:"";position:absolute;top:100%;left:50%;margin-left:-5px;border-width:5px;border-style:solid;border-color:#fff transparent transparent transparent}.ag-root-wrapper{overflow:visible !important}.ag-root{overflow:visible !important}.ag-header{overflow:visible !important}.ag-header-viewport{overflow:visible !important}',"",{version:3,sources:["webpack://./src/reactjs/components/shared/Tooltip.scss"],names:[],mappings:"AAKA,SACE,iBAAA,CACA,cAAA,CACA,oBAAA,CACA,wBACE,WAAA,CACA,SAAA,CACA,kBAAA,CACA,0BAAA,CACA,eAAA,CACA,aAAA,CACA,eAAA,CACA,cAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CACA,qBAAA,CACA,qBAAA,CAEF,+BACE,UAAA,CACA,iBAAA,CACA,QAAA,CACA,QAAA,CACA,gBAAA,CACA,gBAAA,CACA,kBAAA,CACA,qDAAA,CAGJ,iBACE,2BAAA,CAEF,SACE,2BAAA,CAED,WACC,2BAAA,CAEF,oBACE,2BAAA",sourcesContent:['/*********************************************************************\r\n* Copyright (c) Intel Corporation 2019\r\n* SPDX-License-Identifier: Apache-2.0\r\n**********************************************************************/\r\n\r\n.tooltip {\r\n  position: relative;\r\n  display: inline;\r\n  align-content: center;\r\n  .tooltip__text {\r\n    width: 200px;\r\n    z-index:1;\r\n    white-space: normal;\r\n    margin: 10px 10px 10px 10px;\r\n    background: white;\r\n    color: #27394f;\r\n    padding: 4px 8px;\r\n    font-size: 12px;\r\n    line-height: 1.4;\r\n    min-width: 100px;\r\n    text-align: center;\r\n    border-radius: 6px;\r\n    border: 1px solid black;\r\n    transition: opacity 1s;\r\n  }\r\n  .tooltip__text::after {\r\n    content: "";\r\n    position: absolute;\r\n    top: 100%;\r\n    left: 50%;\r\n    margin-left: -5px;\r\n    border-width: 5px;\r\n    border-style: solid;\r\n    border-color: white transparent transparent transparent;\r\n  }\r\n}\r\n.ag-root-wrapper{\r\n  overflow: visible !important;\r\n} \r\n.ag-root{\r\n  overflow: visible !important;\r\n}\r\n .ag-header {\r\n  overflow: visible !important;\r\n}\r\n.ag-header-viewport {\r\n  overflow: visible !important;\r\n}\r\n\r\n'],sourceRoot:""}]),e.a=a},function(t,e,n){"use strict";var i=n(6),r=n.n(i),o=n(7),a=n.n(o)()(r.a);a.push([t.i,".custom-tooltip{position:absolute;border:1px solid #6495ed;color:#000;pointer-events:none;transition:opacity 1s;background-color:#fff}.custom-tooltip.ag-tooltip-hiding{opacity:0}.custom-tooltip p{margin:5px;white-space:nowrap}","",{version:3,sources:["webpack://./src/reactjs/components/AuditLog/CustomTooltip.scss"],names:[],mappings:"AAKA,gBACI,iBAAA,CACA,wBAAA,CACA,UAAA,CACA,mBAAA,CACA,qBAAA,CACA,qBAAA,CAGJ,kCACI,SAAA,CAGJ,kBACI,UAAA,CACA,kBAAA",sourcesContent:["/*********************************************************************\r\n* Copyright (c) Intel Corporation 2019\r\n* SPDX-License-Identifier: Apache-2.0\r\n**********************************************************************/\r\n\r\n.custom-tooltip {\r\n    position: absolute;\r\n    border: 1px solid cornflowerblue;\r\n    color: #000000;\r\n    pointer-events: none;\r\n    transition: opacity 1s;\r\n    background-color: white;\r\n}\r\n\r\n.custom-tooltip.ag-tooltip-hiding {\r\n    opacity: 0;\r\n}\r\n\r\n.custom-tooltip p {\r\n    margin: 5px;\r\n    white-space: nowrap;\r\n}\r\n"],sourceRoot:""}]),e.a=a},function(t,e,n){"use strict";var i=n(6),r=n.n(i),o=n(7),a=n.n(o)()(r.a);a.push([t.i,'.agGrid-footer{background:#2d3436;height:26px}.agGrid-footer .ag-grid-footer-cell{width:33%;display:inline-block}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}@keyframes spin{to{-webkit-transform:rotate(360deg)}}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg)}}.align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}.export-to-csv{align-content:left;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;text-decoration:underline;cursor:pointer}.data-export-info-icon{color:#d0d0d0;padding-left:5px;padding-top:4px;font-size:12px}.agGrid-Paginition{display:inline-block}.agGrid-Paginition button{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.agGrid-Paginition button:disabled{color:#8c8c8c;pointer-events:none}.agGrid-Paginition span{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.go-to-page{padding-top:2px;padding-right:4px;align-content:right;color:#f5f5f5;background:#2d3436;border:none !important;font-size:12px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;outline:none;text-decoration:underline}.pagination-input{float:right;width:75px;margin-top:2px;font-size:12px;background-color:#262c2e;color:#f5f5f5;border:1px solid #f5f5f5;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}::placeholder{color:#f5f5f5}.overlay{margin-top:65px;margin-left:8px;left:0;top:0;width:98.8%;height:400px;position:absolute;background:#000}.overlay__inner{left:0;top:0;width:100%;height:400px;position:absolute}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}.export-loading-text{left:38%;top:25%;color:#fff;position:absolute}@keyframes spin{100%{transform:rotate(360deg)}}@media only screen and (min-width: 320px)and (max-width: 479px){.agGrid-footer{height:50px}.agGrid-footer .ag-grid-footer-cell{width:50%}.agGrid-footer .agGrid-Paginition{text-align:right}.agGrid-footer .go-to-page-section{margin:0px 25%;text-align:center}.agGrid-footer .go-to-page-section .pagination-input{float:none}.overlay .export-loading-text{left:14%}.overlay .loader{width:50px;height:50px;left:38%}}',"",{version:3,sources:["webpack://./src/reactjs/components/AuditLog/AuditLog.scss"],names:[],mappings:"AA2BA,eACE,kBAjBgB,CAkBhB,WAhBO,CAiBP,oCACE,SATc,CAUd,oBAAA,CAIJ,QACE,oBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,QAAA,CACA,OAAA,CACA,sCAAA,CACA,iBAAA,CACA,qBAAA,CACA,sCAAA,CACA,8CAAA,CAGF,gBACE,GACE,gCAAA,CAAA,CAGJ,wBACE,GACE,gCAAA,CAAA,CAIJ,YACE,eAAA,CAGF,cACE,iBAAA,CAGF,aACE,gBAAA,CAGF,eACE,kBAAA,CACA,aAlEW,CAmEX,kBAjEgB,CAkEhB,kBAAA,CACA,cAtEM,CAuEN,eArEW,CAsEX,uHA1EO,CA2EP,yBAAA,CACA,cAAA,CAGF,uBACE,aAAA,CACA,gBAAA,CACA,eAAA,CACA,cAAA,CAGF,mBACE,oBAAA,CAGF,0BACE,mBAAA,CACA,aAzFW,CA0FX,kBAxFgB,CAyFhB,kBAAA,CACA,cA7FM,CA8FN,UAxFO,CAyFP,eA7FW,CA8FX,cAAA,CACA,uHAnGO,CAoGP,mCACE,aA3FK,CA4FL,mBAAA,CAIJ,wBACE,mBAAA,CACA,aAzGW,CA0GX,kBAxGgB,CAyGhB,kBAAA,CACA,cA7GM,CA8GN,UAxGO,CAyGP,eA7GW,CA8GX,uHAlHO,CAqHT,YACE,eA1GW,CA2GX,iBAtGa,CAuGb,mBAAA,CACA,aAtHW,CAuHX,kBArHgB,CAsHhB,sBAAA,CACA,cA1HM,CA2HN,eAzHW,CA0HX,cAAA,CACA,uHA/HO,CAgIP,YAAA,CACA,yBAAA,CAGF,kBACE,WAAA,CACA,UAzHM,CA0HN,cA9HU,CA+HV,cAtIM,CAuIN,wBAnIiB,CAoIjB,aAvIW,CAwIX,wBAAA,CACA,uHA5IO,CA8IT,cACE,aA5IW,CA+Ib,SACE,eAAA,CACA,eAAA,CACA,MAAA,CACA,KAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CACA,eAAA,CAGF,gBACE,MAAA,CACA,KAAA,CACA,UAAA,CACA,YAAA,CACA,iBAAA,CAGF,QACE,oBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,QAAA,CACA,OAAA,CACA,sCAAA,CACA,iBAAA,CACA,qBAAA,CACA,sCAAA,CACA,8CAAA,CAGF,qBACE,QAAA,CACA,OAAA,CACA,UAAA,CACA,iBAAA,CAGF,gBACE,KACE,wBAAA,CAAA,CAKJ,gEACE,eACE,WAhLW,CAiLX,oCACE,SAnLgB,CAqLlB,kCACE,gBAAA,CAEF,mCACE,cAAA,CACA,iBAAA,CACA,qDACE,UAAA,CAKJ,8BACE,QAAA,CAEF,iBACE,UAAA,CACA,WAAA,CACA,QAAA,CAAA",sourcesContent:['/*********************************************************************\r\n* Copyright (c) Intel Corporation 2019\r\n* SPDX-License-Identifier: Apache-2.0\r\n**********************************************************************/\r\n\r\n// Magic numbers\r\n$family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue",\r\n  sans-serif;\r\n$fsize: 12px;\r\n$whitecolor: #f5f5f5;\r\n$fontweight: 400;\r\n$backgroundcolor: #2d3436;\r\n$backgroundcolor2: #262c2e;\r\n$height: 26px;\r\n$margin: 2px;\r\n$topmargin: 2px;\r\n$color2: #8c8c8c;\r\n$leftmarginpercent: 40%;\r\n$toppadding: 2px;\r\n$width: 75px;\r\n$border: 1px;\r\n$leftmargin2: 360px;\r\n$footerCellWidth: 33%;\r\n$paddingRight: 4px;\r\n$mobileViewCellWidth: 50%;\r\n$footerHeight: 50px;\r\n\r\n.agGrid-footer {\r\n  background: $backgroundcolor;\r\n  height: $height;\r\n  .ag-grid-footer-cell {\r\n    width: $footerCellWidth;\r\n    display: inline-block;\r\n  }\r\n}\r\n\r\n.loader {\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 75px;\r\n  height: 75px;\r\n  left: 45%;\r\n  top: 35%;\r\n  border: 10px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 50%;\r\n  border-top-color: #fff;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    -webkit-transform: rotate(360deg);\r\n  }\r\n}\r\n@-webkit-keyframes spin {\r\n  to {\r\n    -webkit-transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.align-left {\r\n  text-align: left;\r\n}\r\n\r\n.align-center {\r\n  text-align: center;\r\n}\r\n\r\n.align-right {\r\n  text-align: right;\r\n}\r\n\r\n.export-to-csv {\r\n  align-content: left;\r\n  color: $whitecolor;\r\n  background: $backgroundcolor;\r\n  border: transparent;\r\n  font-size: $fsize;\r\n  font-weight: $fontweight;\r\n  font-family: $family;\r\n  text-decoration: underline;\r\n  cursor: pointer;\r\n}\r\n\r\n.data-export-info-icon {\r\n  color: #d0d0d0;\r\n  padding-left: 5px;\r\n  padding-top: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.agGrid-Paginition {\r\n  display: inline-block;\r\n}\r\n\r\n.agGrid-Paginition button {\r\n  align-content: right;\r\n  color: $whitecolor;\r\n  background: $backgroundcolor;\r\n  border: transparent;\r\n  font-size: $fsize;\r\n  margin: $margin;\r\n  font-weight: $fontweight;\r\n  cursor: pointer;\r\n  font-family: $family;\r\n  &:disabled {\r\n    color: $color2;\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n.agGrid-Paginition span {\r\n  align-content: right;\r\n  color: $whitecolor;\r\n  background: $backgroundcolor;\r\n  border: transparent;\r\n  font-size: $fsize;\r\n  margin: $margin;\r\n  font-weight: $fontweight;\r\n  font-family: $family;\r\n}\r\n\r\n.go-to-page {\r\n  padding-top: $toppadding;\r\n  padding-right: $paddingRight;\r\n  align-content: right;\r\n  color: $whitecolor;\r\n  background: $backgroundcolor;\r\n  border: none !important;\r\n  font-size: $fsize;\r\n  font-weight: $fontweight;\r\n  cursor: pointer;\r\n  font-family: $family;\r\n  outline: none;\r\n  text-decoration: underline;\r\n}\r\n\r\n.pagination-input {\r\n  float: right;\r\n  width: $width;\r\n  margin-top: $topmargin;\r\n  font-size: $fsize;\r\n  background-color: $backgroundcolor2;\r\n  color: $whitecolor;\r\n  border: $border solid $whitecolor;\r\n  font-family: $family;\r\n}\r\n::placeholder {\r\n  color: $whitecolor;\r\n}\r\n\r\n.overlay {\r\n  margin-top: 65px;\r\n  margin-left: 8px;\r\n  left: 0;\r\n  top: 0;\r\n  width: 98.8%;\r\n  height: 400px;\r\n  position: absolute;\r\n  background: black;\r\n}\r\n\r\n.overlay__inner {\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 400px;\r\n  position: absolute;\r\n}\r\n\r\n.loader {\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 75px;\r\n  height: 75px;\r\n  left: 45%;\r\n  top: 35%;\r\n  border: 10px solid rgba(255, 255, 255, 0.3);\r\n  border-radius: 50%;\r\n  border-top-color: #fff;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n}\r\n\r\n.export-loading-text {\r\n  left: 38%;\r\n  top: 25%;\r\n  color: #fff;\r\n  position: absolute;\r\n}\r\n\r\n@keyframes spin {\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n//mobile view\r\n@media only screen and (min-width: 320px) and (max-width: 479px) {\r\n  .agGrid-footer {\r\n    height: $footerHeight;\r\n    .ag-grid-footer-cell {\r\n      width: $mobileViewCellWidth;\r\n    }\r\n    .agGrid-Paginition {\r\n      text-align: right;\r\n    }\r\n    .go-to-page-section {\r\n      margin: 0px 25%;\r\n      text-align: center;\r\n      .pagination-input {\r\n        float: none;\r\n      }\r\n    }\r\n  }\r\n  .overlay {\r\n    .export-loading-text {\r\n      left: 14%;\r\n    }\r\n    .loader {\r\n      width: 50px;\r\n      height: 50px;\r\n      left: 38%;\r\n    }\r\n  }\r\n}\r\n'],sourceRoot:""}]),e.a=a},,,,,,,,,,,,,function(t,e){t.exports=require("moment")},function(t,e){t.exports=require("export-to-csv")},,,function(t,e,n){"use strict";n.r(e),n.d(e,"AuditLog",(function(){return N}));var i=n(0),r=n(23),o=n(76),a=n.n(o),s=n(1);const l={checkForEmpty:(t,e="---")=>t||e},{checkForEmpty:c}=l,d={auditappid:{headerName:"auditLog.grid.column.auditappid",field:"auditAppId",headerComponentParams:{description:"auditLog.grid.column.auditappiddescription"}},eventid:{headerName:"auditLog.grid.column.eventId",field:"eventId",headerComponentParams:{description:"auditLog.grid.column.eventIddescription"}},initiatortype:{headerName:"auditLog.grid.column.initiatortype",field:"initiatorType"},auditapp:{headerName:"auditLog.grid.column.auditapp",field:"auditApp",headerComponentParams:{description:"auditLog.grid.column.auditappdescription",enableSorting:!0},tooltipField:"auditApp",minWidth:150},event:{headerName:"auditLog.grid.column.event",field:"event",headerComponentParams:{description:"auditLog.grid.column.eventdescription"},tooltipField:"event",minWidth:150},initiator:{headerName:"auditLog.grid.column.initiator",field:"initiator",headerComponentParams:{description:"auditLog.grid.column.initiatordescription"},minWidth:150},time:{headerName:"auditLog.grid.column.time",field:"time",cellRendererFramework:({value:t})=>(t=>{if(Object(s.e)(t)){const e=a.a.utc(t).local();return c(e.unix()>0?e.format("YYYY-MM-DD HH:mm"):"")}return t})(t)||"",headerComponentParams:{description:"auditLog.grid.column.timedescription"},minWidth:150},mclocationtype:{headerName:"auditLog.grid.column.mclocationtype",field:"mCLocationType",headerComponentParams:{description:"auditLog.grid.column.mclocationtypedescription"}},netaddress:{headerName:"auditLog.grid.column.netaddress",field:"netAddress",headerComponentParams:{description:"auditLog.grid.column.netaddressdescription"},minWidth:150},exstr:{headerName:"auditLog.grid.column.exstr",field:"exStr",headerComponentParams:{description:"auditLog.grid.column.exstrdescription"},minWidth:150}},A={auditAppId:"auditAppId",eventId:"eventId",initiator:"initiator",time:"time",auditApp:"auditApp",event:"event",netAddress:"netAddress",exStr:"exStr"};var p=n(9),u=n(5),g=n.n(u),h=n(61),f={insert:"head",singleton:!1};g()(h.a,f),h.a.locals;const m=t=>i.createElement("div",{className:"tooltip"},i.createElement("span",{style:t.styles,id:"tooltip-content",className:"tooltip__text"},t.message));var C=n(8);class b extends i.Component{constructor(t){super(t),this.tooltipStyles={},this.adjustTooltipStyle=()=>{this.tooltipStyles.left=0,this.tooltipStyles.marginLeft=0,this.tooltipStyles.width="130px",this.props.description.length<34?this.tooltipStyles.top="-48px":this.props.description.length<68?this.tooltipStyles.top="-64px":this.tooltipStyles.top="-68px"},this.prepareTooltipStyle=t=>{const e=document.getElementById("grid-wrapper").getBoundingClientRect().left,n=t.target.getBoundingClientRect();this.tooltipStyles={},this.tooltipStyles.position="fixed",this.tooltipStyles.left=n.left-(100+n.width/2)-e,this.props.description.length<34?this.tooltipStyles.top="-30px":this.props.description.length<68?this.tooltipStyles.top="-48px":this.tooltipStyles.top="-60px",this.tooltipStyles.left<0&&this.adjustTooltipStyle()},this.handleMouseClick=t=>{this.prepareTooltipStyle(t),this.setState((t,e)=>({isMouseOver:!0,message:e.description}))},this.handleMouseLeave=()=>{this.setState((t,e)=>({isMouseOver:!1,message:""}))},this.state={isMouseOver:!1,message:""}}render(){const t=i.createElement("div",{className:"customHeaderMenuButton "+this.props.displayName,onClick:this.handleMouseClick,onMouseLeave:this.handleMouseLeave},i.createElement(C.FontAwesomeIcon,{className:this.props.displayName,icon:"info-circle"}));return i.createElement(i.Fragment,null,this.state.isMouseOver&&i.createElement(m,{message:this.state.message,styles:this.tooltipStyles}),i.createElement("div",{style:{display:"flex"}},this.props.displayName,"   ",t))}}var x=n(62),v={insert:"head",singleton:!1};g()(x.a,v),x.a.locals;class y extends i.Component{getReactContainerClasses(){return["custom-tooltip"]}render(){const{api:t,rowIndex:e,column:n}=this.props,r=Object(s.e)(t.getDisplayedRowAtIndex(e))?t.getDisplayedRowAtIndex(e).data:"",o="auditApp"===n.colDef.field,a="event"===n.colDef.field;return i.createElement(i.Fragment,null,o&&Object(s.e)(r)?i.createElement("div",{className:"custom-tooltip"},i.createElement("p",null,i.createElement("span",null,"Role Name:",r.auditApp)),i.createElement("p",null,i.createElement("span",null,"Role ID: ",r.auditAppId))):null,a&&Object(s.e)(r)?i.createElement("div",{className:"custom-tooltip"},i.createElement("p",null,i.createElement("span",null,"Event: ",r.event)),i.createElement("p",null,i.createElement("span",null,"Event ID: ",r.eventId))):null)}}var w=n(77),E=n(10),B=n(21),k=n(17),S=(n(32),n(87),n(63)),P={insert:"head",singleton:!1},O=(g()(S.a,P),S.a.locals,n(2)),G=n(11),I=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{l(i.next(t))}catch(t){o(t)}}function s(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((i=i.apply(t,e||[])).next())}))};const j=new w.ExportToCsv({filename:"AuditLog"}),$=Object.keys(k).filter(t=>"fas"!==t&&"prefix"!==t).map(t=>k[t]);B.library.add(...$);class N extends i.Component{constructor(t){super(t),this.disableNext=!1,this.disablePrev=!0,this.disableGoToPage=!1,this.adjustRowIndex=(t,e)=>e>t?1:Math.abs(t-(e-1)),this.transformResponse=t=>(t.forEach(t=>{t.netAddress=t.netAddress.replace(/[^\d.-]/g,""),t.time=t.time.substring(0,t.time.length-5)}),t),this.fetchAuditLog=t=>I(this,void 0,void 0,(function*(){try{const{mpsKey:e}=this.context.data,n=JSON.stringify({apikey:"xxxxx",method:"AuditLog",payload:{guid:this.props.deviceId,startIndex:t}}),i=null!=this.props.mpsServer?this.props.mpsServer:"";return yield p.a.post(`https://${i}/amt`,n,e,!0)}catch(t){console.log("An error occured")}})),this.onGridReady=t=>{let e=0,n=0;const i="Sorry! Something went wrong. try again later";this.gridApi=t.api,this.gridColumnApi=t.columnApi,this.gridApi.sizeColumnsToFit();const r={rowCount:null,getRows:t=>{this.gridApi.showLoadingOverlay(),0===n?this.fetchAuditLog(t.startRow).then(i=>{void 0!==i.records?(i.records=this.transformResponse(i.records.map(t=>Object(s.a)(t,A))),this.gridApi.hideOverlay(),t.successCallback(i.records.reverse(),i.totalCnt),e=i.totalCnt,n=e-20):(this.setState({errorMsg:i.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay())}).catch(()=>{this.setState({errorMsg:i}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}):(n=this.adjustRowIndex(e,t.endRow),this.fetchAuditLog(n).then(n=>{if(void 0!==n.records){if(n.records=this.transformResponse(n.records.map(t=>Object(s.a)(t,A))),this.gridApi.hideOverlay(),this.gridApi.paginationGetTotalPages()===parseInt(this.gridApi.paginationGetCurrentPage())+1){const t=e%10;e%10>0&&(n.records=n.records.slice(0,t))}t.successCallback(n.records.reverse(),n.totalCnt),e=n.totalCnt}else this.setState({errorMsg:n.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}).catch(()=>{this.setState({errorMsg:i}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}))}};t.api.setDatasource(r)},this.fetchCompleteAuditLog=()=>I(this,void 0,void 0,(function*(){const t=this.gridApi.paginationGetRowCount();let e=[{auditAppId:"Role ID",eventId:"Event ID",initiator:"Initiator",auditApp:"Role Name",event:"Event",netAddress:"Network Address",time:"Device Time(UTC)",exStr:"Event Details"}];for(let n=0;n<this.gridApi.paginationGetTotalPages();n++){const i=(n+1)*this.gridApi.paginationGetPageSize()-1,r=0===n?0:n+1!==this.gridApi.paginationGetTotalPages()?t-i:1;let o=yield this.fetchAuditLog(r);if(void 0===o.records||Object(s.e)(o.error)){this.setState({hasExportFailed:!0,isExporting:!1,snackBarMessage:"Something went wrong! Please try again later."}),setTimeout(()=>{this.setState({hasExportFailed:!1})},4e3);break}if(1===r){const e=t%10;o.records=o.records.slice(0,e)}o=o.records.map(t=>Object(s.a)(t,A)),e=e.concat(this.transformResponse(o).reverse())}this.setState({isExporting:!1,completeAuditLog:e,downloadCSV:!0}),j.generateCsv(this.state.completeAuditLog)})),this.onGridSizeChanged=t=>{var e;const n=null===(e=document.getElementById("grid-wrapper"))||void 0===e?void 0:e.offsetWidth,i=[],r=[];let o=0;const a=t.columnApi.getAllColumns();for(let t=0;t<a.length;t++){const e=a[t];o+=parseInt(e.getMinWidth()),o>n?r.push(e.colId):i.push(e.colId)}t.columnApi.setColumnsVisible(i,!0),t.columnApi.setColumnsVisible(r,!1),t.api.sizeColumnsToFit()},this.togglePaginationButtons=t=>{switch(t){case"first":this.disablePrev=!0,this.disableNext=!1;break;case"next":this.disablePrev=!1,this.gridApi.paginationGetTotalPages()===parseInt(this.gridApi.paginationGetCurrentPage())+1&&(this.disableNext=!0);break;case"prev":this.disableNext=!1,0===this.gridApi.paginationGetCurrentPage()&&(this.disablePrev=!0);break;case"last":this.disableNext=!0,this.disablePrev=!1;break;case"fromgoto":this.disableNext=!1,this.disablePrev=!1}},this.onPaginationChanged=()=>{Object(s.e)(this.gridApi)&&this.setState({currentPage:parseInt(this.gridApi.paginationGetCurrentPage())+1,totalPages:this.gridApi.paginationGetTotalPages()})},this.goToPage=()=>{this.gridApi.paginationGoToPage(this.state.value-1);const t=parseInt(this.state.value);switch(!0){case t<=1:this.togglePaginationButtons("first");break;case t>1&&t<this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("fromgoto");break;case t>=this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("last")}},this.onBtFirst=()=>{this.gridApi.paginationGoToFirstPage(),this.togglePaginationButtons("first")},this.onBtLast=()=>{this.gridApi.paginationGoToLastPage(),this.togglePaginationButtons("last")},this.onBtNext=()=>{this.gridApi.paginationGoToNextPage(),this.togglePaginationButtons("next")},this.onBtPrevious=()=>{this.gridApi.paginationGoToPreviousPage(),this.togglePaginationButtons("prev")},this.onBtExport=()=>{this.setState((t,e)=>({isExporting:!0})),this.fetchCompleteAuditLog().catch(()=>console.info("error occured"))},this.handleChange=t=>{this.setState({value:t.target.value.replace(/[^\d-]/g,"")})},this.columnDefs=[d.initiator,d.auditapp,d.event,d.netaddress,d.time,d.exstr],this.state={rowData:[],errorMsg:"",value:"",currentPage:0,totalPages:0,showTooltip:!1,isExporting:!1,hasExportFailed:!1,snackBarMessage:"",completeAuditLog:[],downloadCSV:!1}}render(){const t=`<div style={{width: "100%", fontSize: "25px", backgroundColor: "#ed645a"}}><span style="padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow; color: red;">${this.state.errorMsg}</span></div>`,e={agColumnHeader:b,customTooltip:y};return i.createElement(i.Fragment,null,this.state.isExporting?i.createElement("div",{className:"overlay"},i.createElement("div",{className:"overlay__inner"},i.createElement("span",{className:"export-loading-text"},"Please wait while we process the request"),i.createElement("span",{className:"loader"}))):i.createElement("div",null,i.createElement("div",{id:"grid-wrapper",style:{width:"100%",height:"375px"}},i.createElement("div",{className:"ag-theme-balham-dark",style:{height:"100%",width:"100%"}},i.createElement(r.AgGridReact,{columnDefs:Object(O.a)(this.columnDefs),defaultColDef:{tooltipComponent:"customTooltip"},pagination:!0,paginationPageSize:10,cacheBlockSize:10,rowModelType:"infinite",infiniteInitialRowCount:1,onGridReady:this.onGridReady,rowData:this.state.rowData,overlayNoRowsTemplate:t,onPaginationChanged:this.onPaginationChanged,suppressPaginationPanel:!0,suppressScrollOnNewData:!0,onGridSizeChanged:this.onGridSizeChanged,frameworkComponents:e}))),i.createElement("div",{className:"agGrid-footer"},i.createElement("div",{className:"ag-grid-footer-cell align-left"},this.state.showTooltip&&i.createElement(m,{message:"Exports only cached entries",styles:{position:"absolute",bottom:"100%",left:"24px",width:"100px",margin:"0px"}}),i.createElement("button",{className:"export-to-csv",onClick:this.onBtExport},i.createElement(C.FontAwesomeIcon,{icon:"file-export"}),Object(O.c)("auditLog.grid.footer.exporttocsv.title"))),i.createElement("div",{className:"ag-grid-footer-cell agGrid-Paginition align-center"},i.createElement("button",{type:"button",onClick:this.onBtFirst,disabled:this.disablePrev},i.createElement(C.FontAwesomeIcon,{icon:"angle-double-left"})),i.createElement("button",{type:"button",onClick:this.onBtPrevious,disabled:this.disablePrev},i.createElement(C.FontAwesomeIcon,{icon:"angle-left"})),i.createElement("span",null,Object(O.c)("auditLog.grid.footer.pagination.text1")," ",this.state.currentPage," ",Object(O.c)("auditLog.grid.footer.pagination.text2")," ",this.state.totalPages),i.createElement("button",{type:"button",onClick:this.onBtNext,disabled:this.disableNext},i.createElement(C.FontAwesomeIcon,{icon:"angle-right"})),i.createElement("button",{type:"button",onClick:this.onBtLast,disabled:this.disableNext},i.createElement(C.FontAwesomeIcon,{icon:"angle-double-right"}))),i.createElement("div",{className:"ag-grid-footer-cell align-right go-to-page-section"},i.createElement("button",{onClick:this.goToPage,className:"go-to-page"},Object(O.c)("auditLog.grid.footer.gotopage.title")),i.createElement("input",{id:"pagination-page",className:"pagination-input",placeholder:"page #",value:this.state.value,onChange:this.handleChange,type:"text",name:"page__num",disabled:this.disableGoToPage})))),this.state.hasExportFailed&&i.createElement(E.a,{message:this.state.snackBarMessage,type:""}))}}N.contextType=G.b},,,,,,,function(t,e){t.exports=require("ag-grid-community/dist/styles/ag-theme-balham-dark.css")}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,