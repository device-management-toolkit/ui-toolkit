/*! For license information please see kvm.bundle.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports["ui-toolkit"]=e(require("react")):t["ui-toolkit"]=e(t.react)}(self,(function(__WEBPACK_EXTERNAL_MODULE__9297__){return(()=>{var __webpack_modules__={487:t=>{var e={utf8:{stringToBytes:function(t){return e.bin.stringToBytes(unescape(encodeURIComponent(t)))},bytesToString:function(t){return decodeURIComponent(escape(e.bin.bytesToString(t)))}},bin:{stringToBytes:function(t){for(var e=[],s=0;s<t.length;s++)e.push(255&t.charCodeAt(s));return e},bytesToString:function(t){for(var e=[],s=0;s<t.length;s++)e.push(String.fromCharCode(t[s]));return e.join("")}}};t.exports=e},1012:t=>{var e,s;e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s={rotl:function(t,e){return t<<e|t>>>32-e},rotr:function(t,e){return t<<32-e|t>>>e},endian:function(t){if(t.constructor==Number)return 16711935&s.rotl(t,8)|4278255360&s.rotl(t,24);for(var e=0;e<t.length;e++)t[e]=s.endian(t[e]);return t},randomBytes:function(t){for(var e=[];t>0;t--)e.push(Math.floor(256*Math.random()));return e},bytesToWords:function(t){for(var e=[],s=0,a=0;s<t.length;s++,a+=8)e[a>>>5]|=t[s]<<24-a%32;return e},wordsToBytes:function(t){for(var e=[],s=0;s<32*t.length;s+=8)e.push(t[s>>>5]>>>24-s%32&255);return e},bytesToHex:function(t){for(var e=[],s=0;s<t.length;s++)e.push((t[s]>>>4).toString(16)),e.push((15&t[s]).toString(16));return e.join("")},hexToBytes:function(t){for(var e=[],s=0;s<t.length;s+=2)e.push(parseInt(t.substr(s,2),16));return e},bytesToBase64:function(t){for(var s=[],a=0;a<t.length;a+=3)for(var o=t[a]<<16|t[a+1]<<8|t[a+2],i=0;i<4;i++)8*a+6*i<=8*t.length?s.push(e.charAt(o>>>6*(3-i)&63)):s.push("=");return s.join("")},base64ToBytes:function(t){t=t.replace(/[^A-Z0-9+\/]/gi,"");for(var s=[],a=0,o=0;a<t.length;o=++a%4)0!=o&&s.push((e.indexOf(t.charAt(a-1))&Math.pow(2,-2*o+8)-1)<<2*o|e.indexOf(t.charAt(a))>>>6-2*o);return s}},t.exports=s},8717:(t,e,s)=>{"use strict";s.d(e,{Z:()=>n});var a=s(4015),o=s.n(a),i=s(3645),r=s.n(i)()(o());r.push([t.id,".button{margin-right:3px;padding:2px;min-width:90px}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/ConnectButton.scss"],names:[],mappings:"AAKA,QACI,gBAAA,CACA,WAAA,CACA,cAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n\r\n.button{\r\n    margin-right: 3px;\r\n    padding: 2px;\r\n    min-width: 90px\r\n}"],sourceRoot:""}]);const n=r},6391:(t,e,s)=>{"use strict";s.d(e,{Z:()=>n});var a=s(4015),o=s.n(a),i=s(3645),r=s.n(i)()(o());r.push([t.id,".encoding{margin-left:10px}.encoding label{padding:2px;font-size:15px}.encoding select{padding:2px 0}.reldisabled{opacity:.5}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/EncodingOptions.scss"],names:[],mappings:"AAKA,UACI,gBAAA,CAEF,gBACE,WAAA,CACA,cAAA,CAEF,iBACE,aAAA,CAGF,aACE,UAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n.encoding {\r\n    margin-left: 10px;\r\n  }\r\n  .encoding label {      \r\n    padding: 2px;\r\n    font-size: 15px;\r\n  }\r\n  .encoding select {\r\n    padding: 2px 0;\r\n  }\r\n  \r\n  .reldisabled{\r\n    opacity: 0.5;\r\n  }"],sourceRoot:""}]);const n=r},4333:(t,e,s)=>{"use strict";s.d(e,{Z:()=>n});var a=s(4015),o=s.n(a),i=s(3645),r=s.n(i)()(o());r.push([t.id,".header{background-color:#a9a9a9;padding:5px;font-size:13px}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/Header.scss"],names:[],mappings:"AAKA,QACE,wBAAA,CACA,WAAA,CACA,cAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n.header {\r\n  background-color: darkgray;\r\n  padding: 5px;\r\n  font-size: 13px;\r\n}\r\n"],sourceRoot:""}]);const n=r},6539:(t,e,s)=>{"use strict";s.d(e,{Z:()=>n});var a=s(4015),o=s.n(a),i=s(3645),r=s.n(i)()(o());r.push([t.id,".canvas{max-height:90%;max-width:100%}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/PureCanvas.scss"],names:[],mappings:"AAKA,QACI,cAAA,CACA,cAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n.canvas{\r\n    max-height: 90%;\r\n    max-width: 100%;\r\n}\r\n"],sourceRoot:""}]);const n=r},5319:(t,e,s)=>{"use strict";s.d(e,{Z:()=>n});var a=s(4015),o=s.n(a),i=s(3645),r=s.n(i)()(o());r.push([t.id,"*{margin:0;padding:0;box-sizing:border-box}.canvas-container{height:100vh;text-align:center;background-color:#fff}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/UI.scss"],names:[],mappings:"AAKA,EACI,QAAA,CACA,SAAA,CACA,qBAAA,CAGJ,kBACG,YAAA,CACA,iBAAA,CACA,qBAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n*{ // * refers every element and removes default margin  padding that comes with html elements body, h1 etc\r\n    margin:0;\r\n    padding:0;\r\n    box-sizing: border-box; //element padding and border are included in the width and height\r\n}\r\n\r\n.canvas-container{\r\n   height: 100vh; \r\n   text-align: center;\r\n   background-color: #ffffff;\r\n}\r\n"],sourceRoot:""}]);const n=r},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var s=t(e);return e[2]?"@media ".concat(e[2]," {").concat(s,"}"):s})).join("")},e.i=function(t,s,a){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(a)for(var i=0;i<this.length;i++){var r=this[i][0];null!=r&&(o[r]=!0)}for(var n=0;n<t.length;n++){var l=[].concat(t[n]);a&&o[l[0]]||(s&&(l[2]?l[2]="".concat(s," and ").concat(l[2]):l[2]=s),e.push(l))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var s=0,a=new Array(e);s<e;s++)a[s]=t[s];return a}t.exports=function(t){var s,a,o=(a=4,function(t){if(Array.isArray(t))return t}(s=t)||function(t,e){var s=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=s){var a,o,i=[],r=!0,n=!1;try{for(s=s.call(t);!(r=(a=s.next()).done)&&(i.push(a.value),!e||i.length!==e);r=!0);}catch(t){n=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(n)throw o}}return i}}(s,a)||function(t,s){if(t){if("string"==typeof t)return e(t,s);var a=Object.prototype.toString.call(t).slice(8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?Array.from(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?e(t,s):void 0}}(s,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],r=o[3];if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),h="/*# ".concat(l," */"),c=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[i].concat(c).concat([h]).join("\n")}return[i].join("\n")}},8738:t=>{function e(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}t.exports=function(t){return null!=t&&(e(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&e(t.slice(0,0))}(t)||!!t._isBuffer)}},2568:(t,e,s)=>{var a,o,i,r,n;a=s(1012),o=s(487).utf8,i=s(8738),r=s(487).bin,(n=function(t,e){t.constructor==String?t=e&&"binary"===e.encoding?r.stringToBytes(t):o.stringToBytes(t):i(t)?t=Array.prototype.slice.call(t,0):Array.isArray(t)||t.constructor===Uint8Array||(t=t.toString());for(var s=a.bytesToWords(t),l=8*t.length,h=1732584193,c=-271733879,p=-1732584194,d=271733878,v=0;v<s.length;v++)s[v]=16711935&(s[v]<<8|s[v]>>>24)|4278255360&(s[v]<<24|s[v]>>>8);s[l>>>5]|=128<<l%32,s[14+(l+64>>>9<<4)]=l;var u=n._ff,b=n._gg,f=n._hh,g=n._ii;for(v=0;v<s.length;v+=16){var m=h,S=c,C=p,A=d;h=u(h,c,p,d,s[v+0],7,-680876936),d=u(d,h,c,p,s[v+1],12,-389564586),p=u(p,d,h,c,s[v+2],17,606105819),c=u(c,p,d,h,s[v+3],22,-1044525330),h=u(h,c,p,d,s[v+4],7,-176418897),d=u(d,h,c,p,s[v+5],12,1200080426),p=u(p,d,h,c,s[v+6],17,-1473231341),c=u(c,p,d,h,s[v+7],22,-45705983),h=u(h,c,p,d,s[v+8],7,1770035416),d=u(d,h,c,p,s[v+9],12,-1958414417),p=u(p,d,h,c,s[v+10],17,-42063),c=u(c,p,d,h,s[v+11],22,-1990404162),h=u(h,c,p,d,s[v+12],7,1804603682),d=u(d,h,c,p,s[v+13],12,-40341101),p=u(p,d,h,c,s[v+14],17,-1502002290),h=b(h,c=u(c,p,d,h,s[v+15],22,1236535329),p,d,s[v+1],5,-165796510),d=b(d,h,c,p,s[v+6],9,-1069501632),p=b(p,d,h,c,s[v+11],14,643717713),c=b(c,p,d,h,s[v+0],20,-373897302),h=b(h,c,p,d,s[v+5],5,-701558691),d=b(d,h,c,p,s[v+10],9,38016083),p=b(p,d,h,c,s[v+15],14,-660478335),c=b(c,p,d,h,s[v+4],20,-405537848),h=b(h,c,p,d,s[v+9],5,568446438),d=b(d,h,c,p,s[v+14],9,-1019803690),p=b(p,d,h,c,s[v+3],14,-187363961),c=b(c,p,d,h,s[v+8],20,1163531501),h=b(h,c,p,d,s[v+13],5,-1444681467),d=b(d,h,c,p,s[v+2],9,-51403784),p=b(p,d,h,c,s[v+7],14,1735328473),h=f(h,c=b(c,p,d,h,s[v+12],20,-1926607734),p,d,s[v+5],4,-378558),d=f(d,h,c,p,s[v+8],11,-2022574463),p=f(p,d,h,c,s[v+11],16,1839030562),c=f(c,p,d,h,s[v+14],23,-35309556),h=f(h,c,p,d,s[v+1],4,-1530992060),d=f(d,h,c,p,s[v+4],11,1272893353),p=f(p,d,h,c,s[v+7],16,-155497632),c=f(c,p,d,h,s[v+10],23,-1094730640),h=f(h,c,p,d,s[v+13],4,681279174),d=f(d,h,c,p,s[v+0],11,-358537222),p=f(p,d,h,c,s[v+3],16,-722521979),c=f(c,p,d,h,s[v+6],23,76029189),h=f(h,c,p,d,s[v+9],4,-640364487),d=f(d,h,c,p,s[v+12],11,-421815835),p=f(p,d,h,c,s[v+15],16,530742520),h=g(h,c=f(c,p,d,h,s[v+2],23,-995338651),p,d,s[v+0],6,-198630844),d=g(d,h,c,p,s[v+7],10,1126891415),p=g(p,d,h,c,s[v+14],15,-1416354905),c=g(c,p,d,h,s[v+5],21,-57434055),h=g(h,c,p,d,s[v+12],6,1700485571),d=g(d,h,c,p,s[v+3],10,-1894986606),p=g(p,d,h,c,s[v+10],15,-1051523),c=g(c,p,d,h,s[v+1],21,-2054922799),h=g(h,c,p,d,s[v+8],6,1873313359),d=g(d,h,c,p,s[v+15],10,-30611744),p=g(p,d,h,c,s[v+6],15,-1560198380),c=g(c,p,d,h,s[v+13],21,1309151649),h=g(h,c,p,d,s[v+4],6,-145523070),d=g(d,h,c,p,s[v+11],10,-1120210379),p=g(p,d,h,c,s[v+2],15,718787259),c=g(c,p,d,h,s[v+9],21,-343485551),h=h+m>>>0,c=c+S>>>0,p=p+C>>>0,d=d+A>>>0}return a.endian([h,c,p,d])})._ff=function(t,e,s,a,o,i,r){var n=t+(e&s|~e&a)+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._gg=function(t,e,s,a,o,i,r){var n=t+(e&a|s&~a)+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._hh=function(t,e,s,a,o,i,r){var n=t+(e^s^a)+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._ii=function(t,e,s,a,o,i,r){var n=t+(s^(e|~a))+(o>>>0)+r;return(n<<i|n>>>32-i)+e},n._blocksize=16,n._digestsize=16,t.exports=function(t,e){if(null==t)throw new Error("Illegal argument "+t);var s=a.wordsToBytes(n(t,e));return e&&e.asBytes?s:e&&e.asString?r.bytesToString(s):a.bytesToHex(s)}},1430:(t,e,s)=>{"use strict";var a=s(3379),o=s.n(a),i=s(8717);o()(i.Z,{insert:"head",singleton:!1}),i.Z.locals},4869:(t,e,s)=>{"use strict";var a=s(3379),o=s.n(a),i=s(6391);o()(i.Z,{insert:"head",singleton:!1}),i.Z.locals},7886:(t,e,s)=>{"use strict";var a=s(3379),o=s.n(a),i=s(4333);o()(i.Z,{insert:"head",singleton:!1}),i.Z.locals},1641:(t,e,s)=>{"use strict";var a=s(3379),o=s.n(a),i=s(6539);o()(i.Z,{insert:"head",singleton:!1}),i.Z.locals},2208:(t,e,s)=>{"use strict";var a=s(3379),o=s.n(a),i=s(5319);o()(i.Z,{insert:"head",singleton:!1}),i.Z.locals},3379:(t,e,s)=>{"use strict";var a,o=function(){var t={};return function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}t[e]=s}return t[e]}}(),i=[];function r(t){for(var e=-1,s=0;s<i.length;s++)if(i[s].identifier===t){e=s;break}return e}function n(t,e){for(var s={},a=[],o=0;o<t.length;o++){var n=t[o],l=e.base?n[0]+e.base:n[0],h=s[l]||0,c="".concat(l," ").concat(h);s[l]=h+1;var p=r(c),d={css:n[1],media:n[2],sourceMap:n[3]};-1!==p?(i[p].references++,i[p].updater(d)):i.push({identifier:c,updater:b(d,e),references:1}),a.push(c)}return a}function l(t){var e=document.createElement("style"),a=t.attributes||{};if(void 0===a.nonce){var i=s.nc;i&&(a.nonce=i)}if(Object.keys(a).forEach((function(t){e.setAttribute(t,a[t])})),"function"==typeof t.insert)t.insert(e);else{var r=o(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var h,c=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function p(t,e,s,a){var o=s?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(t.styleSheet)t.styleSheet.cssText=c(e,o);else{var i=document.createTextNode(o),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(i,r[e]):t.appendChild(i)}}function d(t,e,s){var a=s.css,o=s.media,i=s.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=a;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(a))}}var v=null,u=0;function b(t,e){var s,a,o;if(e.singleton){var i=u++;s=v||(v=l(e)),a=p.bind(null,s,i,!1),o=p.bind(null,s,i,!0)}else s=l(e),a=d.bind(null,s,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(s)};return a(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;a(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a));var s=n(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var a=0;a<s.length;a++){var o=r(s[a]);i[o].references--}for(var l=n(t,e),h=0;h<s.length;h++){var c=r(s[h]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}s=l}}}},8633:(t,e,s)=>{"use strict";s.d(e,{r:()=>l});var a=s(252),o=s(2125),i=s(4183),r=s(6305),n=s.n(r);class l extends a.H{constructor(t,e){super(),this.protocol=2,this.inflate=n().inflateInit(15),this.bpp=1,this.state=0,this.focusMode=0,this.useZRLE=!0,this.frameRateDelay=2,this.canvasCtx=e,this.sparecache={},this.buttonmask=0,this.canvasControl=this.canvasCtx.canvas,this.lastMouseMoveTime=(new Date).getTime(),this.logger=t,this.setDeskFocus=(t,e)=>{},this.getDeskFocus=t=>{}}processData(t){this.onProcessData(t)}onStateChange(t){this.logger.verbose(`state change in AMTDesktop: ${t}`),0===t&&(this.canvasCtx.fillStyle="#FFFFFF",this.canvasCtx.fillRect(0,0,this.canvasCtx.canvas.width,this.canvasCtx.canvas.width))}start(){this.logger.verbose("Starting desktop here"),this.state=0,this.inflate.inflateReset(),this.onKvmDataPending=[],this.onKvmDataAck=-1,this.kvmDataSupported=!1;for(const t in this.sparecache)delete this.sparecache[t]}onSendKvmData(t){!0!==this.onKvmDataAck?this.onKvmDataPending.push(t):((0,i.f)(this.urlvars)&&(0,i.f)(this.urlvars.kvmdatatrace)&&console.log(`KVM-Send (${t.length}) data`),t="\0KvmDataChannel\0"+t,this.onSend(String.fromCharCode(6,0,0,0)+o.r.IntToStr(t.length)+t),this.onKvmDataAck=!1)}}},6380:(t,e,s)=>{"use strict";s.d(e,{N:()=>o});var a=s(5615);class o extends a.K{constructor(t,e,s,a,o,i,r,n,l,h,c){super(t,e,s,a,o,i,r,n,l,h,c)}}},5615:(t,e,s)=>{"use strict";s.d(e,{b:()=>a,K:()=>l});var a,o=s(2125),i=s(2568),r=s.n(i),n=s(4183);!function(t){t[t.SOL=1]="SOL",t[t.KVM=2]="KVM",t[t.IDER=3]="IDER"}(a||(a={}));class l{constructor(t,e,s,a,o,i,r,n,l,h,c){this.fileReader=s,this.randomNonceChars="abcdef0123456789",this.host=a,this.port=o,this.user=i,this.pass=r,this.tls=n,this.tlsv1only=l,this.protocol=e,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=c,this.amtAccumulator="",this.authUri="",this.logger=t,this.authToken=h}getWsLocation(){return this.isBrowser()&&!(0,n.f)(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const t="undefined"!=typeof window;return t&&this.logger.debug("!!!!!BROWSER!!!!!"),t}catch(t){return!1}}start(t){this.connectState=0,this.socket=new t(this.getWsLocation(),"authToken"),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);(0,n.f)(this.fileReader)&&(0,n.f)(this.fileReader.readAsBinaryString)?this.fileReader.onload=(t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))}).bind(this):(0,n.f)(this.fileReader)&&(0,n.f)(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=(t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())}).bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){(0,n.f)(this.urlvars)&&(0,n.f)(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info(`Start Redirect Session for protocol. ${this.protocol}`),this.protocol===a.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===a.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===a.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(t){try{if(this.inDataCount++,"object"==typeof t.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(t.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([t.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(t.data);else{let e="";const s=new Uint8Array(t.data),a=s.byteLength;for(let t=0;t<a;t++)e+=String.fromCharCode(s[t]);this.onSocketData(e)}}else this.onSocketData(t.data)}catch(t){this.logger.error(t),this.stop(),this.onError()}}onSocketData(t){if((0,n.f)(t)&&-1!==this.connectState){if("object"==typeof t){let e="";const s=new Uint8Array(t),a=s.byteLength;for(let t=0;t<a;t++)e+=String.fromCharCode(s[t]);t=e}else if("string"!=typeof t)return;if((this.protocol===a.KVM||this.protocol===a.IDER)&&1===this.connectState)return this.onProcessData(t);for(this.amtAccumulator+=t;this.amtAccumulator.length>=1;){let t=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose(`Start Redirection Session reply received for  ${this.protocol}`),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const e=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+e)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),t=13+e;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const e=o.r.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+e)return;const s=this.amtAccumulator.charCodeAt(1),a=this.amtAccumulator.charCodeAt(4),i=[];for(let t=0;t<e;t++)i.push(this.amtAccumulator.charCodeAt(9+t));const r=this.amtAccumulator.substring(9,9+e);if(t=9+e,0===a)(0,n.f)(i.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+o.r.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):(0,n.f)(i.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+o.r.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):(0,n.f)(i.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+o.r.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==a&&4!==a||1!==s)if(0===s){if(1===this.protocol){const t=1e4,e=100,s=0,a=1e4,i=100,r=0;this.socketSend(String.fromCharCode(32,0,0,0)+o.r.IntToStrX(this.amtSequence++)+o.r.ShortToStrX(t)+o.r.ShortToStrX(e)+o.r.ShortToStrX(s)+o.r.ShortToStrX(a)+o.r.ShortToStrX(i)+o.r.ShortToStrX(r)+o.r.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let t=0;const e=r.charCodeAt(t),s=r.substring(t+1,t+1+e);t+=e+1;const i=r.charCodeAt(t),n=r.substring(t+1,t+1+i);t+=i+1;let l=0,h=null;const c=this.generateRandomNonce(32),p="00000002";let d="";4===a&&(l=r.charCodeAt(t),h=r.substring(t+1,t+1+l),t+=l+1,d=`${p}:${c}:${String(h)} :`);const v=this.hex_md5(this.hex_md5(this.user+":"+s+":"+this.pass)+":"+n+":"+d+this.hex_md5("POST:"+this.authUri));let u=this.user.length+s.length+n.length+this.authUri.length+c.length+p.length+v.length+7;4===a&&(u+=parseInt(h.length)+1);let b=String.fromCharCode(19,0,0,0,a)+o.r.IntToStrX(u)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(s.length)+s+String.fromCharCode(n.length)+n+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(c.length)+c+String.fromCharCode(p.length)+p+String.fromCharCode(v.length)+v;4===a&&(b=String(b)+(String.fromCharCode(h.length)+String(h))),this.socketSend(b)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),t=23,this.socketSend(String.fromCharCode(39,0,0,0)+o.r.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),t=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const e=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<e)break;this.onProcessData(this.amtAccumulator.substring(10,e)),t=e;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),t=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),t=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===t)return;this.amtAccumulator=this.amtAccumulator.substring(t)}}}hex_md5(t){return this.logger.verbose("MD5 the string"),r()(t)}socketSend(t){(0,n.f)(this.urlvars)&&(0,n.f)(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${t.length}): ${o.r.rstr2hex(t)}`);try{if(null!=this.socket&&1===this.socket.readyState){const e=new Uint8Array(t.length);this.logger.verbose(`Redir Send( ${t.length}): ${o.r.rstr2hex(t)}`);for(let s=0;s<t.length;++s)e[s]=t.charCodeAt(s);this.socket.send(e.buffer)}}catch(t){this.logger.error(`Socket send error: ${String(t)}`)}}send(t){this.logger.verbose("Send called "+t),null!=this.socket&&1===this.connectState&&(this.protocol===a.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+o.r.IntToStrX(this.amtSequence++)+o.r.ShortToStrX(t.length)+t):this.socketSend(t))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+o.r.IntToStrX(this.amtSequence++))}generateRandomNonce(t){let e="";for(let s=0;s<t;s++)e+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return e}onSocketClosed(t){(0,n.f)(this.urlvars)&&(0,n.f)(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(t){console.info("onstatechange",t),this.state!==t&&(this.state=t,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},1331:(t,e,s)=>{"use strict";s.d(e,{k:()=>o});var a=s(7428);class o{constructor(t){this.minLevel=t}log(t,e){switch(t){case a.i.VERBOSE:this.verbose(e);break;case a.i.INFO:this.info(e);break;case a.i.DEBUG:this.debug(e);break;case a.i.WARNING:this.warn(e);break;case a.i.ERROR:this.error(e)}}debug(t){this.minLevel>=a.i.DEBUG&&console.debug(t)}info(t){this.minLevel>=a.i.INFO&&console.info(t)}error(t){this.minLevel>=a.i.ERROR&&console.error(t)}warn(t){this.minLevel>=a.i.WARNING&&console.warn(t)}verbose(t){this.minLevel>=a.i.VERBOSE&&console.log(t)}}},2125:(t,e,s)=>{"use strict";s.d(e,{r:()=>o});var a=s(4183);const o={ReadShort:(t,e)=>(t.charCodeAt(e)<<8)+t.charCodeAt(e+1),ReadShortX:(t,e)=>(t.charCodeAt(e+1)<<8)+t.charCodeAt(e),ReadInt:(t,e)=>16777216*t.charCodeAt(e)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3),ReadSInt:(t,e)=>(t.charCodeAt(e)<<24)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3),ReadIntX:(t,e)=>16777216*t.charCodeAt(e+3)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+1)<<8)+t.charCodeAt(e),ShortToStr:t=>String.fromCharCode(t>>8&255,255&t),ShortToStrX:t=>String.fromCharCode(255&t,t>>8&255),IntToStr:t=>String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t),IntToStrX:t=>String.fromCharCode(255&t,t>>8&255,t>>16&255,t>>24&255),SplitArray:t=>t.split(","),Clone:t=>JSON.parse(JSON.stringify(t)),EscapeHtml:t=>"string"==typeof t?t.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof t||"number"==typeof t?t:void 0,ArrayElementMove(t,e,s){t.splice(s,0,t.splice(e,1)[0])},ObjectToStringEx(t,e){let s="";if(0!==t&&(!(0,a.f)(t)||null==t))return"(Null)";if(t instanceof Array)for(const a in t)s=s+"<br />"+String(this.gap(e))+"Item #"+String(a)+": "+String(this.ObjectToStringEx(t[a],e+1));else if(t instanceof Object)for(const a in t)s=s+"<br />"+String(this.gap(e))+String(a)+" = "+String(this.ObjectToStringEx(t[a],e+1));else s+=String(this.EscapeHtml(t));return s},ObjectToStringEx2(t,e){let s="";if(0!==t&&(!(0,a.f)(t)||null==t))return"(Null)";if(t instanceof Array)for(const a in t)s=s+"\r\n"+String(this.gap2(e))+"Item #"+String(a)+": "+String(this.ObjectToStringEx2(t[a],e+1));else if(t instanceof Object)for(const a in t)s=s+"\r\n"+String(this.gap2(e))+String(a)+" = "+String(this.ObjectToStringEx2(t[a],e+1));else s+=String(this.EscapeHtml(t));return s},gap(t){let e="";for(let s=0;s<4*t;s++)e+="&nbsp;";return e},gap2(t){let e="";for(let s=0;s<4*t;s++)e+=" ";return e},ObjectToString(t){return this.ObjectToStringEx(t,0)},ObjectToString2(t){return this.ObjectToStringEx2(t,0)},char2hex:t=>(t+256).toString(16).substr(-2).toUpperCase(),rstr2hex(t){let e,s="";for(e=0;e<t.length;e++)s+=String(this.char2hex(t.charCodeAt(e)));return s},encode_utf8:t=>unescape(encodeURIComponent(t)),decode_utf8:t=>decodeURIComponent(escape(t)),data2blob(t){const e=new Array(t.length);for(let s=0;s<t.length;s++)e[s]=t.charCodeAt(s);return new Blob([new Uint8Array(e)])},random:t=>Math.floor(Math.random()*t),trademarks:t=>t.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}},252:(t,e,s)=>{"use strict";s.d(e,{H:()=>a});class a{processData(t){}onStateChange(t){}start(){}onSendKvmData(t){}}},8623:(t,e,s)=>{"use strict";s.d(e,{$:()=>i});var a=s(7721),o=s(4183);class i{constructor(t,e,s){this.acc="",this.stateProcessorFac=new a.v(e,s,this.updateRFBState.bind(this)),this.parent=s,this.logger=t}processData(t){if(!(0,o.f)(t))return;this.acc+=t;let e=0;for(this.logger.verbose(`Process Data ACC length:  ${this.acc.length}`);this.acc.length>0;){const t=this.stateProcessorFac.getProcessor(this.parent.state),s=this.parent.state;if(e=t.processState(this.acc),this.logger.verbose(`State  ${s}  Processed. cmdSize returned ${e}`),0===e)return;this.acc=this.acc.substring(e),this.logger.verbose(`remaining acc  ${this.acc.length} command size: ${e} new parent state: ${this.parent.state}`)}}updateRFBState(t){this.parent.state=t}}},300:(t,e,s)=>{"use strict";s.d(e,{X:()=>o});var a=s(842);class o{constructor(t){this.parent=t}Decode(t,e,s,o,i,r,n,l){const h=t.charCodeAt(e++);let c,p,d;const v={};let u,b=0,f=0;if(0===h){for(this.parent.logger.verbose("Raw encoding"),u=0;u<n;u++)a.j.setPixel(this.parent,t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),u);a.j.putImage(this.parent,s,o)}else if(1===h){p=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),this.parent.canvasCtx.fillStyle="rgb("+(1===this.parent.bpp?`${224&p}, ${(28&p)<<3}, ${a.j.fixColor((3&p)<<6)}`:`${p>>8&248}, ${p>>3&252},${(31&p)<<3}`)+")",this.parent.logger.verbose("fillstyle: "+this.parent.canvasCtx.fillStyle);const n=a.j.rotX(this.parent,s,o);o=a.j.rotY(this.parent,s,o),s=n,this.parent.canvasCtx.fillRect(s,o,i,r)}else if(h>1&&h<17){this.parent.logger.verbose("Read the packed palette");let i=4,r=15;for(u=0;u<h;u++)v[u]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(2===h?(i=1,r=1):h<=4&&(i=2,r=3);b<n&&e<t.length;)for(p=t.charCodeAt(e++),u=8-i;u>=0;u-=i)a.j.setPixel(this.parent,v[p>>u&r],b++);a.j.putImage(this.parent,s,o)}else if(128===h){for(this.parent.logger.verbose("RLE encoded tile");b<n&&e<t.length;){p=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),f=1;do{f+=d=t.charCodeAt(e++)}while(255===d);for(;--f>=0;)a.j.setPixel(this.parent,p,b++)}a.j.putImage(this.parent,s,o)}else if(h>129){for(this.parent.logger.verbose("Read the RLE palette"),u=0;u<h-128;u++)v[u]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(this.parent.logger.verbose("Decode RLE on palette");b<n&&e<t.length;){if(f=1,c=t.charCodeAt(e++),p=v[c%128],c>127)do{f+=d=t.charCodeAt(e++)}while(255===d);for(;--f>=0;)a.j.setPixel(this.parent,p,b++)}a.j.putImage(this.parent,s,o)}}}},7504:(t,e,s)=>{"use strict";s.d(e,{$:()=>a.$});var a=s(8623);s(300)},8272:(t,e,s)=>{"use strict";var a;s.d(e,{i:()=>a}),function(t){t[t.VERBOSE=5]="VERBOSE",t[t.INFO=4]="INFO",t[t.DEBUG=3]="DEBUG",t[t.WARNING=2]="WARNING",t[t.ERROR=1]="ERROR"}(a||(a={}))},7428:(t,e,s)=>{"use strict";s.d(e,{i:()=>a.i});var a=s(8272)},4560:(t,e,s)=>{"use strict";s.d(e,{e:()=>i});var a=s(2125),o=s(3965);class i{constructor(t,e,s,a){this.wsSocket=t,this.parent=e,this.rleDecoder=s,this.updateRFBState=a}processState(t){let e=0;if(t.length>=12){const s=a.r.ReadShort(t,0),i=a.r.ReadShort(t,2),r=a.r.ReadShort(t,4),n=a.r.ReadShort(t,6),l=r*n,h=a.r.ReadInt(t,8);if(h<17){if(r<1||r>64||n<1||n>64)throw this.parent.logger.error(`Invalid tile size (${r},${n}), disconnecting.`),new Error("Invalid tile size");if(this.parent.sparew!==r||this.parent.spareh!==n){this.parent.sparew=this.parent.sparew2=r,this.parent.spareh=this.parent.spareh2=n,1!==this.parent.rotation&&3!==this.parent.rotation||(this.parent.sparew2=n,this.parent.spareh2=r);const t=`${this.parent.sparew2}x${this.parent.spareh2}`;this.parent.spare=this.parent.sparecache[t],(0,o.fQ)(this.parent.spare)||(this.parent.sparecache[t]=this.parent.spare=this.parent.canvasCtx.createImageData(this.parent.sparew2,this.parent.spareh2))}}if(4294967073===h)this.parent.logger.verbose("Desktop size"),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=r,this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=n,this.wsSocket.send(String.fromCharCode(3,0,0,0,0,0)+a.r.ShortToStr(this.parent.width)+a.r.ShortToStr(this.parent.height)),e=12,null!=this.parent.onScreenSizeChange&&this.parent.onScreenSizeChange(this.parent.ScreenWidth,this.parent.ScreenHeight);else if(0===h){let a=12;const r=12+l*this.parent.bpp;if(t.length<r)return 0;e=r;for(let e=0;e<l;e++)o.jw.setPixel(this.parent,t.charCodeAt(a++)+(2===this.parent.bpp?t.charCodeAt(a++)<<8:0),e);o.jw.putImage(this.parent,s,i)}else{if(16!==h)throw this.parent.logger.error(`Unknown Encoding: ${h} , HEX: ${a.r.rstr2hex(t)}`),new Error(`Unknown Encoding: ${h}`);{if(t.length<16)return 0;const o=a.r.ReadInt(t,12);if(t.length<16+o)return 0;const h=16,c=5,p=0;if(o>5&&0===t.charCodeAt(h)&&a.r.ReadShortX(t,h+1)===o-c)this.rleDecoder.Decode(t,h+5,s,i,r,n,l,o);else{const e=t.substring(h,h+o-p),a=this.parent.inflate.inflate(e);if(!(a.length>0))throw this.parent.logger.error("Invalid deflate data."),new Error("invalid deflate data");this.rleDecoder.Decode(a,0,s,i,r,n,l,a.length)}e=16+o}}if(100==--this.parent.state){this.parent.logger.debug("Frame completed. Update state and request new frame"),this.updateRFBState(4);const t=()=>o.Xn.sendRefresh(this.parent,this.wsSocket);0===this.parent.frameRateDelay?o.Xn.sendRefresh(this.parent,this.wsSocket):setTimeout(t,this.parent.frameRateDelay)}}return e}}},7398:(t,e,s)=>{"use strict";s.d(e,{U:()=>o});var a=s(2125);class o{constructor(t,e,s){this.wsSocket=t,this.serverCutTextHandler=e,this.updateRFBState=s}processState(t){let e=0,s=0;switch(t.charCodeAt(0)){case 0:if(t.length<4)return 0;this.updateRFBState(100+a.r.ReadShort(t,2)),e=4;break;case 2:e=1;break;case 3:if(t.length<8)return 0;if(s=a.r.ReadInt(t,4)+8,t.length<s)return 0;e=this.serverCutTextHandler.handleServerCutText(t)}return e}}},8431:(t,e,s)=>{"use strict";s.d(e,{w:()=>a});class a{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=12?(e=12,this.updateRFBState(1),this.wsSocket.send("RFB 003.008\n"),e):0}}},4558:(t,e,s)=>{"use strict";s.d(e,{l:()=>a});class a{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=1?(e=t.charCodeAt(0)+1,this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(2),e):0}}},234:(t,e,s)=>{"use strict";s.d(e,{m:()=>o});var a=s(2125);class o{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;if(t.length>=4){if(e=4,0!==a.r.ReadInt(t,0))throw new Error("Error. Stopping. Security response not None.");return this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(3),e}return 0}}},6082:(t,e,s)=>{"use strict";s.d(e,{I:()=>i});var a=s(2125),o=s(4183);class i{constructor(t,e){this.wsSocket=t,this.parent=e}handleServerCutText(t){if(t.length<8)return 0;const e=a.r.ReadInt(t,4)+8;if(t.length<e)return 0;if(null!=this.parent.onKvmData){const s=t.substring(8,e);s.length>=16&&"\0KvmDataChannel"===s.substring(0,15)&&(this.parent.kvmDataSupported||(this.parent.kvmDataSupported=!0,console.log("KVM Data Channel Supported.")),(-1===this.parent.onKvmDataAck&&16===s.length||0!==s.charCodeAt(15))&&(this.parent.onKvmDataAck=!0),(0,o.f)(this.parent.urlvars)&&(0,o.f)(this.parent.urlvars.kvmdatatrace)&&console.log(`KVM-Recv((${s.length-16})):  ${s.substring(16)}`),s.length>16&&this.parent.onKvmData(s.substring(16)),!0===this.parent.onKvmDataAck&&this.parent.onKvmDataPending.length>0&&this.wsSocket.onSendKvmData(this.parent.onKvmDataPending.shift()))}return e}}},6381:(t,e,s)=>{"use strict";s.d(e,{C:()=>i});var a=s(2125),o=s(4741);class i{constructor(t,e,s){this.wsSocket=t,this.parent=e,this.updateRFBState=s}processState(t){let e=0;if(t.length>=24){this.parent.rotation=0;const s=a.r.ReadInt(t,20);if(t.length<24+s)return 0;e=24+s,null!=this.parent.updateScreenDimensions&&this.parent.updateScreenDimensions(a.r.ReadShort(t,0),a.r.ReadShort(t,2)),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=a.r.ReadShort(t,0),this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=a.r.ReadShort(t,2);let i="";return this.parent.useZRLE&&(i+=a.r.IntToStr(16)),i+=a.r.IntToStr(0),i+=a.r.IntToStr(1092),this.parent.logger.verbose("Send supported encodings"),this.wsSocket.send(String.fromCharCode(2,0)+a.r.ShortToStr(i.length/4+1)+i+a.r.IntToStr(-223)),1===this.parent.bpp&&this.wsSocket.send(String.fromCharCode(0,0,0,0,8,8,0,1)+a.r.ShortToStr(7)+a.r.ShortToStr(7)+a.r.ShortToStr(3)+String.fromCharCode(5,2,0,0,0,0)),this.updateRFBState(4),this.parent.onStateChange(3),this.parent.logger.info("Start new frame."),o.X.sendRefresh(this.parent,this.wsSocket),this.parent.oldMouseX=-1,e}return 0}}},8874:(t,e,s)=>{"use strict";s.d(e,{ez:()=>a.e,wW:()=>o.w,Ut:()=>i.U,ll:()=>r.l,mC:()=>n.m,Cu:()=>l.C});var a=s(4560),o=s(8431),i=s(7398),r=s(4558),n=s(234),l=s(6381)},7721:(t,e,s)=>{"use strict";s.d(e,{v:()=>r});var a=s(8874),o=s(6082),i=s(300);class r{constructor(t,e,s){this.stateProcessors={},this.stateProcessors[0]=new a.wW(t,s),this.stateProcessors[1]=new a.ll(t,s),this.stateProcessors[2]=new a.mC(t,s),this.stateProcessors[3]=new a.Cu(t,e,s);const r=new o.I(t,e);this.stateProcessors[4]=new a.Ut(t,r,s),this.stateProcessors["100plus"]=new a.ez(t,e,new i.X(e),s)}getProcessor(t){return t<=100?this.stateProcessors[t]:this.stateProcessors["100plus"]}}},7025:(t,e,s)=>{"use strict";s.d(e,{q:()=>i});var a=s(6174),o=s(4183);const i={convertAMTKeyCode:t=>(0,o.f)(t.code.startsWith("Key"))&&4===t.code.length?t.code.charCodeAt(3)+(!1===t.shiftKey?32:0):(0,o.f)(t.code.startsWith("Digit"))&&6===t.code.length?t.code.charCodeAt(5):(0,o.f)(t.code.startsWith("Numpad"))&&7===t.code.length?t.code.charCodeAt(6):a.Z[t.code]}},6174:(t,e,s)=>{"use strict";s.d(e,{Z:()=>a});const a={Pause:19,CapsLock:20,Space:32,Quote:39,Minus:45,NumpadMultiply:42,NumpadAdd:43,PrintScreen:44,Comma:44,NumpadSubtract:45,NumpadDecimal:46,Period:46,Slash:47,NumpadDivide:47,Semicolon:59,Equal:61,OSLeft:91,BracketLeft:91,OSRight:91,Backslash:92,BracketRight:93,ContextMenu:93,Backquote:96,NumLock:144,ScrollLock:145,Backspace:65288,Tab:65289,Enter:65293,NumpadEnter:65293,Escape:65307,Delete:65535,Home:65360,PageUp:65365,PageDown:65366,ArrowLeft:65361,ArrowUp:65362,ArrowRight:65363,ArrowDown:65364,End:65367,Insert:65379,F1:65470,F2:65471,F3:65472,F4:65473,F5:65474,F6:65475,F7:65476,F8:65477,F9:65478,F10:65479,F11:65480,F12:65481,ShiftLeft:65505,ShiftRight:65506,ControlLeft:65507,ControlRight:65508,AltLeft:65513,AltRight:65514,MetaLeft:65511,MetaRight:65512}},4741:(t,e,s)=>{"use strict";s.d(e,{X:()=>i});var a=s(2125),o=s(4183);const i={sendRefresh(t,e){if(!t.holding)if(t.focusMode>0){const s=2*t.focusMode;e.send(String.fromCharCode(3,1)+a.r.ShortToStr(Math.max(Math.min(t.oldMouseX,t.lastMouseX)-t.focusMode,0))+a.r.ShortToStr(Math.max(Math.min(t.oldMouseY,t.lastMouseY)-t.focusMode,0))+a.r.ShortToStr(s+Math.abs(t.oldMouseX-t.lastMouseX))+a.r.ShortToStr(s+Math.abs(t.oldMouseY-t.lastMouseY))),t.oldMouseX=t.lastMouseX,t.oldMouseY=t.lastMouseY}else e.send(String.fromCharCode(3,1,0,0,0,0)+a.r.ShortToStr(t.rwidth)+a.r.ShortToStr(t.rheight))},sendKey(t,e,s){if("object"==typeof e)for(const s in e)this.sendKey(t,e[s][0],e[s][1]);else t.send(String.fromCharCode(4,s,0,0)+a.r.IntToStr(e))},sendKvmData(t,e,s){!0!==t.onKvmDataAck?t.onKvmDataPending.push(s):((0,o.f)(t.urlvars)&&(0,o.f)(t.urlvars.kvmdatatrace)&&console.log(`KVM-Send(${String(s.length)}): ${String(s)}`),s="\0KvmDataChannel\0"+String(s),e.send(`${String.fromCharCode(6,0,0,0)}${a.r.IntToStr(s.length)}${String(s)}`),t.onKvmDataAck=!1)},sendKeepAlive(t,e){t.lastKeepAlive<Date.now()-5e3&&(t.lastKeepAlive=Date.now(),e.send(String.fromCharCode(6,0,0,0)+a.r.IntToStr(16)+"\0KvmDataChannel\0"))},sendCtrlAltDelMsg(t){this.sendCad(t)},sendCad(t){this.sendKey(t,65507,1),this.sendKey(t,65513,1),this.sendKey(t,65535,1),this.sendKey(t,65535,0),this.sendKey(t,65513,0),this.sendKey(t,65507,0)}}},842:(t,e,s)=>{"use strict";s.d(e,{j:()=>a});const a={putImage(t,e,s){if(t.holding)return;const o=a.arotX(t,e,s);s=a.arotY(t,e,s),e=o,t.canvasCtx.putImageData(t.spare,e,s)},setPixel(t,e,s){let o,i,r=4*s;t.rotation>0&&(1===t.rotation?(o=s%t.sparew,i=Math.floor(s/t.sparew),r=4*(s=o*t.sparew2+(t.sparew2-1-i))):2===t.rotation?r=t.sparew*t.spareh*4-4-r:3===t.rotation&&(o=s%t.sparew,i=Math.floor(s/t.sparew),r=4*(s=(t.sparew2-1-o)*t.sparew2+i))),1===t.bpp?(t.spare.data[r++]=224&e,t.spare.data[r++]=(28&e)<<3,t.spare.data[r++]=a.fixColor((3&e)<<6)):(t.spare.data[r++]=e>>8&248,t.spare.data[r++]=e>>3&252,t.spare.data[r++]=(31&e)<<3),t.spare.data[r]=255},arotX:(t,e,s)=>0===t.rotation?e:1===t.rotation?t.canvasCtx.canvas.width-t.sparew2-s:2===t.rotation?t.canvasCtx.canvas.width-t.sparew2-e:3===t.rotation?s:0,arotY:(t,e,s)=>0===t.rotation?s:1===t.rotation?e:2===t.rotation?t.canvasCtx.canvas.height-t.spareh2-s:3===t.rotation?t.canvasCtx.canvas.height-t.spareh-e:0,crotX:(t,e,s)=>0===t.rotation?e:1===t.rotation?s:2===t.rotation?t.canvasCtx.canvas.width-e:3===t.rotation?t.canvasCtx.canvas.height-s:0,crotY:(t,e,s)=>0===t.rotation?s:1===t.rotation?t.canvasCtx.canvas.width-e:2===t.rotation?t.canvasCtx.canvas.height-s:3===t.rotation?e:0,rotX:(t,e,s)=>0===t.rotation||1===t.rotation?e:2===t.rotation?e-t.canvasCtx.canvas.width:3===t.rotation?e-t.canvasCtx.canvas.height:0,rotY:(t,e,s)=>0===t.rotation?s:1===t.rotation?s-t.canvasCtx.canvas.width:2===t.rotation?s-t.canvasCtx.canvas.height:3===t.rotation?s:0,setRotation(t,e){for(;e<0;)e+=4;const s=e%4;if(t.holding)return t.rotation=s,!1;if(s===t.rotation)return!0;let o=t.canvasCtx.canvas.width,i=t.canvasCtx.canvas.height;1!==t.rotation&&3!==t.rotation||(o=t.canvasCtx.canvas.height,i=t.canvasCtx.canvas.width),null==t.tcanvas&&(t.tcanvas=document.createElement("canvas"));const r=t.tcanvas.getContext("2d");return r.setTransform(1,0,0,1,0,0),r.canvas.width=o,r.canvas.height=i,r.rotate(-90*t.rotation*Math.PI/180),0===t.rotation&&r.drawImage(t.canvasCtx.canvas,0,0),1===t.rotation&&r.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,0),2===t.rotation&&r.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,-t.canvasCtx.canvas.height),3===t.rotation&&r.drawImage(t.canvasCtx.canvas,0,-t.canvasCtx.canvas.height),0!==t.rotation&&2!==t.rotation||(t.canvasCtx.canvas.height=o,t.canvasCtx.canvas.width=i),1!==t.rotation&&3!==t.rotation||(t.canvasCtx.canvas.height=i,t.canvasCtx.canvas.width=o),t.canvasCtx.setTransform(1,0,0,1,0,0),t.canvasCtx.rotate(90*s*Math.PI/180),t.rotation=s,t.canvasCtx.drawImage(t.tcanvas,a.rotX(t,0,0),a.rotY(t,0,0)),t.width=t.canvasCtx.canvas.width,t.height=t.canvasCtx.canvas.height,null!=t.onScreenResize&&t.onScreenResize(t.width,t.height,t.canvasId),!0},fixColor:t=>t>127?t+32:t}},7219:(t,e,s)=>{"use strict";s.d(e,{E:()=>n});var a,o=s(7025),i=s(4741),r=s(4183);!function(t){t[t.Up=0]="Up",t[t.Down=1]="Down"}(a||(a={}));class n{constructor(t,e){this.Comms=e,this.parent=t}GrabKeyInput(){this.KeyInputGrab||(document.onkeyup=this.handleKeyUp.bind(this),document.onkeydown=this.handleKeyDown.bind(this),document.onkeypress=this.handleKeys.bind(this),this.KeyInputGrab=!0)}UnGrabKeyInput(){this.KeyInputGrab&&(document.onkeyup=null,document.onkeydown=null,document.onkeypress=null,this.KeyInputGrab=!1)}handleKeys(t){return this.haltEvent(t)}haltEvent(t){return(0,r.f)(t.preventDefault)&&t.preventDefault(),(0,r.f)(t.stopPropagation)&&t.stopPropagation(),!1}handleKeyUp(t){return this.handleKeyEvent(a.Up,t)}handleKeyDown(t){return this.handleKeyEvent(a.Down,t)}handleKeyEvent(t,e){let s=e;if((0,r.f)(s)||(s=window.event),(0,r.f)(s.code)){const e=o.q.convertAMTKeyCode(s);this.parent.logger.verbose(`Key ${t} : ${String(e)}`),null!=e&&i.X.sendKey(this.Comms,e,t)}else{let e=s.keyCode;173===e&&(e=189),61===e&&(e=187);let a=e;!1===s.shiftKey&&e>=65&&e<=90&&(a=e+32),e>=112&&e<=124&&(a=e+65358),8===e&&(a=65288),9===e&&(a=65289),13===e&&(a=65293),16===e&&(a=65505),17===e&&(a=65507),18===e&&(a=65513),27===e&&(a=65307),33===e&&(a=65365),34===e&&(a=65366),35===e&&(a=65367),36===e&&(a=65360),37===e&&(a=65361),38===e&&(a=65362),39===e&&(a=65363),40===e&&(a=65364),45===e&&(a=65379),46===e&&(a=65535),e>=96&&e<=105&&(a=e-48),106===e&&(a=42),107===e&&(a=43),109===e&&(a=45),110===e&&(a=46),111===e&&(a=47),186===e&&(a=59),187===e&&(a=61),188===e&&(a=44),189===e&&(a=45),190===e&&(a=46),191===e&&(a=47),192===e&&(a=96),219===e&&(a=91),220===e&&(a=92),221===e&&(a=93),222===e&&(a=39),this.parent.logger.verbose(`Key ${t}: ${e}  = ${a}`),i.X.sendKey(this.Comms,a,t)}return this.haltEvent(s)}}},1406:(t,e,s)=>{"use strict";s.d(e,{x:()=>r});var a=s(2125),o=s(842),i=s(4183);class r{constructor(t,e,s){this.parent=t,this.comm=e,this.debounceTime=s,this.mouseClickCompleted=!0,this.lastEvent=null}GrabMouseInput(){this.MouseInputGrab||(this.MouseInputGrab=!0)}UnGrabMouseInput(){if(!this.MouseInputGrab)return;const t=this.parent.canvasCtx.canvas;t.onmousemove=null,t.onmouseup=null,t.onmousedown=null,this.MouseInputGrab=!1}mousedown(t){return this.parent.buttonmask|=1<<t.button,this.mousemove(t)}mouseup(t){return this.parent.buttonmask&=65535-(1<<t.button),this.mousemove(t)}mousemove(t){if(4!==this.parent.state)return!0;const e=this.getPositionOfControl(this.parent.canvasControl);if(this.parent.lastMouseX=(t.pageX-e[0])*(this.parent.canvasControl.height/this.parent.canvasControl.offsetHeight),this.parent.lastMouseY=(Number(t.pageY-e[1])+((0,i.f)(this.parent.scrolldiv)?Number(this.parent.scrolldiv.scrollTop):0))*(this.parent.canvasControl.width/this.parent.canvasControl.offsetWidth),(0,i.f)(this.parent.noMouseRotate)||(this.parent.lastMouseX2=o.j.crotX(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseY=o.j.crotY(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseX=this.parent.lastMouseX2),this.comm.send(String.fromCharCode(5,this.parent.buttonmask)+a.r.ShortToStr(this.parent.lastMouseX)+a.r.ShortToStr(this.parent.lastMouseY)),this.parent.setDeskFocus("DeskFocus",this.parent.focusMode),0!==this.parent.focusMode){const t=Math.min(this.parent.lastMouseX,this.parent.canvasControl.width-this.parent.focusMode),s=Math.min(this.parent.lastMouseY,this.parent.canvasControl.height-this.parent.focusMode),a=2*this.parent.focusMode,o=this.parent.canvasControl,i=o.offsetHeight/this.parent.canvasControl.height,r=o.offsetWidth/this.parent.canvasControl.width,n=this.parent.getDeskFocus("DeskFocus"),l=this.getPositionOfControl(this.parent.canvasControl.parentElement);n.left=`${Math.max((t-this.parent.focusMode)*i,0)+(e[0]-l[0])}px`,n.top=`${Math.max((s-this.parent.focusMode)*r,0)+(e[1]-l[1])}px`,n.width=a*i-6+"px",n.height=a*i-6+"px"}return this.haltEvent(t)}haltEvent(t){return(0,i.f)(t.preventDefault)&&t.preventDefault(),(0,i.f)(t.stopPropagation)&&t.stopPropagation(),!1}getPositionOfControl(t){const e=Array(2);e[0]=e[1]=0;let s=t;for(;null!=s;)e[0]=Number(e[0])+Number(s.offsetLeft),e[1]=Number(e[1])+Number(s.offsetTop),s=s.offsetParent;return e}}},4183:(t,e,s)=>{"use strict";s.d(e,{f:()=>a});const a=t=>null!=t&&""!==t&&!1!==t&&0!==t},3965:(t,e,s)=>{"use strict";s.d(e,{Xn:()=>a.X,jw:()=>o.j,EB:()=>i.E,xx:()=>r.x,fQ:()=>n.f}),s(7025);var a=s(4741),o=s(842),i=s(7219),r=s(1406),n=s(4183)},6676:(t,e,s)=>{"use strict";s.d(e,{AMTDesktop:()=>a.r,AMTKvmDataRedirector:()=>o.N,Protocol:()=>i.b,ConsoleLogger:()=>r.k,LogLevel:()=>n.i,DataProcessor:()=>l.$});var a=s(8633),o=s(6380),i=s(5615),r=s(1331),n=(s(2125),s(7721),s(7428)),l=s(7504);s(8874),s(3965)},798:(t,e,s)=>{"use strict";s.d(e,{N:()=>i});var a=s(9297),o=s.n(a);s(1430);class i extends o().Component{render(){return o().createElement("button",{className:"button",onClick:this.props.handleConnectClick},1===this.props.kvmstate?"Connecting KVM":2===this.props.kvmstate?"Disconnect KVM":"Connect KVM")}}},2838:(t,e,s)=>{"use strict";s.d(e,{m:()=>r});var a=s(9297),o=s.n(a),i=s(7354);class r extends o().Component{constructor(t){super(t),this.desktopsettings={encoding:1},this.changeEncoding=this.changeEncoding.bind(this)}changeEncoding(t){this.desktopsettings.encoding=t,this.props.changeDesktopSettings(this.desktopsettings)}render(){return o().createElement(i.S,{changeEncoding:this.changeEncoding,getConnectState:this.props.getConnectState})}}},7354:(t,e,s)=>{"use strict";s.d(e,{S:()=>i});var a=s(9297),o=s.n(a);s(4869);class i extends o().Component{constructor(t){super(t),this.state={value:1},this.onEncodingChange=this.onEncodingChange.bind(this)}onEncodingChange(t){this.setState({value:t.target.value}),this.props.changeEncoding(t.target.value)}render(){return o().createElement("span",{className:"encoding"},o().createElement("label",null,"Encoding:"),o().createElement("select",{value:this.state.value,className:2===this.props.getConnectState()?"reldisabled":"",onChange:this.onEncodingChange,disabled:2===this.props.getConnectState()},o().createElement("option",{value:"1"},"RLE 8"),o().createElement("option",{value:"2"},"RLE 16")))}}},1094:(t,e,s)=>{"use strict";s.d(e,{h:()=>n});var a=s(9297),o=s.n(a),i=s(798),r=s(2838);s(7886);class n extends o().Component{render(){return o().createElement(o().Fragment,null,o().createElement("div",{className:"header"},o().createElement(i.N,{handleConnectClick:this.props.handleConnectClick,kvmstate:this.props.kvmstate}),o().createElement(r.m,{changeDesktopSettings:this.props.changeDesktopSettings,getConnectState:this.props.getConnectState})))}}},5569:(t,e,s)=>{"use strict";s.d(e,{U:()=>r});var a=s(9297),o=s.n(a),i=s(5990);s(1641);class r extends o().Component{shouldComponentUpdate(){return!1}render(){const t={width:"1366",height:"768",onContextMenu:t=>(t.preventDefault(),!1),onMouseDown:this.props.mouseDown,onMouseUp:this.props.mouseUp,onMouseMove:this.props.mouseMove};return o().createElement("canvas",Object.assign({},t,{className:"canvas",ref:t=>(0,i.X0)(t)?this.props.contextRef(t.getContext("2d")):null}))}}},5990:(t,e,s)=>{"use strict";s.d(e,{X0:()=>a});const a=t=>null!=t&&""!==t&&!1!==t&&0!==t},6305:module=>{var ZLIB=ZLIB||{},BASE,NMAX;void 0===ZLIB.common_initialized&&(ZLIB.Z_NO_FLUSH=0,ZLIB.Z_PARTIAL_FLUSH=1,ZLIB.Z_SYNC_FLUSH=2,ZLIB.Z_FULL_FLUSH=3,ZLIB.Z_FINISH=4,ZLIB.Z_BLOCK=5,ZLIB.Z_TREES=6,ZLIB.Z_OK=0,ZLIB.Z_STREAM_END=1,ZLIB.Z_NEED_DICT=2,ZLIB.Z_ERRNO=-1,ZLIB.Z_STREAM_ERROR=-2,ZLIB.Z_DATA_ERROR=-3,ZLIB.Z_MEM_ERROR=-4,ZLIB.Z_BUF_ERROR=-5,ZLIB.Z_VERSION_ERROR=-6,ZLIB.Z_DEFLATED=8,ZLIB.z_stream=function(){this.next_in=0,this.avail_in=0,this.total_in=0,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=null,this.state=null,this.data_type=0,this.adler=0,this.input_data="",this.output_data="",this.error=0,this.checksum_function=null},ZLIB.gz_header=function(){this.text=0,this.time=0,this.xflags=0,this.os=255,this.extra=null,this.extra_len=0,this.extra_max=0,this.name=null,this.name_max=0,this.comment=null,this.comm_max=0,this.hcrc=0,this.done=0},ZLIB.common_initialized=!0),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-inflate.js"),function(){var DEF_WBITS=15,HEAD=0,FLAGS=1,TIME=2,OS=3,EXLEN=4,EXTRA=5,NAME=6,COMMENT=7,HCRC=8,DICTID=9,DICT=10,TYPE=11,TYPEDO=12,STORED=13,COPY_=14,COPY=15,TABLE=16,LENLENS=17,CODELENS=18,LEN_=19,LEN=20,LENEXT=21,DIST=22,DISTEXT=23,MATCH=24,LIT=25,CHECK=26,LENGTH=27,DONE=28,BAD=29,MEM=30,SYNC=31,ENOUGH_LENS=852,ENOUGH_DISTS=592,ENOUGH=ENOUGH_LENS+ENOUGH_DISTS,CODES=0,LENS=1,DISTS=2,inflate_table_lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],inflate_table_lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,203,69],inflate_table_dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],inflate_table_dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function inflate_table(t,e){var s,a,o,i,r,n,l,h,c,p,d,v,u,b,f,g,m,S,C,A,_,E,k=t.next,I=e==DISTS?t.distbits:t.lenbits,w=t.work,B=t.lens,T=e==DISTS?t.nlen:0,R=t.codes;s=e==LENS?t.nlen:e==DISTS?t.ndist:19;var x=new Array(16),D=new Array(16);for(a=0;a<=15;a++)x[a]=0;for(o=0;o<s;o++)x[B[T+o]]++;for(n=I,r=15;r>=1&&0==x[r];r--);if(n>r&&(n=r),0==r)return g={op:64,bits:1,val:0},R[k++]=g,R[k++]=g,e==DISTS?t.distbits=1:t.lenbits=1,t.next=k,0;for(i=1;i<r&&0==x[i];i++);for(n<i&&(n=i),c=1,a=1;a<=15;a++)if(c<<=1,(c-=x[a])<0)return-1;if(c>0&&(e==CODES||1!=r))return t.next=k,-1;for(D[1]=0,a=1;a<15;a++)D[a+1]=D[a]+x[a];for(o=0;o<s;o++)0!=B[T+o]&&(w[D[B[T+o]]++]=o);switch(e){case CODES:S=A=w,C=0,_=0,E=19;break;case LENS:S=inflate_table_lbase,C=-257,A=inflate_table_lext,_=-257,E=256;break;default:S=inflate_table_dbase,A=inflate_table_dext,C=0,_=0,E=-1}if(d=0,o=0,a=i,m=k,l=n,h=0,b=-1,f=(p=1<<n)-1,e==LENS&&p>=ENOUGH_LENS||e==DISTS&&p>=ENOUGH_DISTS)return t.next=k,1;for(;;){g={op:0,bits:a-h,val:0},w[o]<E?g.val=w[o]:w[o]>E?(g.op=A[_+w[o]],g.val=S[C+w[o]]):g.op=96,v=1<<a-h,i=u=1<<l;do{R[m+(d>>>h)+(u-=v)]=g}while(0!=u);for(v=1<<a-1;d&v;)v>>>=1;if(0!=v?(d&=v-1,d+=v):d=0,o++,0==--x[a]){if(a==r)break;a=B[T+w[o]]}if(a>n&&(d&f)!=b){for(0==h&&(h=n),m+=i,c=1<<(l=a-h);l+h<r&&!((c-=x[l+h])<=0);)l++,c<<=1;if(p+=1<<l,e==LENS&&p>=ENOUGH_LENS||e==DISTS&&p>=ENOUGH_DISTS)return t.next=k,1;R[k+(b=d&f)]={op:l,bits:n,val:m-k}}}return 0!=d&&(R[m+d]={op:64,bits:a-h,val:0}),t.next=k+p,e==DISTS?t.distbits=n:t.lenbits=n,0}function inflate_fast(t,e){var s,a,o,i,r,n,l,h,c,p,d,v,u,b,f,g,m,S,C,A,_,E,k=-1,I=-1;s=t.state,a=t.input_data,i=(o=t.next_in)+t.avail_in-5,n=(r=t.next_out)-(e-t.avail_out),l=r+(t.avail_out-257),h=s.wsize,c=s.whave,p=s.wnext,d=s.window,v=s.hold,u=s.bits,b=s.codes,f=s.lencode,g=s.distcode,m=(1<<s.lenbits)-1,S=(1<<s.distbits)-1;t:do{u<15&&(v+=(255&a.charCodeAt(o++))<<u,u+=8,v+=(255&a.charCodeAt(o++))<<u,u+=8),C=b[f+(v&m)];e:for(;;){if(v>>>=A=C.bits,u-=A,0==(A=C.op))t.output_data+=String.fromCharCode(C.val),r++;else{if(!(16&A)){if(0==(64&A)){C=b[f+(C.val+(v&(1<<A)-1))];continue e}if(32&A){s.mode=TYPE;break t}t.msg="invalid literal/length code",s.mode=BAD;break t}_=C.val,(A&=15)&&(u<A&&(v+=(255&a.charCodeAt(o++))<<u,u+=8),_+=v&(1<<A)-1,v>>>=A,u-=A),u<15&&(v+=(255&a.charCodeAt(o++))<<u,u+=8,v+=(255&a.charCodeAt(o++))<<u,u+=8),C=b[g+(v&S)];s:for(;;){if(v>>>=A=C.bits,u-=A,!(16&(A=C.op))){if(0==(64&A)){C=b[g+(C.val+(v&(1<<A)-1))];continue s}t.msg="invalid distance code",s.mode=BAD;break t}if(E=C.val,u<(A&=15)&&(v+=(255&a.charCodeAt(o++))<<u,(u+=8)<A&&(v+=(255&a.charCodeAt(o++))<<u,u+=8)),E+=v&(1<<A)-1,v>>>=A,u-=A,E>(A=r-n)){if((A=E-A)>c&&s.sane){t.msg="invalid distance too far back",s.mode=BAD;break t}k=0,I=-1,0==p?(k+=h-A,A<_&&(_-=A,t.output_data+=d.substring(k,k+A),r+=A,A=0,k=-1,I=r-E)):(k+=p-A,A<_&&(_-=A,t.output_data+=d.substring(k,k+A),k=-1,I=(r+=A)-E))}else k=-1,I=r-E;if(k>=0)t.output_data+=d.substring(k,k+_),r+=_,k+=_;else{var w=_;for(w>r-I&&(w=r-I),t.output_data+=t.output_data.substring(I,I+w),r+=w,I+=w,r+=_-=w;_>2;)t.output_data+=t.output_data.charAt(I++),t.output_data+=t.output_data.charAt(I++),t.output_data+=t.output_data.charAt(I++),_-=3;_&&(t.output_data+=t.output_data.charAt(I++),_>1&&(t.output_data+=t.output_data.charAt(I++)))}break s}}break e}}while(o<i&&r<l);o-=_=u>>>3,v&=(1<<(u-=_<<3))-1,t.next_in=o,t.next_out=r,t.avail_in=o<i?i-o+5:5-(o-i),t.avail_out=r<l?l-r+257:257-(r-l),s.hold=v,s.bits=u}function new_array(t){var e,s=new Array(t);for(e=0;e<t;e++)s[e]=0;return s}function getarg(t,e,s){return t&&e in t?t[e]:s}function checksum_none(){return 0}function inflate_state(){var t;this.mode=0,this.last=0,this.wrap=0,this.havedict=0,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=0,this.distcode=0,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=0,this.lens=new_array(320),this.work=new_array(288),this.codes=new Array(ENOUGH);var e={op:0,bits:0,val:0};for(t=0;t<ENOUGH;t++)this.codes[t]=e;this.sane=0,this.back=0,this.was=0}ZLIB.inflate_copyright=" inflate 1.2.6 Copyright 1995-2012 Mark Adler ",ZLIB.inflateResetKeep=function(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg=null,e.wrap&&(t.adler=1&e.wrap),e.mode=HEAD,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=0,e.distcode=0,e.next=0,e.sane=1,e.back=-1,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.inflateReset=function(t,e){var s,a;return t&&t.state?(a=t.state,void 0===e&&(e=DEF_WBITS),e<0?(s=0,e=-e):(s=1+(e>>>4),e<48&&(e&=15)),1==s&&"function"==typeof ZLIB.adler32?t.checksum_function=ZLIB.adler32:2==s&&"function"==typeof ZLIB.crc32?t.checksum_function=ZLIB.crc32:t.checksum_function=checksum_none,e&&(e<8||e>15)?ZLIB.Z_STREAM_ERROR:(a.window&&a.wbits!=e&&(a.window=null),a.wrap=s,a.wbits=e,a.wsize=0,a.whave=0,a.wnext=0,ZLIB.inflateResetKeep(t))):ZLIB.Z_STREAM_ERROR},ZLIB.inflateInit=function(t){var e=new ZLIB.z_stream;return e.state=new inflate_state,ZLIB.inflateReset(e,t),e},ZLIB.inflatePrime=function(t,e,s){var a;return t&&t.state?(a=t.state,e<0?(a.hold=0,a.bits=0,ZLIB.Z_OK):e>16||a.bits+e>32?ZLIB.Z_STREAM_ERROR:(s&=(1<<e)-1,a.hold+=s<<a.bits,a.bits+=e,ZLIB.Z_OK)):ZLIB.Z_STREAM_ERROR};var lenfix_ary=null,lenfix_def="([    {op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},{op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},    {op:0,bits:9,val:192},{op:16,bits:7,val:10},{op:0,bits:8,val:96},{op:0,bits:8,val:32},{op:0,bits:9,val:160},{op:0,bits:8,val:0},{op:0,bits:8,val:128},    {op:0,bits:8,val:64},{op:0,bits:9,val:224},{op:16,bits:7,val:6},{op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:144},{op:19,bits:7,val:59},    {op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:208},{op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:176},    {op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},{op:0,bits:9,val:240},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},    {op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},{op:0,bits:8,val:52},{op:0,bits:9,val:200},{op:17,bits:7,val:13},{op:0,bits:8,val:100},    {op:0,bits:8,val:36},{op:0,bits:9,val:168},{op:0,bits:8,val:4},{op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:232},{op:16,bits:7,val:8},    {op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:152},{op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:216},    {op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},{op:0,bits:9,val:184},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},    {op:0,bits:9,val:248},{op:16,bits:7,val:3},{op:0,bits:8,val:82},{op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},    {op:0,bits:8,val:50},{op:0,bits:9,val:196},{op:17,bits:7,val:11},{op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:164},{op:0,bits:8,val:2},    {op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:228},{op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:148},    {op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},{op:0,bits:9,val:212},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},    {op:0,bits:9,val:180},{op:0,bits:8,val:10},{op:0,bits:8,val:138},{op:0,bits:8,val:74},{op:0,bits:9,val:244},{op:16,bits:7,val:5},{op:0,bits:8,val:86},    {op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:204},{op:17,bits:7,val:15},    {op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:172},{op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:236},    {op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},{op:0,bits:9,val:156},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},    {op:0,bits:9,val:220},{op:18,bits:7,val:27},{op:0,bits:8,val:110},{op:0,bits:8,val:46},{op:0,bits:9,val:188},{op:0,bits:8,val:14},{op:0,bits:8,val:142},    {op:0,bits:8,val:78},{op:0,bits:9,val:252},{op:96,bits:7,val:0},{op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},    {op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:194},{op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:162},    {op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},{op:0,bits:9,val:226},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},    {op:0,bits:9,val:146},{op:19,bits:7,val:59},{op:0,bits:8,val:121},{op:0,bits:8,val:57},{op:0,bits:9,val:210},{op:17,bits:7,val:17},{op:0,bits:8,val:105},    {op:0,bits:8,val:41},{op:0,bits:9,val:178},{op:0,bits:8,val:9},{op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:242},{op:16,bits:7,val:4},    {op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},{op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:202},    {op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},{op:0,bits:9,val:170},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},    {op:0,bits:9,val:234},{op:16,bits:7,val:8},{op:0,bits:8,val:93},{op:0,bits:8,val:29},{op:0,bits:9,val:154},{op:20,bits:7,val:83},{op:0,bits:8,val:125},    {op:0,bits:8,val:61},{op:0,bits:9,val:218},{op:18,bits:7,val:23},{op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:186},{op:0,bits:8,val:13},    {op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:250},{op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},    {op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},{op:0,bits:9,val:198},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},    {op:0,bits:9,val:166},{op:0,bits:8,val:3},{op:0,bits:8,val:131},{op:0,bits:8,val:67},{op:0,bits:9,val:230},{op:16,bits:7,val:7},{op:0,bits:8,val:91},    {op:0,bits:8,val:27},{op:0,bits:9,val:150},{op:20,bits:7,val:67},{op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:214},{op:18,bits:7,val:19},    {op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:182},{op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:246},    {op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},    {op:0,bits:9,val:206},{op:17,bits:7,val:15},{op:0,bits:8,val:103},{op:0,bits:8,val:39},{op:0,bits:9,val:174},{op:0,bits:8,val:7},{op:0,bits:8,val:135},    {op:0,bits:8,val:71},{op:0,bits:9,val:238},{op:16,bits:7,val:9},{op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:158},{op:20,bits:7,val:99},    {op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:222},{op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:190},    {op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},{op:0,bits:9,val:254},{op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},    {op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},{op:0,bits:9,val:193},{op:16,bits:7,val:10},{op:0,bits:8,val:96},    {op:0,bits:8,val:32},{op:0,bits:9,val:161},{op:0,bits:8,val:0},{op:0,bits:8,val:128},{op:0,bits:8,val:64},{op:0,bits:9,val:225},{op:16,bits:7,val:6},    {op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:145},{op:19,bits:7,val:59},{op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:209},    {op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:177},{op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},    {op:0,bits:9,val:241},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},{op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},    {op:0,bits:8,val:52},{op:0,bits:9,val:201},{op:17,bits:7,val:13},{op:0,bits:8,val:100},{op:0,bits:8,val:36},{op:0,bits:9,val:169},{op:0,bits:8,val:4},    {op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:233},{op:16,bits:7,val:8},{op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:153},    {op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:217},{op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},    {op:0,bits:9,val:185},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},{op:0,bits:9,val:249},{op:16,bits:7,val:3},{op:0,bits:8,val:82},    {op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},{op:0,bits:8,val:50},{op:0,bits:9,val:197},{op:17,bits:7,val:11},    {op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:165},{op:0,bits:8,val:2},{op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:229},    {op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:149},{op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},    {op:0,bits:9,val:213},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},{op:0,bits:9,val:181},{op:0,bits:8,val:10},{op:0,bits:8,val:138},    {op:0,bits:8,val:74},{op:0,bits:9,val:245},{op:16,bits:7,val:5},{op:0,bits:8,val:86},{op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},    {op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:205},{op:17,bits:7,val:15},{op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:173},    {op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:237},{op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},    {op:0,bits:9,val:157},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},{op:0,bits:9,val:221},{op:18,bits:7,val:27},{op:0,bits:8,val:110},    {op:0,bits:8,val:46},{op:0,bits:9,val:189},{op:0,bits:8,val:14},{op:0,bits:8,val:142},{op:0,bits:8,val:78},{op:0,bits:9,val:253},{op:96,bits:7,val:0},    {op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},{op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:195},    {op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:163},{op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},    {op:0,bits:9,val:227},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},{op:0,bits:9,val:147},{op:19,bits:7,val:59},{op:0,bits:8,val:121},    {op:0,bits:8,val:57},{op:0,bits:9,val:211},{op:17,bits:7,val:17},{op:0,bits:8,val:105},{op:0,bits:8,val:41},{op:0,bits:9,val:179},{op:0,bits:8,val:9},    {op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:243},{op:16,bits:7,val:4},{op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},    {op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:203},{op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},    {op:0,bits:9,val:171},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},{op:0,bits:9,val:235},{op:16,bits:7,val:8},{op:0,bits:8,val:93},    {op:0,bits:8,val:29},{op:0,bits:9,val:155},{op:20,bits:7,val:83},{op:0,bits:8,val:125},{op:0,bits:8,val:61},{op:0,bits:9,val:219},{op:18,bits:7,val:23},    {op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:187},{op:0,bits:8,val:13},{op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:251},    {op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},{op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},    {op:0,bits:9,val:199},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},{op:0,bits:9,val:167},{op:0,bits:8,val:3},{op:0,bits:8,val:131},    {op:0,bits:8,val:67},{op:0,bits:9,val:231},{op:16,bits:7,val:7},{op:0,bits:8,val:91},{op:0,bits:8,val:27},{op:0,bits:9,val:151},{op:20,bits:7,val:67},    {op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:215},{op:18,bits:7,val:19},{op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:183},    {op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:247},{op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},    {op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},{op:0,bits:9,val:207},{op:17,bits:7,val:15},{op:0,bits:8,val:103},    {op:0,bits:8,val:39},{op:0,bits:9,val:175},{op:0,bits:8,val:7},{op:0,bits:8,val:135},{op:0,bits:8,val:71},{op:0,bits:9,val:239},{op:16,bits:7,val:9},    {op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:159},{op:20,bits:7,val:99},{op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:223},    {op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:191},{op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},    {op:0,bits:9,val:255}])",distfix_ary=null,distfix_def="([    {op:16,bits:5,val:1},{op:23,bits:5,val:257},{op:19,bits:5,val:17},{op:27,bits:5,val:4097},{op:17,bits:5,val:5},{op:25,bits:5,val:1025},    {op:21,bits:5,val:65},{op:29,bits:5,val:16385},{op:16,bits:5,val:3},{op:24,bits:5,val:513},{op:20,bits:5,val:33},{op:28,bits:5,val:8193},    {op:18,bits:5,val:9},{op:26,bits:5,val:2049},{op:22,bits:5,val:129},{op:64,bits:5,val:0},{op:16,bits:5,val:2},{op:23,bits:5,val:385},    {op:19,bits:5,val:25},{op:27,bits:5,val:6145},{op:17,bits:5,val:7},{op:25,bits:5,val:1537},{op:21,bits:5,val:97},{op:29,bits:5,val:24577},    {op:16,bits:5,val:4},{op:24,bits:5,val:769},{op:20,bits:5,val:49},{op:28,bits:5,val:12289},{op:18,bits:5,val:13},{op:26,bits:5,val:3073},    {op:22,bits:5,val:193},{op:64,bits:5,val:0}])";function fixedtables(state){var i;for(lenfix_ary||(lenfix_ary=eval(lenfix_def)),distfix_ary||(distfix_ary=eval(distfix_def)),state.lencode=0,state.distcode=512,i=0;i<512;i++)state.codes[i]=lenfix_ary[i];for(i=0;i<32;i++)state.codes[i+512]=distfix_ary[i];state.lenbits=9,state.distbits=5}function updatewindow(t){var e=t.state,s=t.output_data.length;return null===e.window&&(e.window=""),0==e.wsize&&(e.wsize=1<<e.wbits),s>=e.wsize?e.window=t.output_data.substring(s-e.wsize):e.whave+s<e.wsize?e.window+=t.output_data:e.window=e.window.substring(e.whave-(e.wsize-s))+t.output_data,e.whave=e.window.length,e.whave<e.wsize?e.wnext=e.whave:e.wnext=0,0}function CRC2(t,e){var s=[255&e,e>>>8&255];t.state.check=t.checksum_function(t.state.check,s,0,2)}function CRC4(t,e){var s=[255&e,e>>>8&255,e>>>16&255,e>>>24&255];t.state.check=t.checksum_function(t.state.check,s,0,4)}function LOAD(t,e){return e.strm=t,e.left=t.avail_out,e.next=t.next_in,e.have=t.avail_in,e.hold=t.state.hold,e.bits=t.state.bits,e}function RESTORE(t){var e=t.strm;e.next_in=t.next,e.avail_out=t.left,e.avail_in=t.have,e.state.hold=t.hold,e.state.bits=t.bits}function INITBITS(t){t.hold=0,t.bits=0}function PULLBYTE(t){return 0!=t.have&&(t.have--,t.hold+=(255&t.strm.input_data.charCodeAt(t.next++))<<t.bits,t.bits+=8,!0)}function NEEDBITS(t,e){for(;t.bits<e;)if(!PULLBYTE(t))return!1;return!0}function BITS(t,e){return t.hold&(1<<e)-1}function DROPBITS(t,e){t.hold>>>=e,t.bits-=e}function BYTEBITS(t){t.hold>>>=7&t.bits,t.bits-=7&t.bits}function REVERSE(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}var inflate_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];ZLIB.inflate=function(t,e){var s,a,o,i,r,n,l,h,c,p=-1,d=-1;if(!t||!t.state||!t.input_data&&0!=t.avail_in)return ZLIB.Z_STREAM_ERROR;(s=t.state).mode==TYPE&&(s.mode=TYPEDO),LOAD(t,a={}),o=a.have,i=a.left,c=ZLIB.Z_OK;t:for(;;)switch(s.mode){case HEAD:if(0==s.wrap){s.mode=TYPEDO;break}if(!NEEDBITS(a,16))break t;if(2&s.wrap&&35615==a.hold){s.check=t.checksum_function(0,null,0,0),CRC2(t,a.hold),INITBITS(a),s.mode=FLAGS;break}if(s.flags=0,null!==s.head&&(s.head.done=-1),!(1&s.wrap)||((BITS(a,8)<<8)+(a.hold>>>8))%31){t.msg="incorrect header check",s.mode=BAD;break}if(BITS(a,4)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",s.mode=BAD;break}if(DROPBITS(a,4),h=BITS(a,4)+8,0==s.wbits)s.wbits=h;else if(h>s.wbits){t.msg="invalid window size",s.mode=BAD;break}s.dmax=1<<h,t.adler=s.check=t.checksum_function(0,null,0,0),s.mode=512&a.hold?DICTID:TYPE,INITBITS(a);break;case FLAGS:if(!NEEDBITS(a,16))break t;if(s.flags=a.hold,(255&s.flags)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",s.mode=BAD;break}if(57344&s.flags){t.msg="unknown header flags set",s.mode=BAD;break}null!==s.head&&(s.head.text=a.hold>>>8&1),512&s.flags&&CRC2(t,a.hold),INITBITS(a),s.mode=TIME;case TIME:if(!NEEDBITS(a,32))break t;null!==s.head&&(s.head.time=a.hold),512&s.flags&&CRC4(t,a.hold),INITBITS(a),s.mode=OS;case OS:if(!NEEDBITS(a,16))break t;null!==s.head&&(s.head.xflags=255&a.hold,s.head.os=a.hold>>>8),512&s.flags&&CRC2(t,a.hold),INITBITS(a),s.mode=EXLEN;case EXLEN:if(1024&s.flags){if(!NEEDBITS(a,16))break t;s.length=a.hold,null!==s.head&&(s.head.extra_len=a.hold),512&s.flags&&CRC2(t,a.hold),INITBITS(a),s.head.extra=""}else null!==s.head&&(s.head.extra=null);s.mode=EXTRA;case EXTRA:if(1024&s.flags&&((r=s.length)>a.have&&(r=a.have),r&&(null!==s.head&&null!==s.head.extra&&(h=s.head.extra_len-s.length,s.head.extra+=t.input_data.substring(a.next,a.next+(h+r>s.head.extra_max?s.head.extra_max-h:r))),512&s.flags&&(s.check=t.checksum_function(s.check,t.input_data,a.next,r)),a.have-=r,a.next+=r,s.length-=r),s.length))break t;s.length=0,s.mode=NAME;case NAME:if(2048&s.flags){if(0==a.have)break t;null!==s.head&&null===s.head.name&&(s.head.name=""),r=0;do{if(h=t.input_data.charAt(a.next+r),r++,"\0"===h)break;null!==s.head&&s.length<s.head.name_max&&(s.head.name+=h,s.length++)}while(r<a.have);if(512&s.flags&&(s.check=t.checksum_function(s.check,t.input_data,a.next,r)),a.have-=r,a.next+=r,"\0"!==h)break t}else null!==s.head&&(s.head.name=null);s.length=0,s.mode=COMMENT;case COMMENT:if(4096&s.flags){if(0==a.have)break t;r=0,null!==s.head&&null===s.head.comment&&(s.head.comment="");do{if(h=t.input_data.charAt(a.next+r),r++,"\0"===h)break;null!==s.head&&s.length<s.head.comm_max&&(s.head.comment+=h,s.length++)}while(r<a.have);if(512&s.flags&&(s.check=t.checksum_function(s.check,t.input_data,a.next,r)),a.have-=r,a.next+=r,"\0"!==h)break t}else null!==s.head&&(s.head.comment=null);s.mode=HCRC;case HCRC:if(512&s.flags){if(!NEEDBITS(a,16))break t;if(a.hold!=(65535&s.check)){t.msg="header crc mismatch",s.mode=BAD;break}INITBITS(a)}null!==s.head&&(s.head.hcrc=s.flags>>>9&1,s.head.done=1),t.adler=s.check=t.checksum_function(0,null,0,0),s.mode=TYPE;break;case DICTID:if(!NEEDBITS(a,32))break t;t.adler=s.check=REVERSE(a.hold),INITBITS(a),s.mode=DICT;case DICT:if(0==s.havedict)return RESTORE(a),ZLIB.Z_NEED_DICT;t.adler=s.check=t.checksum_function(0,null,0,0),s.mode=TYPE;case TYPE:if(e==ZLIB.Z_BLOCK||e==ZLIB.Z_TREES)break t;case TYPEDO:if(s.last){BYTEBITS(a),s.mode=CHECK;break}if(!NEEDBITS(a,3))break t;switch(s.last=BITS(a,1),DROPBITS(a,1),BITS(a,2)){case 0:s.mode=STORED;break;case 1:if(fixedtables(s),s.mode=LEN_,e==ZLIB.Z_TREES){DROPBITS(a,2);break t}break;case 2:s.mode=TABLE;break;case 3:t.msg="invalid block type",s.mode=BAD}DROPBITS(a,2);break;case STORED:if(BYTEBITS(a),!NEEDBITS(a,32))break t;if((65535&a.hold)!=(a.hold>>>16&65535^65535)){t.msg="invalid stored block lengths",s.mode=BAD;break}if(s.length=65535&a.hold,INITBITS(a),s.mode=COPY_,e==ZLIB.Z_TREES)break t;case COPY_:s.mode=COPY;case COPY:if(r=s.length){if(r>a.have&&(r=a.have),r>a.left&&(r=a.left),0==r)break t;t.output_data+=t.input_data.substring(a.next,a.next+r),t.next_out+=r,a.have-=r,a.next+=r,a.left-=r,s.length-=r;break}s.mode=TYPE;break;case TABLE:if(!NEEDBITS(a,14))break t;if(s.nlen=BITS(a,5)+257,DROPBITS(a,5),s.ndist=BITS(a,5)+1,DROPBITS(a,5),s.ncode=BITS(a,4)+4,DROPBITS(a,4),s.nlen>286||s.ndist>30){t.msg="too many length or distance symbols",s.mode=BAD;break}s.have=0,s.mode=LENLENS;case LENLENS:for(;s.have<s.ncode;){if(!NEEDBITS(a,3))break t;var v=BITS(a,3);s.lens[inflate_order[s.have++]]=v,DROPBITS(a,3)}for(;s.have<19;)s.lens[inflate_order[s.have++]]=0;if(s.next=0,s.lencode=0,s.lenbits=7,c=inflate_table(s,CODES)){t.msg="invalid code lengths set",s.mode=BAD;break}s.have=0,s.mode=CODELENS;case CODELENS:for(;s.have<s.nlen+s.ndist;){for(;!((n=s.codes[s.lencode+BITS(a,s.lenbits)]).bits<=a.bits);)if(!PULLBYTE(a))break t;if(n.val<16)DROPBITS(a,n.bits),s.lens[s.have++]=n.val;else{if(16==n.val){if(!NEEDBITS(a,n.bits+2))break t;if(DROPBITS(a,n.bits),0==s.have){t.msg="invalid bit length repeat",s.mode=BAD;break}h=s.lens[s.have-1],r=3+BITS(a,2),DROPBITS(a,2)}else if(17==n.val){if(!NEEDBITS(a,n.bits+3))break t;DROPBITS(a,n.bits),h=0,r=3+BITS(a,3),DROPBITS(a,3)}else{if(!NEEDBITS(a,n.bits+7))break t;DROPBITS(a,n.bits),h=0,r=11+BITS(a,7),DROPBITS(a,7)}if(s.have+r>s.nlen+s.ndist){t.msg="invalid bit length repeat",s.mode=BAD;break}for(;r--;)s.lens[s.have++]=h}}if(s.mode==BAD)break;if(0==s.lens[256]){t.msg="invalid code -- missing end-of-block",s.mode=BAD;break}if(s.next=0,s.lencode=s.next,s.lenbits=9,c=inflate_table(s,LENS)){t.msg="invalid literal/lengths set",s.mode=BAD;break}if(s.distcode=s.next,s.distbits=6,c=inflate_table(s,DISTS)){t.msg="invalid distances set",s.mode=BAD;break}if(s.mode=LEN_,e==ZLIB.Z_TREES)break t;case LEN_:s.mode=LEN;case LEN:if(a.have>=6&&a.left>=258){RESTORE(a),inflate_fast(t,i),LOAD(t,a),s.mode==TYPE&&(s.back=-1);break}for(s.back=0;!((n=s.codes[s.lencode+BITS(a,s.lenbits)]).bits<=a.bits);)if(!PULLBYTE(a))break t;if(n.op&&0==(240&n.op)){for(l=n;n=s.codes[s.lencode+l.val+(BITS(a,l.bits+l.op)>>>l.bits)],!(l.bits+n.bits<=a.bits);)if(!PULLBYTE(a))break t;DROPBITS(a,l.bits),s.back+=l.bits}if(DROPBITS(a,n.bits),s.back+=n.bits,s.length=n.val,0==n.op){s.mode=LIT;break}if(32&n.op){s.back=-1,s.mode=TYPE;break}if(64&n.op){t.msg="invalid literal/length code",s.mode=BAD;break}s.extra=15&n.op,s.mode=LENEXT;case LENEXT:if(s.extra){if(!NEEDBITS(a,s.extra))break t;s.length+=BITS(a,s.extra),DROPBITS(a,s.extra),s.back+=s.extra}s.was=s.length,s.mode=DIST;case DIST:for(;!((n=s.codes[s.distcode+BITS(a,s.distbits)]).bits<=a.bits);)if(!PULLBYTE(a))break t;if(0==(240&n.op)){for(l=n;n=s.codes[s.distcode+l.val+(BITS(a,l.bits+l.op)>>>l.bits)],!(l.bits+n.bits<=a.bits);)if(!PULLBYTE(a))break t;DROPBITS(a,l.bits),s.back+=l.bits}if(DROPBITS(a,n.bits),s.back+=n.bits,64&n.op){t.msg="invalid distance code",s.mode=BAD;break}s.offset=n.val,s.extra=15&n.op,s.mode=DISTEXT;case DISTEXT:if(s.extra){if(!NEEDBITS(a,s.extra))break t;s.offset+=BITS(a,s.extra),DROPBITS(a,s.extra),s.back+=s.extra}s.mode=MATCH;case MATCH:if(0==a.left)break t;if(r=i-a.left,s.offset>r){if((r=s.offset-r)>s.whave&&s.sane){t.msg="invalid distance too far back",s.mode=BAD;break}r>s.wnext?(r-=s.wnext,p=s.wsize-r,d=-1):(p=s.wnext-r,d=-1),r>s.length&&(r=s.length)}else p=-1,d=t.next_out-s.offset,r=s.length;if(r>a.left&&(r=a.left),a.left-=r,s.length-=r,p>=0)t.output_data+=s.window.substring(p,p+r),t.next_out+=r,r=0;else{t.next_out+=r;do{t.output_data+=t.output_data.charAt(d++)}while(--r)}0==s.length&&(s.mode=LEN);break;case LIT:if(0==a.left)break t;t.output_data+=String.fromCharCode(s.length),t.next_out++,a.left--,s.mode=LEN;break;case CHECK:if(s.wrap){if(!NEEDBITS(a,32))break t;if(i-=a.left,t.total_out+=i,s.total+=i,i&&(t.adler=s.check=t.checksum_function(s.check,t.output_data,t.output_data.length-i,i)),i=a.left,(s.flags?a.hold:REVERSE(a.hold))!=s.check){t.msg="incorrect data check",s.mode=BAD;break}INITBITS(a)}s.mode=LENGTH;case LENGTH:if(s.wrap&&s.flags){if(!NEEDBITS(a,32))break t;if(a.hold!=(4294967295&s.total)){t.msg="incorrect length check",s.mode=BAD;break}INITBITS(a)}s.mode=DONE;case DONE:c=ZLIB.Z_STREAM_END;break t;case BAD:c=ZLIB.Z_DATA_ERROR;break t;case MEM:return ZLIB.Z_MEM_ERROR;case SYNC:default:return ZLIB.Z_STREAM_ERROR}return RESTORE(a),(s.wsize||i!=t.avail_out&&s.mode<BAD&&(s.mode<CHECK||e!=ZLIB.Z_FINISH))&&updatewindow(t)?(s.mode=MEM,ZLIB.Z_MEM_ERROR):(o-=t.avail_in,i-=t.avail_out,t.total_in+=o,t.total_out+=i,s.total+=i,s.wrap&&i&&(t.adler=s.check=t.checksum_function(s.check,t.output_data,0,t.output_data.length)),t.data_type=s.bits+(s.last?64:0)+(s.mode==TYPE?128:0)+(s.mode==LEN_||s.mode==COPY_?256:0),(0==o&&0==i||e==ZLIB.Z_FINISH)&&c==ZLIB.Z_OK&&(c=ZLIB.Z_BUF_ERROR),c)},ZLIB.inflateEnd=function(t){return t&&t.state?(t.state.window=null,t.state=null,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.z_stream.prototype.inflate=function(t,e){var s,a;this.input_data=t,this.next_in=getarg(e,"next_in",0),this.avail_in=getarg(e,"avail_in",t.length-this.next_in),s=getarg(e,"flush",ZLIB.Z_SYNC_FLUSH),a=getarg(e,"avail_out",-1);var o="";do{if(this.avail_out=a>=0?a:16384,this.output_data="",this.next_out=0,this.error=ZLIB.inflate(this,s),0!=this.error&&console.log("zlib error",this.error),a>=0)return this.output_data;if(o+=this.output_data,this.avail_out>0)break}while(this.error==ZLIB.Z_OK);return o},ZLIB.z_stream.prototype.inflateReset=function(t){return ZLIB.inflateReset(this,t)}}(),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-adler32.js"),BASE=65521,NMAX=5552,ZLIB.adler32=function(t,e,s,a){return"string"==typeof e?function(t,e,s,a){var o,i;if(o=t>>>16&65535,t&=65535,1==a)return(t+=255&e.charCodeAt(s))>=BASE&&(t-=BASE),(o+=t)>=BASE&&(o-=BASE),t|o<<16;if(null===e)return 1;if(a<16){for(;a--;)o+=t+=255&e.charCodeAt(s++);return t>=BASE&&(t-=BASE),t|(o%=BASE)<<16}for(;a>=NMAX;){a-=NMAX,i=347;do{o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++)}while(--i);t%=BASE,o%=BASE}if(a){for(;a>=16;)a-=16,o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++),o+=t+=255&e.charCodeAt(s++);for(;a--;)o+=t+=255&e.charCodeAt(s++);t%=BASE,o%=BASE}return t|o<<16}(t,e,s,a):function(t,e,s,a){var o,i;if(o=t>>>16&65535,t&=65535,1==a)return(t+=e[s])>=BASE&&(t-=BASE),(o+=t)>=BASE&&(o-=BASE),t|o<<16;if(null===e)return 1;if(a<16){for(;a--;)o+=t+=e[s++];return t>=BASE&&(t-=BASE),t|(o%=BASE)<<16}for(;a>=NMAX;){a-=NMAX,i=347;do{o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++]}while(--i);t%=BASE,o%=BASE}if(a){for(;a>=16;)a-=16,o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++],o+=t+=e[s++];for(;a--;)o+=t+=e[s++];t%=BASE,o%=BASE}return t|o<<16}(t,e,s,a)},ZLIB.adler32_combine=function(t,e,s){var a,o,i;return s<0?4294967295:(o=(i=s%=BASE)*(a=65535&t),o%=BASE,(a+=(65535&e)+BASE-1)>=BASE&&(a-=BASE),a>=BASE&&(a-=BASE),(o+=(t>>16&65535)+(e>>16&65535)+BASE-i)>=131042&&(o-=131042),o>=BASE&&(o-=BASE),a|o<<16)},void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-crc32.js"),function(){var t=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];function e(t,e){var s,a=0;for(s=0;e;)1&e&&(s^=t[a]),e>>=1,a++;return s}function s(t,s){var a;for(a=0;a<32;a++)t[a]=e(s,s[a])}ZLIB.crc32=function(e,s,a,o){return"string"==typeof s?function(e,s,a,o){if(null==s)return 0;for(e^=4294967295;o>=8;)e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,e=t[255&(e^s.charCodeAt(a++))]^e>>>8,o-=8;if(o)do{e=t[255&(e^s.charCodeAt(a++))]^e>>>8}while(--o);return 4294967295^e}(e,s,a,o):function(e,s,a,o){if(null==s)return 0;for(e^=4294967295;o>=8;)e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,e=t[255&(e^s[a++])]^e>>>8,o-=8;if(o)do{e=t[255&(e^s[a++])]^e>>>8}while(--o);return 4294967295^e}(e,s,a,o)},ZLIB.crc32_combine=function(t,a,o){var i,r,n,l;if(o<=0)return t;for(n=new Array(32),(l=new Array(32))[0]=3988292384,r=1,i=1;i<32;i++)l[i]=r,r<<=1;s(n,l),s(l,n);do{if(s(n,l),1&o&&(t=e(n,t)),0==(o>>=1))break;s(l,n),1&o&&(t=e(l,t)),o>>=1}while(0!=o);return t^a}}(),module.exports=ZLIB},9297:t=>{"use strict";t.exports=__WEBPACK_EXTERNAL_MODULE__9297__}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var s=__webpack_module_cache__[t]={id:t,exports:{}};return __webpack_modules__[t](s,s.exports,__webpack_require__),s.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var s in e)__webpack_require__.o(e,s)&&!__webpack_require__.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};return(()=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{KVM:()=>n});var t=__webpack_require__(6676),e=__webpack_require__(3965),s=__webpack_require__(1094),a=__webpack_require__(5569),o=__webpack_require__(5990),i=__webpack_require__(9297),r=__webpack_require__.n(i);__webpack_require__(2208);class n extends r().Component{constructor(e){super(e),this.desktopSettingsChange=!1,this.state={kvmstate:0,encodingOption:1},this.logger=new t.ConsoleLogger(t.LogLevel.ERROR),this.saveContext=this.saveContext.bind(this),this.startKVM=this.startKVM.bind(this),this.stopKVM=this.stopKVM.bind(this),this.handleConnectClick=this.handleConnectClick.bind(this),this.getRenderStatus=this.getRenderStatus.bind(this),this.OnConnectionStateChange=this.OnConnectionStateChange.bind(this),this.changeDesktopSettings=this.changeDesktopSettings.bind(this)}saveContext(t){this.logger.debug("save context called"),this.ctx=t,this.init()}init(){const s=null!=this.props.deviceId?this.props.deviceId:"",a=null!=this.props.mpsServer?this.props.mpsServer.replace("http","ws"):"";this.module=new t.AMTDesktop(this.logger,this.ctx),this.redirector=new t.AMTKvmDataRedirector(this.logger,t.Protocol.KVM,new FileReader,s,16994,"","",0,0,this.props.authToken,a),this.dataProcessor=new t.DataProcessor(this.logger,this.redirector,this.module),this.mouseHelper=new e.xx(this.module,this.redirector,this.props.mouseDebounceTime<200?200:this.props.mouseDebounceTime),this.keyboard=new e.EB(this.module,this.redirector),this.redirector.onProcessData=this.module.processData.bind(this.module),this.redirector.onStart=this.module.start.bind(this.module),this.redirector.onNewState=this.module.onStateChange.bind(this.module),this.redirector.onSendKvmData=this.module.onSendKvmData.bind(this.module),this.redirector.onStateChanged=this.OnConnectionStateChange.bind(this),this.redirector.onError=this.onRedirectorError.bind(this),this.module.onSend=this.redirector.send.bind(this.redirector),this.module.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.module.bpp=this.state.encodingOption}cleanUp(){this.module=null,this.redirector=null,this.dataProcessor=null,this.mouseHelper=null,this.keyboard=null,this.ctx.clearRect(0,0,this.ctx.canvas.height,this.ctx.canvas.width)}componentWillUnmount(){this.stopKVM()}onRedirectorError(){this.reset()}reset(){this.cleanUp(),this.init()}OnConnectionStateChange(t,e){this.setState({kvmstate:e}),this.desktopSettingsChange&&0===e&&(this.desktopSettingsChange=!1,setTimeout((()=>this.startKVM()),2e3))}changeDesktopSettings(t){2===this.state.kvmstate?(this.desktopSettingsChange=!0,this.module.bpp=t.encoding,this.stopKVM()):(this.setState({encodingOption:parseInt(t.encoding)}),this.module.bpp=parseInt(t.encoding))}startKVM(){void 0!==this.redirector&&this.redirector.start(WebSocket),void 0!==this.keyboard&&this.keyboard.GrabKeyInput()}stopKVM(){void 0!==this.redirector&&this.redirector.stop(),void 0!==this.keyboard&&this.keyboard.UnGrabKeyInput(),this.reset()}getRenderStatus(){return this.module.state}handleConnectClick(t){t.persist(),0===this.state.kvmstate?this.startKVM():1===this.state.kvmstate||2===this.state.kvmstate&&this.stopKVM()}componentDidUpdate(t){t.deviceId!==this.props.deviceId&&this.stopKVM()}render(){return r().createElement("div",{className:"canvas-container"},(0,o.X0)(this.props.autoConnect)?"":r().createElement(s.h,{key:"kvm_header",handleConnectClick:this.handleConnectClick,getConnectState:()=>this.state.kvmstate,kvmstate:this.state.kvmstate,changeDesktopSettings:this.changeDesktopSettings,deviceId:this.props.deviceId,server:this.props.mpsServer}),r().createElement(a.U,{key:"kvm_comp",contextRef:t=>this.saveContext(t),canvasHeight:this.props.canvasHeight,canvasWidth:this.props.canvasWidth,mouseMove:t=>{void 0!==this.mouseHelper&&this.mouseHelper.mousemove(t)},mouseDown:t=>{void 0!==this.mouseHelper&&this.mouseHelper.mousedown(t)},mouseUp:t=>{void 0!==this.mouseHelper&&this.mouseHelper.mouseup(t)}}))}}})(),__webpack_exports__})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,