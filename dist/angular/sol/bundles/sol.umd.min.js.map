{"version":3,"sources":["../../../../src/angular/projects/sol/src/lib/sol.service.ts","../../../../src/angular/projects/sol/src/lib/sol.component.ts","../../../../src/angular/projects/sol/src/lib/sol.component.html","../../../../src/angular/projects/sol/src/lib/sol.module.ts"],"names":["SolService","factory","ɵfac","providedIn","Injectable","SolComponent","params","activatedRoute","this","uuid","server","logger","ConsoleLogger","LogLevel","ERROR","deviceStatus","EventEmitter","deviceConnection","token","localStorage","getItem","urlConstructor","mpsServer","includes","prototype","replace","ngOnInit","_this","subscribe","id","data","init","stopSol","ngAfterViewInit","instantiate","setTimeout","startSol","terminal","AmtTerminal","dataProcessor","TerminalDataProcessor","redirector","AMTRedirector","Protocol","SOL","FileReader","JSON","parse","onSend","send","bind","onNewState","StateChange","onStateChanged","onTerminalStateChange","onProcessData","processData","processDataToXterm","handleWriteToXterm","clearTerminal","handleClearTerminal","container","document","getElementById","term","Terminal","rows","cols","cursorStyle","fontWeight","open","onData","handleKeyPress","attachCustomKeyEventHandler","e","stopPropagation","preventDefault","ctrlKey","shiftKey","keyCode","C","navigator","clipboard","writeText","getSelection","V","readText","then","text","code","SPACE","key","domEvent","TermSendKeys","reset","str","write","state","emit","start","WebSocket","stop","dispose","cleanup","ngOnDestroy","i0","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","Component","selector","templateUrl","styleUrls","encapsulation","ViewEncapsulation","None","Inject","Output","Input","SolModule","forRoot","param","ngModule","providers","provide","useValue","HttpClientModule","FlexLayoutModule","BrowserModule","BrowserAnimationsModule","declarations","imports","exports","NgModule","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolService {\n\n  constructor() { }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output, ViewEncapsulation, OnDestroy, Input, AfterViewInit } from '@angular/core'\nimport { Terminal } from 'xterm'\nimport { AmtTerminal, AMTRedirector, TerminalDataProcessor, ConsoleLogger, Protocol, LogLevel } from '@open-amt-cloud-toolkit/ui-toolkit/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { C, V, SPACE } from '@angular/cdk/keycodes'\n\n@Component({\n  selector: 'amt-sol',\n  templateUrl: './sol.component.html',\n  styleUrls: ['./sol.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class SolComponent implements OnInit, OnDestroy, AfterViewInit {\n  uuid: string = ''\n  terminal: any\n  container!: any\n  term: any\n  redirector: any\n  dataProcessor: any\n  token: any\n  server: string = ''\n  mpsServer: boolean\n  logger: ConsoleLogger = new ConsoleLogger(LogLevel.ERROR)\n  @Output() deviceStatus: EventEmitter<number> = new EventEmitter<number>()\n  @Input() deviceConnection: EventEmitter<boolean> = new EventEmitter<boolean>()\n\n  constructor (@Inject('userInput') public params, private readonly activatedRoute: ActivatedRoute) {\n    this.token = localStorage.getItem('loggedInUser')\n    this.server = `${this.urlConstructor()}/relay`\n    this.mpsServer = this.params.mpsServer.includes('/mps')\n    if (this.mpsServer) {\n      this.server = `${this.urlConstructor()}/ws/relay`\n    }\n  }\n\n  urlConstructor (): string {\n    return this.params.mpsServer.replace('http', 'ws')\n  }\n\n  ngOnInit (): void {\n    this.activatedRoute.params.subscribe(params => {\n      this.uuid = params.id\n    })\n    this.deviceConnection.subscribe((data: boolean) => {\n      if (data) {\n        this.init()\n      } else {\n        this.stopSol()\n      }\n    })\n  }\n\n  ngAfterViewInit (): void {\n    this.init()\n  }\n\n  init (): void {\n    this.instantiate()\n    setTimeout(() => {\n      this.startSol()\n    }, 4000)\n  }\n\n  instantiate (): void {\n    this.terminal = new AmtTerminal()\n    this.dataProcessor = new TerminalDataProcessor(this.terminal)\n    this.redirector = new AMTRedirector(this.logger, Protocol.SOL, new FileReader(), this.uuid, 16994, '', '', 0, 0, JSON.parse(this.token).token, this.server)\n    this.terminal.onSend = this.redirector.send.bind(this.redirector)\n    this.redirector.onNewState = this.terminal.StateChange.bind(this.terminal)\n    this.redirector.onStateChanged = this.onTerminalStateChange.bind(this)\n    this.redirector.onProcessData = this.dataProcessor.processData.bind(this)\n    this.dataProcessor.processDataToXterm = this.handleWriteToXterm.bind(this)\n    this.dataProcessor.clearTerminal = this.handleClearTerminal.bind(this)\n    this.container = document.getElementById('terminal')\n    this.term = new Terminal({\n      rows: 30,\n      cols: 100,\n      cursorStyle: 'block',\n      fontWeight: 'bold'\n    })\n    this.term.open(this.container)\n    this.term.onData((data: any) => {\n      this.handleKeyPress(data)\n    })\n    this.term.attachCustomKeyEventHandler((e: any) => {\n      e.stopPropagation()\n      e.preventDefault()\n      if (e.ctrlKey === true && e.shiftKey === true && e.keyCode === C) {\n        return navigator.clipboard.writeText(this.term.getSelection())\n      } else if (e.ctrlKey === true && e.shiftKey === true && e.keyCode === V) {\n        return navigator.clipboard.readText().then(text => {\n          this.handleKeyPress(text)\n        })\n      } else if (e.code === SPACE) {\n        return this.handleKeyPress(e.key)\n      }\n    })\n  }\n\n  handleKeyPress (domEvent: any): void {\n    this.terminal.TermSendKeys(domEvent)\n  }\n\n  handleClearTerminal (): void {\n    this.term.reset()\n  }\n\n  handleWriteToXterm (str: string): void {\n    this.term.write(str)\n  }\n\n  onTerminalStateChange (redirector: AMTRedirector, state: number): void {\n    this.deviceStatus.emit(state)\n  }\n\n  startSol (): void {\n    if (this.redirector !== null) {\n      this.redirector.start(WebSocket)\n    }\n  }\n\n  stopSol (): void {\n    if (this.redirector !== null) {\n      this.redirector.stop()\n      this.handleClearTerminal()\n      this.term.dispose()\n      this.cleanup()\n    }\n  }\n\n  cleanup (): void {\n    this.terminal = null\n    this.redirector = null\n    this.dataProcessor = null\n    this.term = null\n  }\n\n  ngOnDestroy (): void {\n    this.stopSol()\n  }\n}\n","<div class=\"container\">\r\n    <div id=\"terminal\" class=\"xtermDisplay\" style=\"width: fit-content;\"></div>\r\n</div>","import { CUSTOM_ELEMENTS_SCHEMA, ModuleWithProviders, NgModule } from '@angular/core'\nimport { SolComponent } from './sol.component'\nimport { BrowserModule } from '@angular/platform-browser'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { FlexLayoutModule } from '@angular/flex-layout'\nimport { HttpClientModule } from '@angular/common/http'\n\n@NgModule({\n  declarations: [\n    SolComponent\n  ],\n  imports: [\n    HttpClientModule,\n    FlexLayoutModule,\n    BrowserModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    SolComponent\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class SolModule {\n  public static forRoot (param: any): ModuleWithProviders<SolModule> {\n    return {\n      ngModule: SolModule,\n      providers: [\n        {\n          provide: 'userInput',\n          useValue: param\n        }\n      ]\n    }\n  }\n}\n"]}