!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(s,n,function(t){return e[t]}.bind(null,n));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=51)}([function(e,t){e.exports=require("react")},function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var s=r(2);class n{static ReadShort(e,t){return(e.charCodeAt(t)<<8)+e.charCodeAt(t+1)}static ReadShortX(e,t){return(e.charCodeAt(t+1)<<8)+e.charCodeAt(t)}static ReadInt(e,t){return 16777216*e.charCodeAt(t)+(e.charCodeAt(t+1)<<16)+(e.charCodeAt(t+2)<<8)+e.charCodeAt(t+3)}static ReadSInt(e,t){return(e.charCodeAt(t)<<24)+(e.charCodeAt(t+1)<<16)+(e.charCodeAt(t+2)<<8)+e.charCodeAt(t+3)}static ReadIntX(e,t){return 16777216*e.charCodeAt(t+3)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+1)<<8)+e.charCodeAt(t)}static ShortToStr(e){return String.fromCharCode(e>>8&255,255&e)}static ShortToStrX(e){return String.fromCharCode(255&e,e>>8&255)}static IntToStr(e){return String.fromCharCode(e>>24&255,e>>16&255,e>>8&255,255&e)}static IntToStrX(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}static MakeToArray(e){return e&&null!=e&&"object"!=typeof e?[e]:e}static SplitArray(e){return e.split(",")}static Clone(e){return JSON.parse(JSON.stringify(e))}static EscapeHtml(e){return"string"==typeof e?e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof e||"number"==typeof e?e:void 0}static ArrayElementMove(e,t,r){e.splice(r,0,e.splice(t,1)[0])}static ObjectToStringEx(e,t){let r="";if(0!==e&&(!Object(s.a)(e)||null==e))return"(Null)";if(e instanceof Array)for(var n in e)r+="<br />"+this.gap(t)+"Item #"+n+": "+this.ObjectToStringEx(e[n],t+1);else if(e instanceof Object)for(var a in e)r+="<br />"+this.gap(t)+a+" = "+this.ObjectToStringEx(e[a],t+1);else r+=this.EscapeHtml(e);return r}static ObjectToStringEx2(e,t){let r="";if(0!==e&&(!Object(s.a)(e)||null==e))return"(Null)";if(e instanceof Array)for(var n in e)r+="\r\n"+this.gap2(t)+"Item #"+n+": "+this.ObjectToStringEx2(e[n],t+1);else if(e instanceof Object)for(var a in e)r+="\r\n"+this.gap2(t)+a+" = "+this.ObjectToStringEx2(e[a],t+1);else r+=this.EscapeHtml(e);return r}static gap(e){let t="";for(let r=0;r<4*e;r++)t+="&nbsp;";return t}static gap2(e){let t="";for(let r=0;r<4*e;r++)t+=" ";return t}static ObjectToString(e){return this.ObjectToStringEx(e,0)}static ObjectToString2(e){return this.ObjectToStringEx2(e,0)}static hex2rstr(e){if("string"!=typeof e||0===e.length)return"";let t="";const r=(""+e).match(/../g);let s;for(;s=r.shift();)t+=String.fromCharCode(Number("0x"+s));return t}static char2hex(e){return(e+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(e){let t,r="";for(t=0;t<e.length;t++)r+=this.char2hex(e.charCodeAt(t));return r}static encode_utf8(e){return unescape(encodeURIComponent(e))}static decode_utf8(e){return decodeURIComponent(escape(e))}static data2blob(e){const t=new Array(e.length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return new Blob([new Uint8Array(t)])}static random(e){return Math.floor(Math.random()*e)}static trademarks(e){return e.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));const s=e=>null!=e&&""!==e&&!1!==e&&0!==e},function(e,t,r){"use strict";r.d(t,"b",(function(){return a})),r.d(t,"a",(function(){return o}));var s=r(19),n=r.n(s);const a=e=>n.a.t(e),o=(e,t)=>n.a.t(e,{translate:t})},function(e,t,r){"use strict";r.d(t,"b",(function(){return s})),r.d(t,"a",(function(){return n}));const s=()=>({Accept:"application/json","Content-Type":"application/json"}),n=e=>null!=e&&""!==e&&!1!==e&&0!==e},,function(e,t,r){"use strict";var s;r.d(t,"a",(function(){return s})),function(e){e[e.VERBOSE=5]="VERBOSE",e[e.INFO=4]="INFO",e[e.DEBUG=3]="DEBUG",e[e.WARNING=2]="WARNING",e[e.ERROR=1]="ERROR"}(s||(s={}))},function(e,t,r){"use strict";var s=r(0),n=r.n(s),a=r(8);const o=r.n(a).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:e})=>i(e)};
border: ${({type:e})=>"1px solid "+i(e)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,i=e=>"success"===e?"#4caf50":"warning"===e?"#ff9800":"error"===e?"#f44336":"#000000";t.a=({message:e,type:t})=>n.a.createElement(o,{type:t},e)},function(e,t){e.exports=require("styled-components")},function(e,t,r){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function i(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function c(e,t){for(var r={},s=[],n=0;n<e.length;n++){var a=e[n],c=t.base?a[0]+t.base:a[0],l=r[c]||0,h="".concat(c," ").concat(l);r[c]=l+1;var u=i(h),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:h,updater:g(d,t),references:1}),s.push(h)}return s}function l(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var n=r.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,r,s){var n=r?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var a=document.createTextNode(n),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,r){var s=r.css,n=r.media,a=r.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var f=null,m=0;function g(e,t){var r,s,n;if(t.singleton){var a=m++;r=f||(f=l(t)),s=d.bind(null,r,a,!1),n=d.bind(null,r,a,!0)}else r=l(t),s=p.bind(null,r,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var r=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<r.length;s++){var n=i(r[s]);o[n].references--}for(var a=c(e,t),l=0;l<r.length;l++){var h=i(r[l]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}r=a}}}},function(e,t,r){"use strict";function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],s=!0,n=!1,a=void 0;try{for(var o,i=e[Symbol.iterator]();!(s=(o=i.next()).done)&&(r.push(o.value),!t||r.length!==t);s=!0);}catch(e){n=!0,a=e}finally{try{s||null==i.return||i.return()}finally{if(n)throw a}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}e.exports=function(e){var t=s(e,4),r=t[1],n=t[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(o," */"),c=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(c).concat([i]).join("\n")}return[r].join("\n")}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,s){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(s)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(n[o]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);s&&n[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),t.push(c))}},t}},,function(e,t,r){"use strict";r.d(t,"b",(function(){return s})),r.d(t,"a",(function(){return c}));var s,n=r(1),a=r(18),o=r.n(a),i=r(2);!function(e){e[e.SOL=1]="SOL",e[e.KVM=2]="KVM",e[e.IDER=3]="IDER"}(s||(s={}));class c{constructor(e,t,r,s,n,a,o,i,c,l){this.fileReader=r,this.randomNonceChars="abcdef0123456789",this.host=s,this.port=n,this.user=a,this.pass=o,this.tls=i,this.tlsv1only=c,this.protocol=t,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=l,this.amtAccumulator="",this.authUri="",this.logger=e}getWsLocation(){return this.isBrowser()&&!Object(i.a)(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const e="undefined"!=typeof window;return e&&this.logger.debug("!!!!!BROWSER!!!!!"),e}catch(e){return!1}}start(e){this.connectState=0,this.socket=new e(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);const t=e=>{this.onSocketData(e.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))},r=e=>{this.onSocketData(e.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())};Object(i.a)(this.fileReader)&&Object(i.a)(this.fileReader.readAsBinaryString)?this.fileReader.onload=t.bind(this):Object(i.a)(this.fileReader)&&Object(i.a)(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=r.bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info("Start Redirect Session for protocol. "+this.protocol),this.protocol===s.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===s.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===s.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(e){try{if(this.inDataCount++,"object"==typeof e.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(e.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([e.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(e.data);else{let t="";const r=new Uint8Array(e.data),s=r.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(r[e]);this.onSocketData(t)}}else this.onSocketData(e.data)}catch(e){this.logger.error(e),this.stop(),this.onError()}}onSocketData(e){if(Object(i.a)(e)&&-1!==this.connectState){if("object"==typeof e){let t="";const r=new Uint8Array(e),s=r.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(r[e]);e=t}else if("string"!=typeof e)return;if((this.protocol===s.KVM||this.protocol===s.IDER)&&1===this.connectState)return this.onProcessData(e);for(this.amtAccumulator+=e;this.amtAccumulator.length>=1;){let e=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose("Start Redirection Session reply received for  "+this.protocol),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const t=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+t)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),e=13+t;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const t=n.a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+t)return;const r=this.amtAccumulator.charCodeAt(1),s=this.amtAccumulator.charCodeAt(4),a=[];for(let e=0;e<t;e++)a.push(this.amtAccumulator.charCodeAt(9+e));const o=this.amtAccumulator.substring(9,9+t);if(e=9+t,0===s)Object(i.a)(a.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+n.a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):Object(i.a)(a.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+n.a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):Object(i.a)(a.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+n.a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==s&&4!==s||1!==r)if(0===r){if(1===this.protocol){const e=1e4,t=100,r=0,s=1e4,a=100,o=0;this.socketSend(String.fromCharCode(32,0,0,0)+n.a.IntToStrX(this.amtSequence++)+n.a.ShortToStrX(e)+n.a.ShortToStrX(t)+n.a.ShortToStrX(r)+n.a.ShortToStrX(s)+n.a.ShortToStrX(a)+n.a.ShortToStrX(o)+n.a.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let e=0;const t=o.charCodeAt(e),r=o.substring(e+1,e+1+t);e+=t+1;const a=o.charCodeAt(e),i=o.substring(e+1,e+1+a);e+=a+1;let c=0,l=null;const h=this.generateRandomNonce(32),u="00000002";let d="";4===s&&(c=o.charCodeAt(e),l=o.substring(e+1,e+1+c),e+=c+1,d=`${u}:${h}:${String(l)} :`);const p=this.hex_md5(this.hex_md5(this.user+":"+r+":"+this.pass)+":"+i+":"+d+this.hex_md5("POST:"+this.authUri));let f=this.user.length+r.length+i.length+this.authUri.length+h.length+u.length+p.length+7;4===s&&(f+=parseInt(l.length)+1);let m=String.fromCharCode(19,0,0,0,s)+n.a.IntToStrX(f)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(r.length)+r+String.fromCharCode(i.length)+i+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(h.length)+h+String.fromCharCode(u.length)+u+String.fromCharCode(p.length)+p;4===s&&(m+=String.fromCharCode(l.length)+l),this.socketSend(m)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),e=23,this.socketSend(String.fromCharCode(39,0,0,0)+n.a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),e=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const t=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<t)break;this.onProcessData(this.amtAccumulator.substring(10,t)),e=t;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),e=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),e=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===e)return;this.amtAccumulator=this.amtAccumulator.substring(e)}}}hex_md5(e){return this.logger.verbose("MD5 the string"),o()(e)}socketSend(e){Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${e.length}): ${n.a.rstr2hex(e)}`);try{if(null!=this.socket&&1===this.socket.readyState){const t=new Uint8Array(e.length);this.logger.verbose(`Redir Send( ${e.length}): ${n.a.rstr2hex(e)}`);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r);this.socket.send(t.buffer)}}catch(e){this.logger.error("Socket send error: "+String(e))}}send(e){this.logger.verbose("Send called "+e),null!=this.socket&&1===this.connectState&&(this.protocol===s.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+n.a.IntToStrX(this.amtSequence++)+n.a.ShortToStrX(e.length)+e):this.socketSend(e))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+n.a.IntToStrX(this.amtSequence++))}generateRandomNonce(e){let t="";for(let r=0;r<e;r++)t+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return t}onSocketClosed(e){Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(e){console.info("onstatechange",e),this.state!==e&&(this.state=e,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var s=r(4),n=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};class a{static get(e,t={}){return n(this,void 0,void 0,(function*(){const r=Object(s.b)();return yield a.fetch(e,Object.assign(Object.assign({},t),{method:"GET",headers:r}))}))}static post(e,t={},r={}){return n(this,void 0,void 0,(function*(){const n=Object(s.b)();return yield a.fetch(e,Object.assign(Object.assign({},r),{method:"POST",body:t,headers:n}))}))}static delete(e,t={}){return n(this,void 0,void 0,(function*(){const r=Object(s.b)();return yield a.fetch(e,Object.assign(Object.assign({},t),{method:"DELETE",headers:r}))}))}static fetch(e,t={}){return n(this,void 0,void 0,(function*(){return t.mode="cors",t.credentials="include",t.withCredentials=!0,yield fetch(e,t).then(e=>n(this,void 0,void 0,(function*(){return yield e.json()})))}))}}},function(e,t,r){"use strict";r.d(t,"b",(function(){return o})),r.d(t,"a",(function(){return i}));var s=r(4),n=r(14),a=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};const o=(e,t,r,o)=>a(void 0,void 0,void 0,(function*(){const a=JSON.stringify({method:"PowerAction",payload:Object(s.a)(o)?{guid:e,action:t,useSOL:o}:{guid:e,action:t}}),i=null!=r?r:"";return yield n.a.post(i+"/amt",a,!0)})),i=(e,t)=>a(void 0,void 0,void 0,(function*(){const r=JSON.stringify({method:"PowerState",payload:{guid:e}}),s=null!=t?t:"";return yield n.a.post(s+"/amt",r,!0)}))},function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return n}));const s=[{value:"2",label:"Power Up"},{value:"101",label:"Reset To BIOS"},{value:"4",label:"Sleep"},{value:"5",label:"Power Cycle"},{value:"7",label:"Hibernate"},{value:"8",label:"Power Down"},{value:"10",label:"Reset"},{value:"12",label:"Soft-Off"},{value:"14",label:"Soft Reset"},{value:"100",label:"Power Up To BIOS"},{value:"400",label:"Reset To PXE"},{value:"401",label:"Power Up To PXE"}],n=e=>2===e?"Power Up":8===e?"Power Off":5===e?"Power Cycle":10===e?"Reset":12===e?"Soft Off":14===e?"Soft Reset":4===e?"Sleep":7===e?"Hibernate":100===e?"Power Up To BIOS":101===e?"Reset To BIOS":null},function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var s=r(6);class n{constructor(e){this.minLevel=e}log(e,t){switch(e){case s.a.VERBOSE:this.verbose(t);break;case s.a.INFO:this.info(t);break;case s.a.DEBUG:this.debug(t);break;case s.a.WARNING:this.warn(t);break;case s.a.ERROR:this.error(t)}}debug(e){this.minLevel>=s.a.DEBUG&&console.debug(e)}info(e){this.minLevel>=s.a.INFO&&console.info(e)}error(e){this.minLevel>=s.a.ERROR&&console.error(e)}warn(e){this.minLevel>=s.a.WARNING&&console.warn(e)}verbose(e){this.minLevel>=s.a.VERBOSE&&console.log(e)}}},function(e,t){e.exports=require("md5")},function(e,t){e.exports=require("i18next")},function(e,t,r){"use strict";var s=r(10),n=r.n(s),a=r(11),o=r.n(a)()(n.a);o.push([e.i,".label-text{margin-left:8px}.grey-label{opacity:.5}","",{version:3,sources:["webpack://./src/reactjs/components/shared/amtfeatures.scss"],names:[],mappings:"AAMC,YACI,eAHS,CAMb,YACI,UANM",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2020\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n $marginLeft: 8px;\r\n $opacity: 0.5;\r\n .label-text {\r\n     margin-left: $marginLeft;\r\n }\r\n\r\n .grey-label {\r\n     opacity: $opacity;\r\n }"],sourceRoot:""}]),t.a=o},,,,,,,,,,,,function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var s=r(0),n=r.n(s);const a=e=>n.a.createElement("select",{onClick:e.onChange,name:"PowerOptions"},n.a.createElement("option",{value:"",selected:!e.isSelected},"Choose"),e.availableOptions.map(({value:e,label:t})=>n.a.createElement("option",{key:e,value:e},t)))},function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var s=r(0),n=r.n(s),a=r(15),o=r(4);class i extends n.a.Component{constructor(e){super(e),this.getAmtPowerState=()=>{Object(a.a)(this.props.deviceId,this.props.server).then(e=>{this.props.updateParent(),Object(o.a)(e.powerstate)?this.setState({powerState:e.powerstate}):this.setState({powerState:100}),2===e.powerstate?this.props.handlePowerStatus("poweron"):100!==this.state.powerState?this.props.handlePowerStatus("sleep"):this.props.handlePowerStatus("failed")}).catch(e=>{console.info("error",e)})},this.renderPowerState=e=>{switch(e){case 1:case 10:case 11:case 14:case 17:return n.a.createElement("span",{style:{color:"red"}},"Other");case 2:return n.a.createElement("span",{style:{color:"green"}},"Power on");case 3:case 4:return n.a.createElement("span",{style:{color:"red"}},"deep sleep");case 5:case 6:case 8:case 9:case 12:case 13:case 15:case 16:return n.a.createElement("span",{style:{color:"red"}},"Power Off");case 7:return n.a.createElement("span",{style:{color:"red"}},"Hibernate");default:return n.a.createElement("span",{style:{color:"red"}},"Unknown")}},this.state={powerState:0}}componentDidMount(){this.getAmtPowerState(),this.timeInterval=setInterval(()=>this.getAmtPowerState(),15e3)}componentWillUnmount(){clearInterval(this.timeInterval)}render(){const{powerState:e}=this.state;return this.renderPowerState(e)}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return A}));var s=r(0),n=r.n(s),a=r(14),o=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};var i=r(8),c=r.n(i),l=r(4),h=function(e,t){var r={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(s=Object.getOwnPropertySymbols(e);n<s.length;n++)t.indexOf(s[n])<0&&Object.prototype.propertyIsEnumerable.call(e,s[n])&&(r[s[n]]=e[s[n]])}return r};const u=c.a.div`
  display: inline-block;
  vertical-align: middle;
`,d=c.a.svg`
  fill: none;
  stroke: green;
  stroke-width: 2px;
`,p=c.a.input.attrs({type:"checkbox"})`
  border: 0;
  clip: rect(0 0 0 0);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
`,f=c.a.div`
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: ${({disableCheckbox:e})=>m(e)};
  border-radius: 1px solid black;
  transition: all 150ms;

  ${p}:focus + & {
    box-shadow: 0 0 0 1px white;
  }

  ${d} {
    visibility: ${e=>Object(l.a)(e.checked)?"visible":"hidden"}
  }
`,m=e=>!0===e?"#ccc":"white",g=e=>{var{className:t,checked:r,disableCheckbox:s}=e,a=h(e,["className","checked","disableCheckbox"]);return n.a.createElement(u,{className:t},n.a.createElement(p,Object.assign({checked:r},a,{disabled:s})),n.a.createElement(f,{checked:r,disableCheckbox:s},n.a.createElement(d,{viewBox:"0 0 24 24"},n.a.createElement("polyline",{points:"20 6 9 17 4 12"}))))};var S=r(7),b=r(3),v=r(9),y=r.n(v),C=r(20),w={insert:"head",singleton:!1};y()(C.a,w),C.a.locals;class A extends s.Component{constructor(e){super(e),this.fetchAmtFeatures=()=>{const e=null!=this.props.server?this.props.server:"";((e,t)=>o(void 0,void 0,void 0,(function*(){const r=JSON.stringify({method:"GetAMTFeatures",payload:{guid:e}});return yield a.a.post(t+"/amt",r,!0)})))(this.props.deviceId,e).then(e=>{200===e.statuscode?this.setState({userConsent:e.payload.userConsent,useKVM:e.payload.KVM,useSOL:e.payload.SOL,useIDER:e.payload.IDER,redirection:e.payload.redirection},()=>this.updateCheckboxStatus()):this.props.handleFeatureStatus("failed")}).catch(()=>console.info("error"))},this.updateCheckboxStatus=()=>{const{feature:e}=this.props,{useKVM:t,useSOL:r,useIDER:s,redirection:n}=this.state;n&&(e===Object(b.b)("amtFeatures.features.kvm")&&t||e===Object(b.b)("amtFeatures.features.sol")&&r||"IDER"===e&&s)?(this.setState({checked:!0}),this.props.handleFeatureStatus("enabled")):this.props.handleFeatureStatus("notEnabled")},this.setAmtFeature=()=>{const{deviceId:e,feature:t,server:r,handleFeatureStatus:s}=this.props,{useKVM:n,useIDER:i,useSOL:c,checked:l}=this.state,h=l?Object(b.b)("amtFeatures.enabled"):Object(b.b)("amtFeatures.disabled"),u=null!=r?r:"";s("enabled");const d={feature:t,featureText:h};((e,t,r,s,n,i)=>o(void 0,void 0,void 0,(function*(){const o=JSON.stringify({method:"SetAMTFeatures",payload:{guid:e,userConsent:t,enableKVM:r,enableSOL:s,enableIDER:n}});return yield a.a.post(i+"/amt",o,!0)})))(e,"none",n,c,i,u).then(e=>{200===e.statuscode?this.setState({showMessage:!0,message:Object(b.a)("amtFeatures.messages.featureSuccess",d),type:Object(b.b)("amtFeatures.messageTypes.success")}):this.setState({showMessage:!0,checked:!l,message:Object(b.a)("amtFeatures.messages.updateFailed",d),type:Object(b.b)("amtFeatures.messageTypes.error")}),setTimeout(()=>{this.setState({showMessage:!1}),this.state.checked||this.props.handleFeatureStatus("notEnabled")},4e3)}).catch(e=>console.info("error",e))},this.handleCheckboxChange=e=>{switch(this.props.feature){case"KVM":this.setState({checked:e.target.checked,useKVM:e.target.checked},()=>this.setAmtFeature());break;case"SOL":this.setState({checked:e.target.checked,useSOL:e.target.checked},()=>this.setAmtFeature());break;case"IDER":this.setState({checked:e.target.checked,useIDER:e.target.checked},()=>this.setAmtFeature());break;default:this.setState({checked:e.target.checked})}},this.state={checked:!1,userConsent:"",useKVM:!1,useSOL:!1,useIDER:!1,redirection:!1,showMessage:!1,message:"",type:""}}componentDidMount(){this.fetchAmtFeatures()}render(){const{feature:e}=this.props,{showMessage:t,message:r,type:n}=this.state;return s.createElement(s.Fragment,null,t&&s.createElement(S.a,{message:r,type:n}),s.createElement("label",null,s.createElement(g,{checked:this.state.checked,onChange:this.handleCheckboxChange,className:"checkbox-class",disableCheckbox:2===this.props.getConnectState()}),s.createElement("span",{className:"label-text "+(2===this.props.getConnectState()?"grey-label":"")},e," ",Object(b.b)("amtFeatures.enabled"))))}}},,,,,,function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));class s{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=e=>{},this.TermSendKeys=e=>this.onSend(e)}}},function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));class s{constructor(e){this.processData=e=>{null!=this.terminal.capture&&(this.terminal.capture+=e);let t="";for(let r=0;r<e.length;r++){const s=e.charCodeAt(r);"J"===e[r]?this.clearTerminal():t+=0!=(128&s)?String.fromCharCode(this.terminal.AsciiToUnicode[127&s]):""+e[r]}this.processDataToXterm(t)},this.terminal=e}}},,,,,,,function(e,t,r){"use strict";var s=r(10),n=r.n(s),a=r(11),o=r.n(a)()(n.a);o.push([e.i,".sol-header{display:flex}.power-options{display:block;position:absolute;right:1%}","",{version:3,sources:["webpack://./src/reactjs/components/SerialOverLAN/sol.scss"],names:[],mappings:"AAIA,YACI,YAAA,CAEJ,eACC,aAAA,CACA,iBAAA,CACA,QAAA",sourcesContent:["/*********************************************************************\r\n* Copyright (c) Intel Corporation 2019\r\n* SPDX-License-Identifier: Apache-2.0\r\n**********************************************************************/\r\n.sol-header {\r\n    display: flex;\r\n}\r\n.power-options {\r\n\tdisplay: block;\r\n\tposition: absolute;\r\n\tright: 1%;\r\n}\r\n"],sourceRoot:""}]),t.a=o},function(e,t){e.exports=require("xterm")},,function(e,t,r){"use strict";r.r(t),r.d(t,"Sol",(function(){return D}));var s=r(0),n=r.n(s),a=r(40),o=r(8),i=r.n(o),c=r(13),l=r(17),h=r(6),u=r(41),d=r(32),p=r(49),f=r(4);const m=i.a.div`
   display:block;
   text-align:center;
`,g=i.a.div`
   display:inline-block;
`;class S extends n.a.Component{componentDidMount(){var e;const t=null!==(e=document.getElementById("xterm"))&&void 0!==e?e:"",{xterm:r,handleKeyPress:s}=this.props;Object(f.a)(t)&&(r.open(t),r.onData(e=>s(e)),r.attachCustomKeyEventHandler(e=>(e.stopPropagation(),e.preventDefault(),Object(f.a)(e.ctrlKey)&&Object(f.a)(e.shiftKey)&&67===e.keyCode?navigator.clipboard.writeText(r.getSelection()):Object(f.a)(e.ctrlKey)&&Object(f.a)(e.shiftKey)&&86===e.keyCode?navigator.clipboard.readText().then(e=>s(e)):"Space"===e.code?s(e.key):void 0)))}render(){return n.a.createElement(m,null,n.a.createElement(g,{id:"xterm"}))}}var b=S,v=r(16),y=(r(57),r(9)),C=r.n(y),w=r(48),A={insert:"head",singleton:!1},O=(C()(w.a,A),w.a.locals,r(15)),k=r(7),E=r(34),x=r(33),R=r(3),j=function(e,t,r,s){return new(r||(r=Promise))((function(n,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}c((s=s.apply(e,t||[])).next())}))};const I=i.a.div`
display : inline-block;
padding : 0px 5px;
`,T=i.a.div`
background-color: darkgray;
padding: 5px;
font-size: 13px;
text-align: center;
`,P=i.a.label`
font-size : 15px;
margin-left: 30px;
`;class D extends n.a.Component{constructor(e){super(e),this.init=()=>{const e=null!=this.props.mpsServer?this.props.mpsServer.replace("http","ws"):"",t=null!=this.props.deviceId?this.props.deviceId:"";this.terminal=new a.a,this.redirector=new c.a(this.logger,c.b.SOL,new FileReader,t,16994,"","",0,0,e+"/relay"),this.dataProcessor=new u.a(this.terminal),this.terminal.onSend=this.redirector.send.bind(this.redirector),this.redirector.onNewState=this.terminal.StateChange.bind(this.terminal),this.redirector.onStateChanged=this.onTerminalStateChange.bind(this),this.redirector.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.dataProcessor.processDataToXterm=this.handleWriteToXterm.bind(this),this.dataProcessor.clearTerminal=this.handleClearTerminal.bind(this),this.term=new p.Terminal({cursorStyle:"block",fontWeight:"bold",rows:30,cols:100})},this.cleanUp=()=>{this.terminal=null,this.redirector=null,this.dataProcessor=null,this.term=null},this.handleWriteToXterm=e=>this.term.write(e),this.handleClearTerminal=()=>this.term.reset(),this.handleKeyPress=e=>this.terminal.TermSendKeys(e),this.handleKeyDownPress=e=>this.terminal.handleKeyDownEvents(e),this.startSOL=()=>{void 0!==this.redirector&&this.redirector.start(WebSocket)},this.stopSOL=()=>{void 0!==this.redirector&&this.redirector.stop(),this.handleClearTerminal(),this.cleanUp(),this.init()},this.handleSOLConnect=e=>{e.persist(),0===this.state.SOLstate?this.startSOL():this.stopSOL()},this.onTerminalStateChange=(e,t)=>this.setState({SOLstate:t}),this.handlePowerOptions=e=>j(this,void 0,void 0,(function*(){if(0===e.detail){const t=Object(v.b)(parseInt(e.target.value));3!==this.state.SOLstate||"8"!==e.target.value&&"5"!==e.target.value?Object(O.b)(this.props.deviceId,e.target.value,this.props.mpsServer,!0).then(e=>{const r=e.Body;void 0!==r&&"SUCCESS"===r.ReturnValueStr?this.setState({showSuccess:!0,type:"success",message:t+" success",isSelected:!this.state.isSelected}):this.setState({showSuccess:!0,type:"error",message:void 0!==r&&0!==r.ReturnValue?`${t} ${String(r.ReturnValueStr)}`:e.errorDescription||"Sorry! there was some technical difficulties",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}).catch(e=>{console.log(e),this.setState({showSuccess:!0,type:"error",message:Object(f.a)(e.ajaxError.response)&&String(e.ajaxError.response.error)||"Power Action Failed",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}):this.setState({showSuccess:!0,type:"warning",message:t+" not allowed while termina1 is connected",isSelected:!this.state.isSelected})}})),this.handleFeatureStatus=e=>{this.setState({solNotEnabled:e})},this.handlePowerStatus=e=>{this.setState({deviceOnSleep:e})},this.updatePowerStatus=()=>{this.setState({isPowerStateLoaded:!0})},this.getSOLState=()=>3===this.state.SOLstate?2:0,this.logger=new l.a(h.a.ERROR),this.state={isConnected:!1,SOLstate:0,powerState:0,showSuccess:!1,message:"",isSelected:!0,type:"",solNotEnabled:"",deviceOnSleep:"",isPowerStateLoaded:!1}}componentDidMount(){this.init()}render(){const{SOLstate:e,showSuccess:t,message:r,type:s,deviceOnSleep:a,solNotEnabled:o,isPowerStateLoaded:i}=this.state;return n.a.createElement(n.a.Fragment,null,"failed"===o&&"poweron"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.failedSolFetch"),type:"error"}):"","failed"===o&&"sleep"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.failedSolFetchAndNotPoweredUp"),type:"warning"}):"","failed"===o&&"failed"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.failedSolFetchAndFailedPowerFetch"),type:"error"}):"","notEnabled"===o&&"sleep"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.solNotEnabledAndNotPoweredUp"),type:"warning"}):"","notEnabled"===o&&"failed"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.solNotEnabledAndFailedPowerFetch"),type:"warning"}):"","enabled"===o&&"sleep"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.notPoweredUp"),type:"warning"}):"","enabled"===o&&"failed"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.failedPowerFetch"),type:"error"}):"","notEnabled"===o&&"poweron"===a?n.a.createElement(k.a,{message:Object(R.b)("amtFeatures.messages.solNotEnabled"),type:"warning"}):"",t&&n.a.createElement(k.a,{message:r,type:s}),n.a.createElement(T,null,n.a.createElement(I,null,n.a.createElement(P,null,i&&n.a.createElement(E.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,feature:"SOL",handleFeatureStatus:this.handleFeatureStatus,getConnectState:this.getSOLState}))),n.a.createElement(I,null,n.a.createElement("button",{onClick:this.handleSOLConnect},3===e?"Disconnect":"Connect")),n.a.createElement(I,null,n.a.createElement(P,null,"Power Status :"),n.a.createElement(x.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,handlePowerStatus:this.handlePowerStatus,updateParent:this.updatePowerStatus})),n.a.createElement(I,null,n.a.createElement(P,null,"Power Actions:"," "),n.a.createElement(d.a,{availableOptions:v.a,onChange:this.handlePowerOptions,isSelected:this.state.isSelected}))),3===e&&this.term&&n.a.createElement(b,{handleKeyPress:this.handleKeyPress,handleKeyDownPress:this.handleKeyDownPress,xterm:this.term}))}}},,,,,,function(e,t){e.exports=require("xterm/css/xterm.css")}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,