!function(t,e){for(var a in e)t[a]=e[a]}(exports,function(t){var e={};function a(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,a),o.l=!0,o.exports}return a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)a.d(s,o,function(e){return t[e]}.bind(null,o));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=49)}([function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(1);class o{static ReadShort(t,e){return(t.charCodeAt(e)<<8)+t.charCodeAt(e+1)}static ReadShortX(t,e){return(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ReadInt(t,e){return 16777216*t.charCodeAt(e)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadSInt(t,e){return(t.charCodeAt(e)<<24)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadIntX(t,e){return 16777216*t.charCodeAt(e+3)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ShortToStr(t){return String.fromCharCode(t>>8&255,255&t)}static ShortToStrX(t){return String.fromCharCode(255&t,t>>8&255)}static IntToStr(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)}static IntToStrX(t){return String.fromCharCode(255&t,t>>8&255,t>>16&255,t>>24&255)}static MakeToArray(t){return t&&null!=t&&"object"!=typeof t?[t]:t}static SplitArray(t){return t.split(",")}static Clone(t){return JSON.parse(JSON.stringify(t))}static EscapeHtml(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof t||"number"==typeof t?t:void 0}static ArrayElementMove(t,e,a){t.splice(a,0,t.splice(e,1)[0])}static ObjectToStringEx(t,e){let a="";if(0!==t&&(!Object(s.a)(t)||null==t))return"(Null)";if(t instanceof Array)for(var o in t)a+="<br />"+this.gap(e)+"Item #"+o+": "+this.ObjectToStringEx(t[o],e+1);else if(t instanceof Object)for(var i in t)a+="<br />"+this.gap(e)+i+" = "+this.ObjectToStringEx(t[i],e+1);else a+=this.EscapeHtml(t);return a}static ObjectToStringEx2(t,e){let a="";if(0!==t&&(!Object(s.a)(t)||null==t))return"(Null)";if(t instanceof Array)for(var o in t)a+="\r\n"+this.gap2(e)+"Item #"+o+": "+this.ObjectToStringEx2(t[o],e+1);else if(t instanceof Object)for(var i in t)a+="\r\n"+this.gap2(e)+i+" = "+this.ObjectToStringEx2(t[i],e+1);else a+=this.EscapeHtml(t);return a}static gap(t){let e="";for(let a=0;a<4*t;a++)e+="&nbsp;";return e}static gap2(t){let e="";for(let a=0;a<4*t;a++)e+=" ";return e}static ObjectToString(t){return this.ObjectToStringEx(t,0)}static ObjectToString2(t){return this.ObjectToStringEx2(t,0)}static hex2rstr(t){if("string"!=typeof t||0===t.length)return"";let e="";const a=(""+t).match(/../g);let s;for(;s=a.shift();)e+=String.fromCharCode(Number("0x"+s));return e}static char2hex(t){return(t+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(t){let e,a="";for(e=0;e<t.length;e++)a+=this.char2hex(t.charCodeAt(e));return a}static encode_utf8(t){return unescape(encodeURIComponent(t))}static decode_utf8(t){return decodeURIComponent(escape(t))}static data2blob(t){const e=new Array(t.length);for(let a=0;a<t.length;a++)e[a]=t.charCodeAt(a);return new Blob([new Uint8Array(e)])}static random(t){return Math.floor(Math.random()*t)}static trademarks(t){return t.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));const s=t=>null!=t&&""!==t&&!1!==t&&0!==t},,function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{static putImage(t,e,a){if(t.holding)return;const o=s.arotX(t,e,a);a=s.arotY(t,e,a),e=o,t.canvasCtx.putImageData(t.spare,e,a)}static setPixel(t,e,a){let o,i,r=4*a;t.rotation>0&&(1===t.rotation?(o=a%t.sparew,i=Math.floor(a/t.sparew),r=4*(a=o*t.sparew2+(t.sparew2-1-i))):2===t.rotation?r=t.sparew*t.spareh*4-4-r:3===t.rotation&&(o=a%t.sparew,i=Math.floor(a/t.sparew),r=4*(a=(t.sparew2-1-o)*t.sparew2+i))),1===t.bpp?(t.spare.data[r++]=224&e,t.spare.data[r++]=(28&e)<<3,t.spare.data[r++]=s.fixColor((3&e)<<6)):(t.spare.data[r++]=e>>8&248,t.spare.data[r++]=e>>3&252,t.spare.data[r++]=(31&e)<<3),t.spare.data[r]=255}static arotX(t,e,a){return 0===t.rotation?e:1===t.rotation?t.canvasCtx.canvas.width-t.sparew2-a:2===t.rotation?t.canvasCtx.canvas.width-t.sparew2-e:3===t.rotation?a:0}static arotY(t,e,a){return 0===t.rotation?a:1===t.rotation?e:2===t.rotation?t.canvasCtx.canvas.height-t.spareh2-a:3===t.rotation?t.canvasCtx.canvas.height-t.spareh-e:0}static crotX(t,e,a){return 0===t.rotation?e:1===t.rotation?a:2===t.rotation?t.canvasCtx.canvas.width-e:3===t.rotation?t.canvasCtx.canvas.height-a:0}static crotY(t,e,a){return 0===t.rotation?a:1===t.rotation?t.canvasCtx.canvas.width-e:2===t.rotation?t.canvasCtx.canvas.height-a:3===t.rotation?e:0}static rotX(t,e,a){return 0===t.rotation||1===t.rotation?e:2===t.rotation?e-t.canvasCtx.canvas.width:3===t.rotation?e-t.canvasCtx.canvas.height:0}static rotY(t,e,a){return 0===t.rotation?a:1===t.rotation?a-t.canvasCtx.canvas.width:2===t.rotation?a-t.canvasCtx.canvas.height:3===t.rotation?a:0}static setRotation(t,e){for(;e<0;)e+=4;const a=e%4;if(t.holding)return t.rotation=a,!1;if(a===t.rotation)return!0;let o=t.canvasCtx.canvas.width,i=t.canvasCtx.canvas.height;1!==t.rotation&&3!==t.rotation||(o=t.canvasCtx.canvas.height,i=t.canvasCtx.canvas.width),null==t.tcanvas&&(t.tcanvas=document.createElement("canvas"));const r=t.tcanvas.getContext("2d");return r.setTransform(1,0,0,1,0,0),r.canvas.width=o,r.canvas.height=i,r.rotate(-90*t.rotation*Math.PI/180),0===t.rotation&&r.drawImage(t.canvasCtx.canvas,0,0),1===t.rotation&&r.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,0),2===t.rotation&&r.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,-t.canvasCtx.canvas.height),3===t.rotation&&r.drawImage(t.canvasCtx.canvas,0,-t.canvasCtx.canvas.height),0!==t.rotation&&2!==t.rotation||(t.canvasCtx.canvas.height=o,t.canvasCtx.canvas.width=i),1!==t.rotation&&3!==t.rotation||(t.canvasCtx.canvas.height=i,t.canvasCtx.canvas.width=o),t.canvasCtx.setTransform(1,0,0,1,0,0),t.canvasCtx.rotate(90*a*Math.PI/180),t.rotation=a,t.canvasCtx.drawImage(t.tcanvas,s.rotX(t,0,0),s.rotY(t,0,0)),t.width=t.canvasCtx.canvas.width,t.height=t.canvasCtx.canvas.height,null!=t.onScreenResize&&t.onScreenResize(t.width,t.height,t.canvasId),!0}static fixColor(t){return t>127?t+32:t}}},function(t,e,a){"use strict";var s;a.d(e,"a",(function(){return s})),function(t){t[t.VERBOSE=5]="VERBOSE",t[t.INFO=4]="INFO",t[t.DEBUG=3]="DEBUG",t[t.WARNING=2]="WARNING",t[t.ERROR=1]="ERROR"}(s||(s={}))},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(0),o=a(1);class i{static sendRefresh(t,e){if(!t.holding)if(t.focusMode>0){const a=2*t.focusMode;e.send(String.fromCharCode(3,1)+s.a.ShortToStr(Math.max(Math.min(t.oldMouseX,t.lastMouseX)-t.focusMode,0))+s.a.ShortToStr(Math.max(Math.min(t.oldMouseY,t.lastMouseY)-t.focusMode,0))+s.a.ShortToStr(a+Math.abs(t.oldMouseX-t.lastMouseX))+s.a.ShortToStr(a+Math.abs(t.oldMouseY-t.lastMouseY))),t.oldMouseX=t.lastMouseX,t.oldMouseY=t.lastMouseY}else e.send(String.fromCharCode(3,1,0,0,0,0)+s.a.ShortToStr(t.rwidth)+s.a.ShortToStr(t.rheight))}static sendKey(t,e,a){if("object"==typeof e)for(const a in e)i.sendKey(t,e[a][0],e[a][1]);else t.send(String.fromCharCode(4,a,0,0)+s.a.IntToStr(e))}static sendKvmData(t,e,a){!0!==t.onKvmDataAck?t.onKvmDataPending.push(a):(Object(o.a)(t.urlvars)&&Object(o.a)(t.urlvars.kvmdatatrace)&&console.log(`KVM-Send(${String(a.length)}): ${String(a)}`),a="\0KvmDataChannel\0"+a,e.send(`${String.fromCharCode(6,0,0,0)}${s.a.IntToStr(a.length)}${String(a)}`),t.onKvmDataAck=!1)}static sendKeepAlive(t,e){t.lastKeepAlive<Date.now()-5e3&&(t.lastKeepAlive=Date.now(),e.send(String.fromCharCode(6,0,0,0)+s.a.IntToStr(16)+"\0KvmDataChannel\0"))}static sendCtrlAltDelMsg(t){i.sendCad(t)}static sendCad(t){i.sendKey(t,65507,1),i.sendKey(t,65513,1),i.sendKey(t,65535,1),i.sendKey(t,65535,0),i.sendKey(t,65513,0),i.sendKey(t,65507,0)}}},,,,function(t,e,a){"use strict";a.d(e,"b",(function(){return s})),a.d(e,"a",(function(){return l}));var s,o=a(0),i=a(13),r=a.n(i),n=a(1);!function(t){t[t.SOL=1]="SOL",t[t.KVM=2]="KVM",t[t.IDER=3]="IDER"}(s||(s={}));class l{constructor(t,e,a,s,o,i,r,n,l,h){this.fileReader=a,this.randomNonceChars="abcdef0123456789",this.host=s,this.port=o,this.user=i,this.pass=r,this.tls=n,this.tlsv1only=l,this.protocol=e,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=h,this.amtAccumulator="",this.authUri="",this.logger=t}getWsLocation(){return this.isBrowser()&&!Object(n.a)(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const t="undefined"!=typeof window;return t&&this.logger.debug("!!!!!BROWSER!!!!!"),t}catch(t){return!1}}start(t){this.connectState=0,this.socket=new t(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);const e=t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))},a=t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())};Object(n.a)(this.fileReader)&&Object(n.a)(this.fileReader.readAsBinaryString)?this.fileReader.onload=e.bind(this):Object(n.a)(this.fileReader)&&Object(n.a)(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=a.bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){Object(n.a)(this.urlvars)&&Object(n.a)(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info("Start Redirect Session for protocol. "+this.protocol),this.protocol===s.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===s.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===s.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(t){try{if(this.inDataCount++,"object"==typeof t.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(t.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([t.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(t.data);else{let e="";const a=new Uint8Array(t.data),s=a.byteLength;for(let t=0;t<s;t++)e+=String.fromCharCode(a[t]);this.onSocketData(e)}}else this.onSocketData(t.data)}catch(t){this.logger.error(t),this.stop(),this.onError()}}onSocketData(t){if(Object(n.a)(t)&&-1!==this.connectState){if("object"==typeof t){let e="";const a=new Uint8Array(t),s=a.byteLength;for(let t=0;t<s;t++)e+=String.fromCharCode(a[t]);t=e}else if("string"!=typeof t)return;if((this.protocol===s.KVM||this.protocol===s.IDER)&&1===this.connectState)return this.onProcessData(t);for(this.amtAccumulator+=t;this.amtAccumulator.length>=1;){let t=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose("Start Redirection Session reply received for  "+this.protocol),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const e=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+e)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),t=13+e;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const e=o.a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+e)return;const a=this.amtAccumulator.charCodeAt(1),s=this.amtAccumulator.charCodeAt(4),i=[];for(let t=0;t<e;t++)i.push(this.amtAccumulator.charCodeAt(9+t));const r=this.amtAccumulator.substring(9,9+e);if(t=9+e,0===s)Object(n.a)(i.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+o.a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):Object(n.a)(i.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+o.a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):Object(n.a)(i.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+o.a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==s&&4!==s||1!==a)if(0===a){if(1===this.protocol){const t=1e4,e=100,a=0,s=1e4,i=100,r=0;this.socketSend(String.fromCharCode(32,0,0,0)+o.a.IntToStrX(this.amtSequence++)+o.a.ShortToStrX(t)+o.a.ShortToStrX(e)+o.a.ShortToStrX(a)+o.a.ShortToStrX(s)+o.a.ShortToStrX(i)+o.a.ShortToStrX(r)+o.a.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let t=0;const e=r.charCodeAt(t),a=r.substring(t+1,t+1+e);t+=e+1;const i=r.charCodeAt(t),n=r.substring(t+1,t+1+i);t+=i+1;let l=0,h=null;const c=this.generateRandomNonce(32),p="00000002";let d="";4===s&&(l=r.charCodeAt(t),h=r.substring(t+1,t+1+l),t+=l+1,d=`${p}:${c}:${String(h)} :`);const v=this.hex_md5(this.hex_md5(this.user+":"+a+":"+this.pass)+":"+n+":"+d+this.hex_md5("POST:"+this.authUri));let b=this.user.length+a.length+n.length+this.authUri.length+c.length+p.length+v.length+7;4===s&&(b+=parseInt(h.length)+1);let u=String.fromCharCode(19,0,0,0,s)+o.a.IntToStrX(b)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(a.length)+a+String.fromCharCode(n.length)+n+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(c.length)+c+String.fromCharCode(p.length)+p+String.fromCharCode(v.length)+v;4===s&&(u+=String.fromCharCode(h.length)+h),this.socketSend(u)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),t=23,this.socketSend(String.fromCharCode(39,0,0,0)+o.a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),t=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const e=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<e)break;this.onProcessData(this.amtAccumulator.substring(10,e)),t=e;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),t=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),t=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===t)return;this.amtAccumulator=this.amtAccumulator.substring(t)}}}hex_md5(t){return this.logger.verbose("MD5 the string"),r()(t)}socketSend(t){Object(n.a)(this.urlvars)&&Object(n.a)(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${t.length}): ${o.a.rstr2hex(t)}`);try{if(null!=this.socket&&1===this.socket.readyState){const e=new Uint8Array(t.length);this.logger.verbose(`Redir Send( ${t.length}): ${o.a.rstr2hex(t)}`);for(let a=0;a<t.length;++a)e[a]=t.charCodeAt(a);this.socket.send(e.buffer)}}catch(t){this.logger.error("Socket send error: "+String(t))}}send(t){this.logger.verbose("Send called "+t),null!=this.socket&&1===this.connectState&&(this.protocol===s.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+o.a.IntToStrX(this.amtSequence++)+o.a.ShortToStrX(t.length)+t):this.socketSend(t))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+o.a.IntToStrX(this.amtSequence++))}generateRandomNonce(t){let e="";for(let a=0;a<t;a++)e+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return e}onSocketClosed(t){Object(n.a)(this.urlvars)&&Object(n.a)(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(t){console.info("onstatechange",t),this.state!==t&&(this.state=t,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},,,function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(4);class o{constructor(t){this.minLevel=t}log(t,e){switch(t){case s.a.VERBOSE:this.verbose(e);break;case s.a.INFO:this.info(e);break;case s.a.DEBUG:this.debug(e);break;case s.a.WARNING:this.warn(e);break;case s.a.ERROR:this.error(e)}}debug(t){this.minLevel>=s.a.DEBUG&&console.debug(t)}info(t){this.minLevel>=s.a.INFO&&console.info(t)}error(t){this.minLevel>=s.a.ERROR&&console.error(t)}warn(t){this.minLevel>=s.a.WARNING&&console.warn(t)}verbose(t){this.minLevel>=s.a.VERBOSE&&console.log(t)}}},function(t,e){t.exports=require("md5")},function(t,e,a){"use strict";a.d(e,"a",(function(){return n}));var s=a(0),o=a(3),i=a(5),r=a(1);class n{constructor(t,e,a,s){this.wsSocket=t,this.parent=e,this.rleDecoder=a,this.updateRFBState=s}processState(t){let e=0;if(t.length>=12){const a=s.a.ReadShort(t,0),n=s.a.ReadShort(t,2),l=s.a.ReadShort(t,4),h=s.a.ReadShort(t,6),c=l*h,p=s.a.ReadInt(t,8);if(p<17){if(l<1||l>64||h<1||h>64)throw this.parent.logger.error(`Invalid tile size (${l},${h}), disconnecting.`),new Error("Invalid tile size");if(this.parent.sparew!==l||this.parent.spareh!==h){this.parent.sparew=this.parent.sparew2=l,this.parent.spareh=this.parent.spareh2=h,1!==this.parent.rotation&&3!==this.parent.rotation||(this.parent.sparew2=h,this.parent.spareh2=l);const t=`${this.parent.sparew2}x${this.parent.spareh2}`;this.parent.spare=this.parent.sparecache[t],Object(r.a)(this.parent.spare)||(this.parent.sparecache[t]=this.parent.spare=this.parent.canvasCtx.createImageData(this.parent.sparew2,this.parent.spareh2))}}if(4294967073===p)this.parent.logger.verbose("Desktop size"),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=l,this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=h,this.wsSocket.send(String.fromCharCode(3,0,0,0,0,0)+s.a.ShortToStr(this.parent.width)+s.a.ShortToStr(this.parent.height)),e=12,null!=this.parent.onScreenSizeChange&&this.parent.onScreenSizeChange(this.parent.ScreenWidth,this.parent.ScreenHeight);else if(0===p){let s=12;const i=12+c*this.parent.bpp;if(t.length<i)return 0;e=i;for(let e=0;e<c;e++)o.a.setPixel(this.parent,t.charCodeAt(s++)+(2===this.parent.bpp?t.charCodeAt(s++)<<8:0),e);o.a.putImage(this.parent,a,n)}else{if(16!==p)throw this.parent.logger.error(`Unknown Encoding: ${p} , HEX: ${s.a.rstr2hex(t)}`),new Error("Unknown Encoding: "+p);{if(t.length<16)return 0;const o=s.a.ReadInt(t,12);if(t.length<16+o)return 0;const i=16,r=5,p=0;if(o>5&&0===t.charCodeAt(i)&&s.a.ReadShortX(t,i+1)===o-r)this.rleDecoder.Decode(t,i+5,a,n,l,h,c,o);else{const e=t.substring(i,i+o-p),s=this.parent.inflate.inflate(e);if(!(s.length>0))throw this.parent.logger.error("Invalid deflate data."),new Error("invalid deflate data");this.rleDecoder.Decode(s,0,a,n,l,h,c,s.length)}e=16+o}}if(100==--this.parent.state){this.parent.logger.debug("Frame completed. Update state and request new frame"),this.updateRFBState(4);const t=()=>i.a.sendRefresh(this.parent,this.wsSocket);0===this.parent.frameRateDelay?i.a.sendRefresh(this.parent,this.wsSocket):setTimeout(t,this.parent.frameRateDelay)}}return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=12?(e=12,this.updateRFBState(1),this.wsSocket.send("RFB 003.008\n"),e):0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(0);class o{constructor(t,e,a){this.wsSocket=t,this.serverCutTextHandler=e,this.updateRFBState=a}processState(t){let e=0;switch(t.charCodeAt(0)){case 0:if(t.length<4)return 0;this.updateRFBState(100+s.a.ReadShort(t,2)),e=4;break;case 2:e=1;break;case 3:if(t.length<8)return 0;var a=s.a.ReadInt(t,4)+8;if(t.length<a)return 0;e=this.serverCutTextHandler.handleServerCutText(t)}return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=1?(e=t.charCodeAt(0)+1,this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(2),e):0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(0);class o{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;if(t.length>=4){if(e=4,0!==s.a.ReadInt(t,0))throw new Error("Error. Stopping. Security response not None.");return this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(3),e}return 0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(0),o=a(5);class i{constructor(t,e,a){this.wsSocket=t,this.parent=e,this.updateRFBState=a}processState(t){let e=0;if(t.length>=24){this.parent.rotation=0;const a=s.a.ReadInt(t,20);if(t.length<24+a)return 0;e=24+a,null!=this.parent.updateScreenDimensions&&this.parent.updateScreenDimensions(s.a.ReadShort(t,0),s.a.ReadShort(t,2)),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=s.a.ReadShort(t,0),this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=s.a.ReadShort(t,2);let i="";return this.parent.useZRLE&&(i+=s.a.IntToStr(16)),i+=s.a.IntToStr(0),i+=s.a.IntToStr(1092),this.parent.logger.verbose("Send supported encodings"),this.wsSocket.send(String.fromCharCode(2,0)+s.a.ShortToStr(i.length/4+1)+i+s.a.IntToStr(-223)),1===this.parent.bpp&&this.wsSocket.send(String.fromCharCode(0,0,0,0,8,8,0,1)+s.a.ShortToStr(7)+s.a.ShortToStr(7)+s.a.ShortToStr(3)+String.fromCharCode(5,2,0,0,0,0)),this.updateRFBState(4),this.parent.onStateChange(3),this.parent.logger.info("Start new frame."),o.a.sendRefresh(this.parent,this.wsSocket),this.parent.oldMouseX=-1,e}return 0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(0),o=a(1);class i{constructor(t,e){this.wsSocket=t,this.parent=e}handleServerCutText(t){if(t.length<8)return 0;const e=s.a.ReadInt(t,4)+8;if(t.length<e)return 0;if(null!=this.parent.onKvmData){const a=t.substring(8,e);a.length>=16&&"\0KvmDataChannel"===a.substring(0,15)&&(this.parent.kvmDataSupported||(this.parent.kvmDataSupported=!0,console.log("KVM Data Channel Supported.")),(-1===this.parent.onKvmDataAck&&16===a.length||0!==a.charCodeAt(15))&&(this.parent.onKvmDataAck=!0),Object(o.a)(this.parent.urlvars)&&Object(o.a)(this.parent.urlvars.kvmdatatrace)&&console.log(`KVM-Recv((${a.length-16})):  ${a.substring(16)}`),a.length>16&&this.parent.onKvmData(a.substring(16)),!0===this.parent.onKvmDataAck&&this.parent.onKvmDataPending.length>0&&this.wsSocket.onSendKvmData(this.parent.onKvmDataPending.shift()))}return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(3);class o{constructor(t){this.parent=t}Decode(t,e,a,o,i,r,n,l){const h=t.charCodeAt(e++);let c,p,d;const v={};let b,u=0,f=0;if(0===h){for(this.parent.logger.verbose("Raw encoding"),b=0;b<n;b++)s.a.setPixel(this.parent,t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),b);s.a.putImage(this.parent,a,o)}else if(1===h){p=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),this.parent.canvasCtx.fillStyle="rgb("+(1===this.parent.bpp?`${224&p}, ${(28&p)<<3}, ${s.a.fixColor((3&p)<<6)}`:`${p>>8&248}, ${p>>3&252},${(31&p)<<3}`)+")",this.parent.logger.verbose("fillstyle: "+this.parent.canvasCtx.fillStyle);const n=s.a.rotX(this.parent,a,o);o=s.a.rotY(this.parent,a,o),a=n,this.parent.canvasCtx.fillRect(a,o,i,r)}else if(h>1&&h<17){this.parent.logger.verbose("Read the packed palette");let i=4,r=15;for(b=0;b<h;b++)v[b]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(2===h?(i=1,r=1):h<=4&&(i=2,r=3);u<n&&e<t.length;)for(p=t.charCodeAt(e++),b=8-i;b>=0;b-=i)s.a.setPixel(this.parent,v[p>>b&r],u++);s.a.putImage(this.parent,a,o)}else if(128===h){for(this.parent.logger.verbose("RLE encoded tile");u<n&&e<t.length;){p=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),f=1;do{f+=d=t.charCodeAt(e++)}while(255===d);for(;--f>=0;)s.a.setPixel(this.parent,p,u++)}s.a.putImage(this.parent,a,o)}else if(h>129){for(this.parent.logger.verbose("Read the RLE palette"),b=0;b<h-128;b++)v[b]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(this.parent.logger.verbose("Decode RLE on palette");u<n&&e<t.length;){if(f=1,c=t.charCodeAt(e++),p=v[c%128],c>127)do{f+=d=t.charCodeAt(e++)}while(255===d);for(;--f>=0;)s.a.setPixel(this.parent,p,u++)}s.a.putImage(this.parent,a,o)}}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{processData(t){}onStateChange(t){}start(){}onSendKvmData(t){}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return p}));var s=a(14),o=a(15),i=a(16),r=a(17),n=a(18),l=a(19),h=a(20),c=a(21);class p{constructor(t,e,a){this.stateProcessors={},this.stateProcessors[0]=new o.a(t,a),this.stateProcessors[1]=new r.a(t,a),this.stateProcessors[2]=new n.a(t,a),this.stateProcessors[3]=new l.a(t,e,a);const p=new h.a(t,e);this.stateProcessors[4]=new i.a(t,p,a),this.stateProcessors["100plus"]=new s.a(t,e,new c.a(e),a)}getProcessor(t){return t<=100?this.stateProcessors[t]:this.stateProcessors["100plus"]}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s={Pause:19,CapsLock:20,Space:32,Quote:39,Minus:45,NumpadMultiply:42,NumpadAdd:43,PrintScreen:44,Comma:44,NumpadSubtract:45,NumpadDecimal:46,Period:46,Slash:47,NumpadDivide:47,Semicolon:59,Equal:61,OSLeft:91,BracketLeft:91,OSRight:91,Backslash:92,BracketRight:93,ContextMenu:93,Backquote:96,NumLock:144,ScrollLock:145,Backspace:65288,Tab:65289,Enter:65293,NumpadEnter:65293,Escape:65307,Delete:65535,Home:65360,PageUp:65365,PageDown:65366,ArrowLeft:65361,ArrowUp:65362,ArrowRight:65363,ArrowDown:65364,End:65367,Insert:65379,F1:65470,F2:65471,F3:65472,F4:65473,F5:65474,F6:65475,F7:65476,F8:65477,F9:65478,F10:65479,F11:65480,F12:65481,ShiftLeft:65505,ShiftRight:65506,ControlLeft:65507,ControlRight:65508,AltLeft:65513,AltRight:65514,MetaLeft:65511,MetaRight:65512},o=a(1);class i{static convertAMTKeyCode(t){return Object(o.a)(t.code.startsWith("Key"))&&4===t.code.length?t.code.charCodeAt(3)+(!1===t.shiftKey?32:0):Object(o.a)(t.code.startsWith("Digit"))&&6===t.code.length?t.code.charCodeAt(5):Object(o.a)(t.code.startsWith("Numpad"))&&7===t.code.length?t.code.charCodeAt(6):s[t.code]}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(23),o=a(1);class i{constructor(t,e,a){this.acc="",this.stateProcessorFac=new s.a(e,a,this.updateRFBState.bind(this)),this.parent=a,this.logger=t}processData(t){if(!Object(o.a)(t))return;this.acc+=t;let e=0;for(this.logger.verbose("Process Data ACC length:  "+this.acc.length);this.acc.length>0;){const t=this.stateProcessorFac.getProcessor(this.parent.state),a=this.parent.state;if(e=t.processState(this.acc),this.logger.verbose(`State  ${a}  Processed. cmdSize returned ${e}`),0===e)return;this.acc=this.acc.substring(e),this.logger.verbose(`remaining acc  ${this.acc.length} command size: ${e} new parent state: ${this.parent.state}`)}}updateRFBState(t){this.parent.state=t}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(9);class o extends s.a{constructor(t,e,a,s,o,i,r,n,l,h){super(t,e,a,s,o,i,r,n,l,h)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return l}));var s=a(22),o=a(0),i=a(1),r=a(32),n=a.n(r);class l extends s.a{constructor(t,e){super(),this.protocol=2,this.inflate=n.a.inflateInit(15),this.bpp=1,this.state=0,this.focusMode=0,this.useZRLE=!0,this.frameRateDelay=2,this.canvasCtx=e,this.sparecache={},this.buttonmask=0,this.canvasControl=this.canvasCtx.canvas,this.lastMouseMoveTime=(new Date).getTime(),this.logger=t,this.setDeskFocus=(t,e)=>{},this.getDeskFocus=t=>{}}processData(t){this.onProcessData(t)}onStateChange(t){this.logger.verbose("state change in AMTDesktop: "+t),0===t&&(this.canvasCtx.fillStyle="#FFFFFF",this.canvasCtx.fillRect(0,0,this.canvasCtx.canvas.width,this.canvasCtx.canvas.width))}start(){this.logger.verbose("Starting desktop here"),this.state=0,this.inflate.inflateReset(),this.onKvmDataPending=[],this.onKvmDataAck=-1,this.kvmDataSupported=!1;for(const t in this.sparecache)delete this.sparecache[t]}onSendKvmData(t){!0!==this.onKvmDataAck?this.onKvmDataPending.push(t):(Object(i.a)(this.urlvars)&&Object(i.a)(this.urlvars.kvmdatatrace)&&console.log(`KVM-Send (${t.length}) data`),t="\0KvmDataChannel\0"+t,this.onSend(String.fromCharCode(6,0,0,0)+o.a.IntToStr(t.length)+t),this.onKvmDataAck=!1)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return r}));var s=a(0),o=a(3),i=a(1);class r{constructor(t,e,a){this.parent=t,this.comm=e,this.debounceTime=a,this.mouseClickCompleted=!0,this.lastEvent=null}GrabMouseInput(){this.MouseInputGrab||(this.MouseInputGrab=!0)}UnGrabMouseInput(){if(!this.MouseInputGrab)return;const t=this.parent.canvasCtx.canvas;t.onmousemove=null,t.onmouseup=null,t.onmousedown=null,this.MouseInputGrab=!1}mousedown(t){return this.parent.buttonmask|=1<<t.button,this.mousemove(t)}mouseup(t){return this.parent.buttonmask&=65535-(1<<t.button),this.mousemove(t)}mousemove(t){if(4!==this.parent.state)return!0;const e=this.getPositionOfControl(this.parent.canvasControl);if(this.parent.lastMouseX=(t.pageX-e[0])*(this.parent.canvasControl.height/this.parent.canvasControl.offsetHeight),this.parent.lastMouseY=(t.pageY-e[1]+(Object(i.a)(this.parent.scrolldiv)?this.parent.scrolldiv.scrollTop:0))*(this.parent.canvasControl.width/this.parent.canvasControl.offsetWidth),Object(i.a)(this.parent.noMouseRotate)||(this.parent.lastMouseX2=o.a.crotX(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseY=o.a.crotY(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseX=this.parent.lastMouseX2),this.comm.send(String.fromCharCode(5,this.parent.buttonmask)+s.a.ShortToStr(this.parent.lastMouseX)+s.a.ShortToStr(this.parent.lastMouseY)),this.parent.setDeskFocus("DeskFocus",this.parent.focusMode),0!==this.parent.focusMode){const t=Math.min(this.parent.lastMouseX,this.parent.canvasControl.width-this.parent.focusMode),a=Math.min(this.parent.lastMouseY,this.parent.canvasControl.height-this.parent.focusMode),s=2*this.parent.focusMode,o=this.parent.canvasControl,i=o.offsetHeight/this.parent.canvasControl.height,r=o.offsetWidth/this.parent.canvasControl.width,n=this.parent.getDeskFocus("DeskFocus"),l=this.getPositionOfControl(this.parent.canvasControl.parentElement);n.left=Math.max((t-this.parent.focusMode)*i,0)+(e[0]-l[0])+"px",n.top=Math.max((a-this.parent.focusMode)*r,0)+(e[1]-l[1])+"px",n.width=s*i-6+"px",n.height=s*i-6+"px"}return this.haltEvent(t)}haltEvent(t){return Object(i.a)(t.preventDefault)&&t.preventDefault(),Object(i.a)(t.stopPropagation)&&t.stopPropagation(),!1}getPositionOfControl(t){const e=Array(2);e[0]=e[1]=0;let a=t;for(;null!=a;)e[0]+=a.offsetLeft,e[1]+=a.offsetTop,a=a.offsetParent;return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return n}));var s,o=a(24),i=a(5),r=a(1);!function(t){t[t.Up=0]="Up",t[t.Down=1]="Down"}(s||(s={}));class n{constructor(t,e){this.Comms=e,this.parent=t}GrabKeyInput(){this.KeyInputGrab||(document.onkeyup=this.handleKeyUp.bind(this),document.onkeydown=this.handleKeyDown.bind(this),document.onkeypress=this.handleKeys.bind(this),this.KeyInputGrab=!0)}UnGrabKeyInput(){this.KeyInputGrab&&(document.onkeyup=null,document.onkeydown=null,document.onkeypress=null,this.KeyInputGrab=!1)}handleKeys(t){return this.haltEvent(t)}haltEvent(t){return Object(r.a)(t.preventDefault)&&t.preventDefault(),Object(r.a)(t.stopPropagation)&&t.stopPropagation(),!1}handleKeyUp(t){return this.handleKeyEvent(s.Up,t)}handleKeyDown(t){return this.handleKeyEvent(s.Down,t)}handleKeyEvent(t,e){let a=e;if(Object(r.a)(a)||(a=window.event),Object(r.a)(a.code)){const e=o.a.convertAMTKeyCode(a);this.parent.logger.verbose(`Key ${t} : ${String(e)}`),null!=e&&i.a.sendKey(this.Comms,e,t)}else{let e=a.keyCode;173===e&&(e=189),61===e&&(e=187);let s=e;!1===a.shiftKey&&e>=65&&e<=90&&(s=e+32),e>=112&&e<=124&&(s=e+65358),8===e&&(s=65288),9===e&&(s=65289),13===e&&(s=65293),16===e&&(s=65505),17===e&&(s=65507),18===e&&(s=65513),27===e&&(s=65307),33===e&&(s=65365),34===e&&(s=65366),35===e&&(s=65367),36===e&&(s=65360),37===e&&(s=65361),38===e&&(s=65362),39===e&&(s=65363),40===e&&(s=65364),45===e&&(s=65379),46===e&&(s=65535),e>=96&&e<=105&&(s=e-48),106===e&&(s=42),107===e&&(s=43),109===e&&(s=45),110===e&&(s=46),111===e&&(s=47),186===e&&(s=59),187===e&&(s=61),188===e&&(s=44),189===e&&(s=45),190===e&&(s=46),191===e&&(s=47),192===e&&(s=96),219===e&&(s=91),220===e&&(s=92),221===e&&(s=93),222===e&&(s=39),this.parent.logger.verbose(`Key ${t}: ${e}  = ${s}`),i.a.sendKey(this.Comms,s,t)}return this.haltEvent(a)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=t=>{},this.TermSendKeys=t=>this.onSend(t)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(t){this.processData=t=>{null!=this.terminal.capture&&(this.terminal.capture+=t);let e="";for(let a=0;a<t.length;a++){const s=t.charCodeAt(a);"J"===t[a]?this.clearTerminal():e+=0!=(128&s)?String.fromCharCode(this.terminal.AsciiToUnicode[127&s]):""+t[a]}this.processDataToXterm(e)},this.terminal=t}}},function(module,exports){var ZLIB=ZLIB||{},BASE;void 0===ZLIB.common_initialized&&(ZLIB.Z_NO_FLUSH=0,ZLIB.Z_PARTIAL_FLUSH=1,ZLIB.Z_SYNC_FLUSH=2,ZLIB.Z_FULL_FLUSH=3,ZLIB.Z_FINISH=4,ZLIB.Z_BLOCK=5,ZLIB.Z_TREES=6,ZLIB.Z_OK=0,ZLIB.Z_STREAM_END=1,ZLIB.Z_NEED_DICT=2,ZLIB.Z_ERRNO=-1,ZLIB.Z_STREAM_ERROR=-2,ZLIB.Z_DATA_ERROR=-3,ZLIB.Z_MEM_ERROR=-4,ZLIB.Z_BUF_ERROR=-5,ZLIB.Z_VERSION_ERROR=-6,ZLIB.Z_DEFLATED=8,ZLIB.z_stream=function(){this.next_in=0,this.avail_in=0,this.total_in=0,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=null,this.state=null,this.data_type=0,this.adler=0,this.input_data="",this.output_data="",this.error=0,this.checksum_function=null},ZLIB.gz_header=function(){this.text=0,this.time=0,this.xflags=0,this.os=255,this.extra=null,this.extra_len=0,this.extra_max=0,this.name=null,this.name_max=0,this.comment=null,this.comm_max=0,this.hcrc=0,this.done=0},ZLIB.common_initialized=!0),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-inflate.js"),function(){var DEF_WBITS=15,HEAD=0,FLAGS=1,TIME=2,OS=3,EXLEN=4,EXTRA=5,NAME=6,COMMENT=7,HCRC=8,DICTID=9,DICT=10,TYPE=11,TYPEDO=12,STORED=13,COPY_=14,COPY=15,TABLE=16,LENLENS=17,CODELENS=18,LEN_=19,LEN=20,LENEXT=21,DIST=22,DISTEXT=23,MATCH=24,LIT=25,CHECK=26,LENGTH=27,DONE=28,BAD=29,MEM=30,SYNC=31,ENOUGH_LENS=852,ENOUGH_DISTS=592,ENOUGH=ENOUGH_LENS+ENOUGH_DISTS,CODES=0,LENS=1,DISTS=2,inflate_table_lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],inflate_table_lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,203,69],inflate_table_dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],inflate_table_dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function inflate_table(t,e){var a,s,o,i,r,n,l,h,c,p,d,v,b,u,f,g,S,m,C,E,A,I,T=t.next,B=e==DISTS?t.distbits:t.lenbits,k=t.work,R=t.lens,_=e==DISTS?t.nlen:0,w=t.codes;a=e==LENS?t.nlen:e==DISTS?t.ndist:19;var D=new Array(16),x=new Array(16);for(s=0;s<=15;s++)D[s]=0;for(o=0;o<a;o++)D[R[_+o]]++;for(n=B,r=15;r>=1&&0==D[r];r--);if(n>r&&(n=r),0==r)return g={op:64,bits:1,val:0},w[T++]=g,w[T++]=g,e==DISTS?t.distbits=1:t.lenbits=1,t.next=T,0;for(i=1;i<r&&0==D[i];i++);for(n<i&&(n=i),c=1,s=1;s<=15;s++)if(c<<=1,(c-=D[s])<0)return-1;if(c>0&&(e==CODES||1!=r))return t.next=T,-1;for(x[1]=0,s=1;s<15;s++)x[s+1]=x[s]+D[s];for(o=0;o<a;o++)0!=R[_+o]&&(k[x[R[_+o]]++]=o);switch(e){case CODES:m=E=k,C=0,A=0,I=19;break;case LENS:m=inflate_table_lbase,C=-257,E=inflate_table_lext,A=-257,I=256;break;default:m=inflate_table_dbase,E=inflate_table_dext,C=0,A=0,I=-1}if(d=0,o=0,s=i,S=T,l=n,h=0,u=-1,f=(p=1<<n)-1,e==LENS&&p>=ENOUGH_LENS||e==DISTS&&p>=ENOUGH_DISTS)return t.next=T,1;for(;;){g={op:0,bits:s-h,val:0},k[o]<I?g.val=k[o]:k[o]>I?(g.op=E[A+k[o]],g.val=m[C+k[o]]):g.op=96,v=1<<s-h,i=b=1<<l;do{w[S+(d>>>h)+(b-=v)]=g}while(0!=b);for(v=1<<s-1;d&v;)v>>>=1;if(0!=v?(d&=v-1,d+=v):d=0,o++,0==--D[s]){if(s==r)break;s=R[_+k[o]]}if(s>n&&(d&f)!=u){for(0==h&&(h=n),S+=i,c=1<<(l=s-h);l+h<r&&!((c-=D[l+h])<=0);)l++,c<<=1;if(p+=1<<l,e==LENS&&p>=ENOUGH_LENS||e==DISTS&&p>=ENOUGH_DISTS)return t.next=T,1;w[T+(u=d&f)]={op:l,bits:n,val:S-T}}}return 0!=d&&(w[S+d]={op:64,bits:s-h,val:0}),t.next=T+p,e==DISTS?t.distbits=n:t.lenbits=n,0}function inflate_fast(t,e){var a,s,o,i,r,n,l,h,c,p,d,v,b,u,f,g,S,m,C,E,A,I,T=-1,B=-1;a=t.state,s=t.input_data,i=(o=t.next_in)+t.avail_in-5,n=(r=t.next_out)-(e-t.avail_out),l=r+(t.avail_out-257),h=a.wsize,c=a.whave,p=a.wnext,d=a.window,v=a.hold,b=a.bits,u=a.codes,f=a.lencode,g=a.distcode,S=(1<<a.lenbits)-1,m=(1<<a.distbits)-1;t:do{b<15&&(v+=(255&s.charCodeAt(o++))<<b,b+=8,v+=(255&s.charCodeAt(o++))<<b,b+=8),C=u[f+(v&S)];e:for(;;){if(v>>>=E=C.bits,b-=E,0==(E=C.op))t.output_data+=String.fromCharCode(C.val),r++;else{if(!(16&E)){if(0==(64&E)){C=u[f+(C.val+(v&(1<<E)-1))];continue e}if(32&E){a.mode=TYPE;break t}t.msg="invalid literal/length code",a.mode=BAD;break t}A=C.val,(E&=15)&&(b<E&&(v+=(255&s.charCodeAt(o++))<<b,b+=8),A+=v&(1<<E)-1,v>>>=E,b-=E),b<15&&(v+=(255&s.charCodeAt(o++))<<b,b+=8,v+=(255&s.charCodeAt(o++))<<b,b+=8),C=u[g+(v&m)];a:for(;;){if(v>>>=E=C.bits,b-=E,!(16&(E=C.op))){if(0==(64&E)){C=u[g+(C.val+(v&(1<<E)-1))];continue a}t.msg="invalid distance code",a.mode=BAD;break t}if(I=C.val,b<(E&=15)&&(v+=(255&s.charCodeAt(o++))<<b,(b+=8)<E&&(v+=(255&s.charCodeAt(o++))<<b,b+=8)),I+=v&(1<<E)-1,v>>>=E,b-=E,I>(E=r-n)){if((E=I-E)>c&&a.sane){t.msg="invalid distance too far back",a.mode=BAD;break t}T=0,B=-1,0==p?(T+=h-E,E<A&&(A-=E,t.output_data+=d.substring(T,T+E),r+=E,E=0,T=-1,B=r-I)):(T+=p-E,E<A&&(A-=E,t.output_data+=d.substring(T,T+E),T=-1,B=(r+=E)-I))}else T=-1,B=r-I;if(T>=0)t.output_data+=d.substring(T,T+A),r+=A,T+=A;else{var k=A;for(k>r-B&&(k=r-B),t.output_data+=t.output_data.substring(B,B+k),r+=k,B+=k,r+=A-=k;A>2;)t.output_data+=t.output_data.charAt(B++),t.output_data+=t.output_data.charAt(B++),t.output_data+=t.output_data.charAt(B++),A-=3;A&&(t.output_data+=t.output_data.charAt(B++),A>1&&(t.output_data+=t.output_data.charAt(B++)))}break a}}break e}}while(o<i&&r<l);o-=A=b>>>3,v&=(1<<(b-=A<<3))-1,t.next_in=o,t.next_out=r,t.avail_in=o<i?i-o+5:5-(o-i),t.avail_out=r<l?l-r+257:257-(r-l),a.hold=v,a.bits=b}function new_array(t){var e,a=new Array(t);for(e=0;e<t;e++)a[e]=0;return a}function getarg(t,e,a){return t&&e in t?t[e]:a}function checksum_none(){return 0}function inflate_state(){var t;this.mode=0,this.last=0,this.wrap=0,this.havedict=0,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=0,this.distcode=0,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=0,this.lens=new_array(320),this.work=new_array(288),this.codes=new Array(ENOUGH);var e={op:0,bits:0,val:0};for(t=0;t<ENOUGH;t++)this.codes[t]=e;this.sane=0,this.back=0,this.was=0}ZLIB.inflate_copyright=" inflate 1.2.6 Copyright 1995-2012 Mark Adler ",ZLIB.inflateResetKeep=function(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg=null,e.wrap&&(t.adler=1&e.wrap),e.mode=HEAD,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=0,e.distcode=0,e.next=0,e.sane=1,e.back=-1,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.inflateReset=function(t,e){var a,s;return t&&t.state?(s=t.state,void 0===e&&(e=DEF_WBITS),e<0?(a=0,e=-e):(a=1+(e>>>4),e<48&&(e&=15)),1==a&&"function"==typeof ZLIB.adler32?t.checksum_function=ZLIB.adler32:2==a&&"function"==typeof ZLIB.crc32?t.checksum_function=ZLIB.crc32:t.checksum_function=checksum_none,e&&(e<8||e>15)?ZLIB.Z_STREAM_ERROR:(s.window&&s.wbits!=e&&(s.window=null),s.wrap=a,s.wbits=e,s.wsize=0,s.whave=0,s.wnext=0,ZLIB.inflateResetKeep(t))):ZLIB.Z_STREAM_ERROR},ZLIB.inflateInit=function(t){var e=new ZLIB.z_stream;return e.state=new inflate_state,ZLIB.inflateReset(e,t),e},ZLIB.inflatePrime=function(t,e,a){var s;return t&&t.state?(s=t.state,e<0?(s.hold=0,s.bits=0,ZLIB.Z_OK):e>16||s.bits+e>32?ZLIB.Z_STREAM_ERROR:(a&=(1<<e)-1,s.hold+=a<<s.bits,s.bits+=e,ZLIB.Z_OK)):ZLIB.Z_STREAM_ERROR};var lenfix_ary=null,lenfix_def="([    {op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},{op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},    {op:0,bits:9,val:192},{op:16,bits:7,val:10},{op:0,bits:8,val:96},{op:0,bits:8,val:32},{op:0,bits:9,val:160},{op:0,bits:8,val:0},{op:0,bits:8,val:128},    {op:0,bits:8,val:64},{op:0,bits:9,val:224},{op:16,bits:7,val:6},{op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:144},{op:19,bits:7,val:59},    {op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:208},{op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:176},    {op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},{op:0,bits:9,val:240},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},    {op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},{op:0,bits:8,val:52},{op:0,bits:9,val:200},{op:17,bits:7,val:13},{op:0,bits:8,val:100},    {op:0,bits:8,val:36},{op:0,bits:9,val:168},{op:0,bits:8,val:4},{op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:232},{op:16,bits:7,val:8},    {op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:152},{op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:216},    {op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},{op:0,bits:9,val:184},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},    {op:0,bits:9,val:248},{op:16,bits:7,val:3},{op:0,bits:8,val:82},{op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},    {op:0,bits:8,val:50},{op:0,bits:9,val:196},{op:17,bits:7,val:11},{op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:164},{op:0,bits:8,val:2},    {op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:228},{op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:148},    {op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},{op:0,bits:9,val:212},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},    {op:0,bits:9,val:180},{op:0,bits:8,val:10},{op:0,bits:8,val:138},{op:0,bits:8,val:74},{op:0,bits:9,val:244},{op:16,bits:7,val:5},{op:0,bits:8,val:86},    {op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:204},{op:17,bits:7,val:15},    {op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:172},{op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:236},    {op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},{op:0,bits:9,val:156},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},    {op:0,bits:9,val:220},{op:18,bits:7,val:27},{op:0,bits:8,val:110},{op:0,bits:8,val:46},{op:0,bits:9,val:188},{op:0,bits:8,val:14},{op:0,bits:8,val:142},    {op:0,bits:8,val:78},{op:0,bits:9,val:252},{op:96,bits:7,val:0},{op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},    {op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:194},{op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:162},    {op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},{op:0,bits:9,val:226},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},    {op:0,bits:9,val:146},{op:19,bits:7,val:59},{op:0,bits:8,val:121},{op:0,bits:8,val:57},{op:0,bits:9,val:210},{op:17,bits:7,val:17},{op:0,bits:8,val:105},    {op:0,bits:8,val:41},{op:0,bits:9,val:178},{op:0,bits:8,val:9},{op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:242},{op:16,bits:7,val:4},    {op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},{op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:202},    {op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},{op:0,bits:9,val:170},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},    {op:0,bits:9,val:234},{op:16,bits:7,val:8},{op:0,bits:8,val:93},{op:0,bits:8,val:29},{op:0,bits:9,val:154},{op:20,bits:7,val:83},{op:0,bits:8,val:125},    {op:0,bits:8,val:61},{op:0,bits:9,val:218},{op:18,bits:7,val:23},{op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:186},{op:0,bits:8,val:13},    {op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:250},{op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},    {op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},{op:0,bits:9,val:198},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},    {op:0,bits:9,val:166},{op:0,bits:8,val:3},{op:0,bits:8,val:131},{op:0,bits:8,val:67},{op:0,bits:9,val:230},{op:16,bits:7,val:7},{op:0,bits:8,val:91},    {op:0,bits:8,val:27},{op:0,bits:9,val:150},{op:20,bits:7,val:67},{op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:214},{op:18,bits:7,val:19},    {op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:182},{op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:246},    {op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},    {op:0,bits:9,val:206},{op:17,bits:7,val:15},{op:0,bits:8,val:103},{op:0,bits:8,val:39},{op:0,bits:9,val:174},{op:0,bits:8,val:7},{op:0,bits:8,val:135},    {op:0,bits:8,val:71},{op:0,bits:9,val:238},{op:16,bits:7,val:9},{op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:158},{op:20,bits:7,val:99},    {op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:222},{op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:190},    {op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},{op:0,bits:9,val:254},{op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},    {op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},{op:0,bits:9,val:193},{op:16,bits:7,val:10},{op:0,bits:8,val:96},    {op:0,bits:8,val:32},{op:0,bits:9,val:161},{op:0,bits:8,val:0},{op:0,bits:8,val:128},{op:0,bits:8,val:64},{op:0,bits:9,val:225},{op:16,bits:7,val:6},    {op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:145},{op:19,bits:7,val:59},{op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:209},    {op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:177},{op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},    {op:0,bits:9,val:241},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},{op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},    {op:0,bits:8,val:52},{op:0,bits:9,val:201},{op:17,bits:7,val:13},{op:0,bits:8,val:100},{op:0,bits:8,val:36},{op:0,bits:9,val:169},{op:0,bits:8,val:4},    {op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:233},{op:16,bits:7,val:8},{op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:153},    {op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:217},{op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},    {op:0,bits:9,val:185},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},{op:0,bits:9,val:249},{op:16,bits:7,val:3},{op:0,bits:8,val:82},    {op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},{op:0,bits:8,val:50},{op:0,bits:9,val:197},{op:17,bits:7,val:11},    {op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:165},{op:0,bits:8,val:2},{op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:229},    {op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:149},{op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},    {op:0,bits:9,val:213},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},{op:0,bits:9,val:181},{op:0,bits:8,val:10},{op:0,bits:8,val:138},    {op:0,bits:8,val:74},{op:0,bits:9,val:245},{op:16,bits:7,val:5},{op:0,bits:8,val:86},{op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},    {op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:205},{op:17,bits:7,val:15},{op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:173},    {op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:237},{op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},    {op:0,bits:9,val:157},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},{op:0,bits:9,val:221},{op:18,bits:7,val:27},{op:0,bits:8,val:110},    {op:0,bits:8,val:46},{op:0,bits:9,val:189},{op:0,bits:8,val:14},{op:0,bits:8,val:142},{op:0,bits:8,val:78},{op:0,bits:9,val:253},{op:96,bits:7,val:0},    {op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},{op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:195},    {op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:163},{op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},    {op:0,bits:9,val:227},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},{op:0,bits:9,val:147},{op:19,bits:7,val:59},{op:0,bits:8,val:121},    {op:0,bits:8,val:57},{op:0,bits:9,val:211},{op:17,bits:7,val:17},{op:0,bits:8,val:105},{op:0,bits:8,val:41},{op:0,bits:9,val:179},{op:0,bits:8,val:9},    {op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:243},{op:16,bits:7,val:4},{op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},    {op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:203},{op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},    {op:0,bits:9,val:171},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},{op:0,bits:9,val:235},{op:16,bits:7,val:8},{op:0,bits:8,val:93},    {op:0,bits:8,val:29},{op:0,bits:9,val:155},{op:20,bits:7,val:83},{op:0,bits:8,val:125},{op:0,bits:8,val:61},{op:0,bits:9,val:219},{op:18,bits:7,val:23},    {op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:187},{op:0,bits:8,val:13},{op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:251},    {op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},{op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},    {op:0,bits:9,val:199},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},{op:0,bits:9,val:167},{op:0,bits:8,val:3},{op:0,bits:8,val:131},    {op:0,bits:8,val:67},{op:0,bits:9,val:231},{op:16,bits:7,val:7},{op:0,bits:8,val:91},{op:0,bits:8,val:27},{op:0,bits:9,val:151},{op:20,bits:7,val:67},    {op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:215},{op:18,bits:7,val:19},{op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:183},    {op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:247},{op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},    {op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},{op:0,bits:9,val:207},{op:17,bits:7,val:15},{op:0,bits:8,val:103},    {op:0,bits:8,val:39},{op:0,bits:9,val:175},{op:0,bits:8,val:7},{op:0,bits:8,val:135},{op:0,bits:8,val:71},{op:0,bits:9,val:239},{op:16,bits:7,val:9},    {op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:159},{op:20,bits:7,val:99},{op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:223},    {op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:191},{op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},    {op:0,bits:9,val:255}])",distfix_ary=null,distfix_def="([    {op:16,bits:5,val:1},{op:23,bits:5,val:257},{op:19,bits:5,val:17},{op:27,bits:5,val:4097},{op:17,bits:5,val:5},{op:25,bits:5,val:1025},    {op:21,bits:5,val:65},{op:29,bits:5,val:16385},{op:16,bits:5,val:3},{op:24,bits:5,val:513},{op:20,bits:5,val:33},{op:28,bits:5,val:8193},    {op:18,bits:5,val:9},{op:26,bits:5,val:2049},{op:22,bits:5,val:129},{op:64,bits:5,val:0},{op:16,bits:5,val:2},{op:23,bits:5,val:385},    {op:19,bits:5,val:25},{op:27,bits:5,val:6145},{op:17,bits:5,val:7},{op:25,bits:5,val:1537},{op:21,bits:5,val:97},{op:29,bits:5,val:24577},    {op:16,bits:5,val:4},{op:24,bits:5,val:769},{op:20,bits:5,val:49},{op:28,bits:5,val:12289},{op:18,bits:5,val:13},{op:26,bits:5,val:3073},    {op:22,bits:5,val:193},{op:64,bits:5,val:0}])";function fixedtables(state){var i;for(lenfix_ary||(lenfix_ary=eval(lenfix_def)),distfix_ary||(distfix_ary=eval(distfix_def)),state.lencode=0,state.distcode=512,i=0;i<512;i++)state.codes[i]=lenfix_ary[i];for(i=0;i<32;i++)state.codes[i+512]=distfix_ary[i];state.lenbits=9,state.distbits=5}function updatewindow(t){var e=t.state,a=t.output_data.length;return null===e.window&&(e.window=""),0==e.wsize&&(e.wsize=1<<e.wbits),a>=e.wsize?e.window=t.output_data.substring(a-e.wsize):e.whave+a<e.wsize?e.window+=t.output_data:e.window=e.window.substring(e.whave-(e.wsize-a))+t.output_data,e.whave=e.window.length,e.whave<e.wsize?e.wnext=e.whave:e.wnext=0,0}function CRC2(t,e){var a=[255&e,e>>>8&255];t.state.check=t.checksum_function(t.state.check,a,0,2)}function CRC4(t,e){var a=[255&e,e>>>8&255,e>>>16&255,e>>>24&255];t.state.check=t.checksum_function(t.state.check,a,0,4)}function LOAD(t,e){return e.strm=t,e.left=t.avail_out,e.next=t.next_in,e.have=t.avail_in,e.hold=t.state.hold,e.bits=t.state.bits,e}function RESTORE(t){var e=t.strm;e.next_in=t.next,e.avail_out=t.left,e.avail_in=t.have,e.state.hold=t.hold,e.state.bits=t.bits}function INITBITS(t){t.hold=0,t.bits=0}function PULLBYTE(t){return 0!=t.have&&(t.have--,t.hold+=(255&t.strm.input_data.charCodeAt(t.next++))<<t.bits,t.bits+=8,!0)}function NEEDBITS(t,e){for(;t.bits<e;)if(!PULLBYTE(t))return!1;return!0}function BITS(t,e){return t.hold&(1<<e)-1}function DROPBITS(t,e){t.hold>>>=e,t.bits-=e}function BYTEBITS(t){t.hold>>>=7&t.bits,t.bits-=7&t.bits}function REVERSE(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}var inflate_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];ZLIB.inflate=function(t,e){var a,s,o,i,r,n,l,h,c,p=-1,d=-1;if(!t||!t.state||!t.input_data&&0!=t.avail_in)return ZLIB.Z_STREAM_ERROR;(a=t.state).mode==TYPE&&(a.mode=TYPEDO),LOAD(t,s={}),o=s.have,i=s.left,c=ZLIB.Z_OK;t:for(;;)switch(a.mode){case HEAD:if(0==a.wrap){a.mode=TYPEDO;break}if(!NEEDBITS(s,16))break t;if(2&a.wrap&&35615==s.hold){a.check=t.checksum_function(0,null,0,0),CRC2(t,s.hold),INITBITS(s),a.mode=FLAGS;break}if(a.flags=0,null!==a.head&&(a.head.done=-1),!(1&a.wrap)||((BITS(s,8)<<8)+(s.hold>>>8))%31){t.msg="incorrect header check",a.mode=BAD;break}if(BITS(s,4)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",a.mode=BAD;break}if(DROPBITS(s,4),h=BITS(s,4)+8,0==a.wbits)a.wbits=h;else if(h>a.wbits){t.msg="invalid window size",a.mode=BAD;break}a.dmax=1<<h,t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=512&s.hold?DICTID:TYPE,INITBITS(s);break;case FLAGS:if(!NEEDBITS(s,16))break t;if(a.flags=s.hold,(255&a.flags)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",a.mode=BAD;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=BAD;break}null!==a.head&&(a.head.text=s.hold>>>8&1),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.mode=TIME;case TIME:if(!NEEDBITS(s,32))break t;null!==a.head&&(a.head.time=s.hold),512&a.flags&&CRC4(t,s.hold),INITBITS(s),a.mode=OS;case OS:if(!NEEDBITS(s,16))break t;null!==a.head&&(a.head.xflags=255&s.hold,a.head.os=s.hold>>>8),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.mode=EXLEN;case EXLEN:if(1024&a.flags){if(!NEEDBITS(s,16))break t;a.length=s.hold,null!==a.head&&(a.head.extra_len=s.hold),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.head.extra=""}else null!==a.head&&(a.head.extra=null);a.mode=EXTRA;case EXTRA:if(1024&a.flags&&((r=a.length)>s.have&&(r=s.have),r&&(null!==a.head&&null!==a.head.extra&&(h=a.head.extra_len-a.length,a.head.extra+=t.input_data.substring(s.next,s.next+(h+r>a.head.extra_max?a.head.extra_max-h:r))),512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,r)),s.have-=r,s.next+=r,a.length-=r),a.length))break t;a.length=0,a.mode=NAME;case NAME:if(2048&a.flags){if(0==s.have)break t;null!==a.head&&null===a.head.name&&(a.head.name=""),r=0;do{if(h=t.input_data.charAt(s.next+r),r++,"\0"===h)break;null!==a.head&&a.length<a.head.name_max&&(a.head.name+=h,a.length++)}while(r<s.have);if(512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,r)),s.have-=r,s.next+=r,"\0"!==h)break t}else null!==a.head&&(a.head.name=null);a.length=0,a.mode=COMMENT;case COMMENT:if(4096&a.flags){if(0==s.have)break t;r=0,null!==a.head&&null===a.head.comment&&(a.head.comment="");do{if(h=t.input_data.charAt(s.next+r),r++,"\0"===h)break;null!==a.head&&a.length<a.head.comm_max&&(a.head.comment+=h,a.length++)}while(r<s.have);if(512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,r)),s.have-=r,s.next+=r,"\0"!==h)break t}else null!==a.head&&(a.head.comment=null);a.mode=HCRC;case HCRC:if(512&a.flags){if(!NEEDBITS(s,16))break t;if(s.hold!=(65535&a.check)){t.msg="header crc mismatch",a.mode=BAD;break}INITBITS(s)}null!==a.head&&(a.head.hcrc=a.flags>>>9&1,a.head.done=1),t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=TYPE;break;case DICTID:if(!NEEDBITS(s,32))break t;t.adler=a.check=REVERSE(s.hold),INITBITS(s),a.mode=DICT;case DICT:if(0==a.havedict)return RESTORE(s),ZLIB.Z_NEED_DICT;t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=TYPE;case TYPE:if(e==ZLIB.Z_BLOCK||e==ZLIB.Z_TREES)break t;case TYPEDO:if(a.last){BYTEBITS(s),a.mode=CHECK;break}if(!NEEDBITS(s,3))break t;switch(a.last=BITS(s,1),DROPBITS(s,1),BITS(s,2)){case 0:a.mode=STORED;break;case 1:if(fixedtables(a),a.mode=LEN_,e==ZLIB.Z_TREES){DROPBITS(s,2);break t}break;case 2:a.mode=TABLE;break;case 3:t.msg="invalid block type",a.mode=BAD}DROPBITS(s,2);break;case STORED:if(BYTEBITS(s),!NEEDBITS(s,32))break t;if((65535&s.hold)!=(s.hold>>>16&65535^65535)){t.msg="invalid stored block lengths",a.mode=BAD;break}if(a.length=65535&s.hold,INITBITS(s),a.mode=COPY_,e==ZLIB.Z_TREES)break t;case COPY_:a.mode=COPY;case COPY:if(r=a.length){if(r>s.have&&(r=s.have),r>s.left&&(r=s.left),0==r)break t;t.output_data+=t.input_data.substring(s.next,s.next+r),t.next_out+=r,s.have-=r,s.next+=r,s.left-=r,a.length-=r;break}a.mode=TYPE;break;case TABLE:if(!NEEDBITS(s,14))break t;if(a.nlen=BITS(s,5)+257,DROPBITS(s,5),a.ndist=BITS(s,5)+1,DROPBITS(s,5),a.ncode=BITS(s,4)+4,DROPBITS(s,4),a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=BAD;break}a.have=0,a.mode=LENLENS;case LENLENS:for(;a.have<a.ncode;){if(!NEEDBITS(s,3))break t;var v=BITS(s,3);a.lens[inflate_order[a.have++]]=v,DROPBITS(s,3)}for(;a.have<19;)a.lens[inflate_order[a.have++]]=0;if(a.next=0,a.lencode=0,a.lenbits=7,c=inflate_table(a,CODES)){t.msg="invalid code lengths set",a.mode=BAD;break}a.have=0,a.mode=CODELENS;case CODELENS:for(;a.have<a.nlen+a.ndist;){for(;!((n=a.codes[a.lencode+BITS(s,a.lenbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(n.val<16)DROPBITS(s,n.bits),a.lens[a.have++]=n.val;else{if(16==n.val){if(!NEEDBITS(s,n.bits+2))break t;if(DROPBITS(s,n.bits),0==a.have){t.msg="invalid bit length repeat",a.mode=BAD;break}h=a.lens[a.have-1],r=3+BITS(s,2),DROPBITS(s,2)}else if(17==n.val){if(!NEEDBITS(s,n.bits+3))break t;DROPBITS(s,n.bits),h=0,r=3+BITS(s,3),DROPBITS(s,3)}else{if(!NEEDBITS(s,n.bits+7))break t;DROPBITS(s,n.bits),h=0,r=11+BITS(s,7),DROPBITS(s,7)}if(a.have+r>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=BAD;break}for(;r--;)a.lens[a.have++]=h}}if(a.mode==BAD)break;if(0==a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=BAD;break}if(a.next=0,a.lencode=a.next,a.lenbits=9,c=inflate_table(a,LENS)){t.msg="invalid literal/lengths set",a.mode=BAD;break}if(a.distcode=a.next,a.distbits=6,c=inflate_table(a,DISTS)){t.msg="invalid distances set",a.mode=BAD;break}if(a.mode=LEN_,e==ZLIB.Z_TREES)break t;case LEN_:a.mode=LEN;case LEN:if(s.have>=6&&s.left>=258){RESTORE(s),inflate_fast(t,i),LOAD(t,s),a.mode==TYPE&&(a.back=-1);break}for(a.back=0;!((n=a.codes[a.lencode+BITS(s,a.lenbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(n.op&&0==(240&n.op)){for(l=n;n=a.codes[a.lencode+l.val+(BITS(s,l.bits+l.op)>>>l.bits)],!(l.bits+n.bits<=s.bits);)if(!PULLBYTE(s))break t;DROPBITS(s,l.bits),a.back+=l.bits}if(DROPBITS(s,n.bits),a.back+=n.bits,a.length=n.val,0==n.op){a.mode=LIT;break}if(32&n.op){a.back=-1,a.mode=TYPE;break}if(64&n.op){t.msg="invalid literal/length code",a.mode=BAD;break}a.extra=15&n.op,a.mode=LENEXT;case LENEXT:if(a.extra){if(!NEEDBITS(s,a.extra))break t;a.length+=BITS(s,a.extra),DROPBITS(s,a.extra),a.back+=a.extra}a.was=a.length,a.mode=DIST;case DIST:for(;!((n=a.codes[a.distcode+BITS(s,a.distbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(0==(240&n.op)){for(l=n;n=a.codes[a.distcode+l.val+(BITS(s,l.bits+l.op)>>>l.bits)],!(l.bits+n.bits<=s.bits);)if(!PULLBYTE(s))break t;DROPBITS(s,l.bits),a.back+=l.bits}if(DROPBITS(s,n.bits),a.back+=n.bits,64&n.op){t.msg="invalid distance code",a.mode=BAD;break}a.offset=n.val,a.extra=15&n.op,a.mode=DISTEXT;case DISTEXT:if(a.extra){if(!NEEDBITS(s,a.extra))break t;a.offset+=BITS(s,a.extra),DROPBITS(s,a.extra),a.back+=a.extra}a.mode=MATCH;case MATCH:if(0==s.left)break t;if(r=i-s.left,a.offset>r){if((r=a.offset-r)>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=BAD;break}r>a.wnext?(r-=a.wnext,p=a.wsize-r,d=-1):(p=a.wnext-r,d=-1),r>a.length&&(r=a.length)}else p=-1,d=t.next_out-a.offset,r=a.length;if(r>s.left&&(r=s.left),s.left-=r,a.length-=r,p>=0)t.output_data+=a.window.substring(p,p+r),t.next_out+=r,r=0;else{t.next_out+=r;do{t.output_data+=t.output_data.charAt(d++)}while(--r)}0==a.length&&(a.mode=LEN);break;case LIT:if(0==s.left)break t;t.output_data+=String.fromCharCode(a.length),t.next_out++,s.left--,a.mode=LEN;break;case CHECK:if(a.wrap){if(!NEEDBITS(s,32))break t;if(i-=s.left,t.total_out+=i,a.total+=i,i&&(t.adler=a.check=t.checksum_function(a.check,t.output_data,t.output_data.length-i,i)),i=s.left,(a.flags?s.hold:REVERSE(s.hold))!=a.check){t.msg="incorrect data check",a.mode=BAD;break}INITBITS(s)}a.mode=LENGTH;case LENGTH:if(a.wrap&&a.flags){if(!NEEDBITS(s,32))break t;if(s.hold!=(4294967295&a.total)){t.msg="incorrect length check",a.mode=BAD;break}INITBITS(s)}a.mode=DONE;case DONE:c=ZLIB.Z_STREAM_END;break t;case BAD:c=ZLIB.Z_DATA_ERROR;break t;case MEM:return ZLIB.Z_MEM_ERROR;case SYNC:default:return ZLIB.Z_STREAM_ERROR}return RESTORE(s),(a.wsize||i!=t.avail_out&&a.mode<BAD&&(a.mode<CHECK||e!=ZLIB.Z_FINISH))&&updatewindow(t)?(a.mode=MEM,ZLIB.Z_MEM_ERROR):(o-=t.avail_in,i-=t.avail_out,t.total_in+=o,t.total_out+=i,a.total+=i,a.wrap&&i&&(t.adler=a.check=t.checksum_function(a.check,t.output_data,0,t.output_data.length)),t.data_type=a.bits+(a.last?64:0)+(a.mode==TYPE?128:0)+(a.mode==LEN_||a.mode==COPY_?256:0),(0==o&&0==i||e==ZLIB.Z_FINISH)&&c==ZLIB.Z_OK&&(c=ZLIB.Z_BUF_ERROR),c)},ZLIB.inflateEnd=function(t){return t&&t.state?(t.state.window=null,t.state=null,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.z_stream.prototype.inflate=function(t,e){var a,s;this.input_data=t,this.next_in=getarg(e,"next_in",0),this.avail_in=getarg(e,"avail_in",t.length-this.next_in),a=getarg(e,"flush",ZLIB.Z_SYNC_FLUSH),s=getarg(e,"avail_out",-1);var o="";do{if(this.avail_out=s>=0?s:16384,this.output_data="",this.next_out=0,this.error=ZLIB.inflate(this,a),0!=this.error&&console.log("zlib error",this.error),s>=0)return this.output_data;if(o+=this.output_data,this.avail_out>0)break}while(this.error==ZLIB.Z_OK);return o},ZLIB.z_stream.prototype.inflateReset=function(t){return ZLIB.inflateReset(this,t)}}(),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-adler32.js"),BASE=65521,ZLIB.adler32=function(t,e,a,s){return"string"==typeof e?function(t,e,a,s){var o,i;if(o=t>>>16&65535,t&=65535,1==s)return(t+=255&e.charCodeAt(a))>=BASE&&(t-=BASE),(o+=t)>=BASE&&(o-=BASE),t|o<<16;if(null===e)return 1;if(s<16){for(;s--;)o+=t+=255&e.charCodeAt(a++);return t>=BASE&&(t-=BASE),t|(o%=BASE)<<16}for(;s>=5552;){s-=5552,i=347;do{o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++)}while(--i);t%=BASE,o%=BASE}if(s){for(;s>=16;)s-=16,o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++),o+=t+=255&e.charCodeAt(a++);for(;s--;)o+=t+=255&e.charCodeAt(a++);t%=BASE,o%=BASE}return t|o<<16}(t,e,a,s):function(t,e,a,s){var o,i;if(o=t>>>16&65535,t&=65535,1==s)return(t+=e[a])>=BASE&&(t-=BASE),(o+=t)>=BASE&&(o-=BASE),t|o<<16;if(null===e)return 1;if(s<16){for(;s--;)o+=t+=e[a++];return t>=BASE&&(t-=BASE),t|(o%=BASE)<<16}for(;s>=5552;){s-=5552,i=347;do{o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++]}while(--i);t%=BASE,o%=BASE}if(s){for(;s>=16;)s-=16,o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++],o+=t+=e[a++];for(;s--;)o+=t+=e[a++];t%=BASE,o%=BASE}return t|o<<16}(t,e,a,s)},ZLIB.adler32_combine=function(t,e,a){var s,o,i;return a<0?4294967295:(o=(i=a%=BASE)*(s=65535&t),o%=BASE,(s+=(65535&e)+BASE-1)>=BASE&&(s-=BASE),s>=BASE&&(s-=BASE),(o+=(t>>16&65535)+(e>>16&65535)+BASE-i)>=BASE<<1&&(o-=BASE<<1),o>=BASE&&(o-=BASE),s|o<<16)},void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-crc32.js"),function(){var t=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];ZLIB.crc32=function(e,a,s,o){return"string"==typeof a?function(e,a,s,o){if(null==a)return 0;for(e^=4294967295;o>=8;)e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,o-=8;if(o)do{e=t[255&(e^a.charCodeAt(s++))]^e>>>8}while(--o);return 4294967295^e}(e,a,s,o):function(e,a,s,o){if(null==a)return 0;for(e^=4294967295;o>=8;)e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,o-=8;if(o)do{e=t[255&(e^a[s++])]^e>>>8}while(--o);return 4294967295^e}(e,a,s,o)};function e(t,e){var a,s=0;for(a=0;e;)1&e&&(a^=t[s]),e>>=1,s++;return a}function a(t,a){var s;for(s=0;s<32;s++)t[s]=e(a,a[s])}ZLIB.crc32_combine=function(t,s,o){var i,r,n,l;if(o<=0)return t;for(n=new Array(32),(l=new Array(32))[0]=3988292384,r=1,i=1;i<32;i++)l[i]=r,r<<=1;a(n,l),a(l,n);do{if(a(n,l),1&o&&(t=e(n,t)),0==(o>>=1))break;a(l,n),1&o&&(t=e(l,t)),o>>=1}while(0!=o);return t^=s}}(),module.exports=ZLIB},,,,,,,,,,,,,,,,,function(t,e,a){"use strict";a.r(e);var s=a(27);a.d(e,"AMTDesktop",(function(){return s.a}));var o=a(26);a.d(e,"AMTKvmDataRedirector",(function(){return o.a}));var i=a(9);a.d(e,"AMTRedirector",(function(){return i.a})),a.d(e,"Protocol",(function(){return i.b}));var r=a(30);a.d(e,"AmtTerminal",(function(){return r.a}));var n=a(12);a.d(e,"ConsoleLogger",(function(){return n.a}));var l=a(0);a.d(e,"TypeConverter",(function(){return l.a}));var h=a(22);a.d(e,"Desktop",(function(){return h.a}));var c=a(4);a.d(e,"LogLevel",(function(){return c.a}));var p=a(23);a.d(e,"StateProcessorFactory",(function(){return p.a}));var d=a(31);a.d(e,"TerminalDataProcessor",(function(){return d.a}));var v=a(25);a.d(e,"DataProcessor",(function(){return v.a}));var b=a(21);a.d(e,"RLEDecoder",(function(){return b.a}));var u=a(14);a.d(e,"Encoding",(function(){return u.a}));var f=a(16);a.d(e,"FrameBufferBellServerCutText",(function(){return f.a}));var g=a(15);a.d(e,"HandshakeState",(function(){return g.a}));var S=a(17);a.d(e,"SecurityOptions",(function(){return S.a}));var m=a(18);a.d(e,"SecurityResponse",(function(){return m.a}));var C=a(20);a.d(e,"ServerCutTextHandler",(function(){return C.a}));var E=a(19);a.d(e,"ServerInit",(function(){return E.a}));var A=a(24);a.d(e,"AMTKeyCodeConverter",(function(){return A.a}));var I=a(5);a.d(e,"CommsHelper",(function(){return I.a}));var T=a(3);a.d(e,"ImageHelper",(function(){return T.a}));var B=a(29);a.d(e,"KeyBoardHelper",(function(){return B.a}));var k=a(28);a.d(e,"MouseHelper",(function(){return k.a}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,