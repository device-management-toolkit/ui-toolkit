!function(t,e){for(var a in e)t[a]=e[a]}(exports,function(t){var e={};function a(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,a),i.l=!0,i.exports}return a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)a.d(s,i,function(e){return t[e]}.bind(null,i));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=61)}([function(t,e){t.exports=require("react")},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(2);class i{static ReadShort(t,e){return(t.charCodeAt(e)<<8)+t.charCodeAt(e+1)}static ReadShortX(t,e){return(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ReadInt(t,e){return 16777216*t.charCodeAt(e)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadSInt(t,e){return(t.charCodeAt(e)<<24)+(t.charCodeAt(e+1)<<16)+(t.charCodeAt(e+2)<<8)+t.charCodeAt(e+3)}static ReadIntX(t,e){return 16777216*t.charCodeAt(e+3)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+1)<<8)+t.charCodeAt(e)}static ShortToStr(t){return String.fromCharCode(t>>8&255,255&t)}static ShortToStrX(t){return String.fromCharCode(255&t,t>>8&255)}static IntToStr(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)}static IntToStrX(t){return String.fromCharCode(255&t,t>>8&255,t>>16&255,t>>24&255)}static MakeToArray(t){return t&&null!=t&&"object"!=typeof t?[t]:t}static SplitArray(t){return t.split(",")}static Clone(t){return JSON.parse(JSON.stringify(t))}static EscapeHtml(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"boolean"==typeof t||"number"==typeof t?t:void 0}static ArrayElementMove(t,e,a){t.splice(a,0,t.splice(e,1)[0])}static ObjectToStringEx(t,e){let a="";if(0!==t&&(!Object(s.a)(t)||null==t))return"(Null)";if(t instanceof Array)for(var i in t)a+="<br />"+this.gap(e)+"Item #"+i+": "+this.ObjectToStringEx(t[i],e+1);else if(t instanceof Object)for(var o in t)a+="<br />"+this.gap(e)+o+" = "+this.ObjectToStringEx(t[o],e+1);else a+=this.EscapeHtml(t);return a}static ObjectToStringEx2(t,e){let a="";if(0!==t&&(!Object(s.a)(t)||null==t))return"(Null)";if(t instanceof Array)for(var i in t)a+="\r\n"+this.gap2(e)+"Item #"+i+": "+this.ObjectToStringEx2(t[i],e+1);else if(t instanceof Object)for(var o in t)a+="\r\n"+this.gap2(e)+o+" = "+this.ObjectToStringEx2(t[o],e+1);else a+=this.EscapeHtml(t);return a}static gap(t){let e="";for(let a=0;a<4*t;a++)e+="&nbsp;";return e}static gap2(t){let e="";for(let a=0;a<4*t;a++)e+=" ";return e}static ObjectToString(t){return this.ObjectToStringEx(t,0)}static ObjectToString2(t){return this.ObjectToStringEx2(t,0)}static hex2rstr(t){if("string"!=typeof t||0===t.length)return"";let e="";const a=(""+t).match(/../g);let s;for(;s=a.shift();)e+=String.fromCharCode(Number("0x"+s));return e}static char2hex(t){return(t+256).toString(16).substr(-2).toUpperCase()}static rstr2hex(t){let e,a="";for(e=0;e<t.length;e++)a+=this.char2hex(t.charCodeAt(e));return a}static encode_utf8(t){return unescape(encodeURIComponent(t))}static decode_utf8(t){return decodeURIComponent(escape(t))}static data2blob(t){const e=new Array(t.length);for(let a=0;a<t.length;a++)e[a]=t.charCodeAt(a);return new Blob([new Uint8Array(e)])}static random(t){return Math.floor(Math.random()*t)}static trademarks(t){return t.replace(/\(R\)/g,"&reg;").replace(/\(TM\)/g,"&trade;")}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));const s=t=>null!=t&&""!==t&&!1!==t&&0!==t},function(t,e,a){"use strict";a.d(e,"b",(function(){return s})),a.d(e,"a",(function(){return i}));a(44),a(45);const s=(t,e)=>{const a={Accept:"application/json","Content-Type":"application/json"};return i(e)?a["X-MPS-API-Key"]=t:a["X-RPS-API-Key"]=t,a},i=t=>null!=t&&""!==t&&!1!==t&&0!==t},function(t,e,a){"use strict";a.d(e,"b",(function(){return o})),a.d(e,"a",(function(){return n}));var s=a(16),i=a.n(s);a(3);const o=t=>i.a.t(t),n=(t,e)=>i.a.t(t,{translate:e})},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{static putImage(t,e,a){if(t.holding)return;const i=s.arotX(t,e,a);a=s.arotY(t,e,a),e=i,t.canvasCtx.putImageData(t.spare,e,a)}static setPixel(t,e,a){let i,o,n=4*a;t.rotation>0&&(1===t.rotation?(i=a%t.sparew,o=Math.floor(a/t.sparew),n=4*(a=i*t.sparew2+(t.sparew2-1-o))):2===t.rotation?n=t.sparew*t.spareh*4-4-n:3===t.rotation&&(i=a%t.sparew,o=Math.floor(a/t.sparew),n=4*(a=(t.sparew2-1-i)*t.sparew2+o))),1===t.bpp?(t.spare.data[n++]=224&e,t.spare.data[n++]=(28&e)<<3,t.spare.data[n++]=s.fixColor((3&e)<<6)):(t.spare.data[n++]=e>>8&248,t.spare.data[n++]=e>>3&252,t.spare.data[n++]=(31&e)<<3),t.spare.data[n]=255}static arotX(t,e,a){return 0===t.rotation?e:1===t.rotation?t.canvasCtx.canvas.width-t.sparew2-a:2===t.rotation?t.canvasCtx.canvas.width-t.sparew2-e:3===t.rotation?a:0}static arotY(t,e,a){return 0===t.rotation?a:1===t.rotation?e:2===t.rotation?t.canvasCtx.canvas.height-t.spareh2-a:3===t.rotation?t.canvasCtx.canvas.height-t.spareh-e:0}static crotX(t,e,a){return 0===t.rotation?e:1===t.rotation?a:2===t.rotation?t.canvasCtx.canvas.width-e:3===t.rotation?t.canvasCtx.canvas.height-a:0}static crotY(t,e,a){return 0===t.rotation?a:1===t.rotation?t.canvasCtx.canvas.width-e:2===t.rotation?t.canvasCtx.canvas.height-a:3===t.rotation?e:0}static rotX(t,e,a){return 0===t.rotation||1===t.rotation?e:2===t.rotation?e-t.canvasCtx.canvas.width:3===t.rotation?e-t.canvasCtx.canvas.height:0}static rotY(t,e,a){return 0===t.rotation?a:1===t.rotation?a-t.canvasCtx.canvas.width:2===t.rotation?a-t.canvasCtx.canvas.height:3===t.rotation?a:0}static setRotation(t,e){for(;e<0;)e+=4;const a=e%4;if(t.holding)return t.rotation=a,!1;if(a===t.rotation)return!0;let i=t.canvasCtx.canvas.width,o=t.canvasCtx.canvas.height;1!==t.rotation&&3!==t.rotation||(i=t.canvasCtx.canvas.height,o=t.canvasCtx.canvas.width),null==t.tcanvas&&(t.tcanvas=document.createElement("canvas"));const n=t.tcanvas.getContext("2d");return n.setTransform(1,0,0,1,0,0),n.canvas.width=i,n.canvas.height=o,n.rotate(-90*t.rotation*Math.PI/180),0===t.rotation&&n.drawImage(t.canvasCtx.canvas,0,0),1===t.rotation&&n.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,0),2===t.rotation&&n.drawImage(t.canvasCtx.canvas,-t.canvasCtx.canvas.width,-t.canvasCtx.canvas.height),3===t.rotation&&n.drawImage(t.canvasCtx.canvas,0,-t.canvasCtx.canvas.height),0!==t.rotation&&2!==t.rotation||(t.canvasCtx.canvas.height=i,t.canvasCtx.canvas.width=o),1!==t.rotation&&3!==t.rotation||(t.canvasCtx.canvas.height=o,t.canvasCtx.canvas.width=i),t.canvasCtx.setTransform(1,0,0,1,0,0),t.canvasCtx.rotate(90*a*Math.PI/180),t.rotation=a,t.canvasCtx.drawImage(t.tcanvas,s.rotX(t,0,0),s.rotY(t,0,0)),t.width=t.canvasCtx.canvas.width,t.height=t.canvasCtx.canvas.height,null!=t.onScreenResize&&t.onScreenResize(t.width,t.height,t.canvasId),!0}static fixColor(t){return t>127?t+32:t}}},function(t,e,a){"use strict";var s;a.d(e,"a",(function(){return s})),function(t){t[t.VERBOSE=5]="VERBOSE",t[t.INFO=4]="INFO",t[t.DEBUG=3]="DEBUG",t[t.WARNING=2]="WARNING",t[t.ERROR=1]="ERROR"}(s||(s={}))},function(t,e,a){"use strict";var s=a(0),i=a.n(s),o=a(8);const n=a.n(o).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:t})=>r(t)};
border: ${({type:t})=>"1px solid "+r(t)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,r=t=>"success"===t?"#4caf50":"warning"===t?"#ff9800":"error"===t?"#f44336":"#000000";e.a=({message:t,type:e})=>i.a.createElement(n,{type:e},t)},function(t,e){t.exports=require("styled-components")},function(t,e,a){"use strict";var s,i=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},o=function(){var t={};return function(e){if(void 0===t[e]){var a=document.querySelector(e);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(t){a=null}t[e]=a}return t[e]}}(),n=[];function r(t){for(var e=-1,a=0;a<n.length;a++)if(n[a].identifier===t){e=a;break}return e}function l(t,e){for(var a={},s=[],i=0;i<t.length;i++){var o=t[i],l=e.base?o[0]+e.base:o[0],c=a[l]||0,h="".concat(l," ").concat(c);a[l]=c+1;var d=r(h),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(n[d].references++,n[d].updater(p)):n.push({identifier:h,updater:f(p,e),references:1}),s.push(h)}return s}function c(t){var e=document.createElement("style"),s=t.attributes||{};if(void 0===s.nonce){var i=a.nc;i&&(s.nonce=i)}if(Object.keys(s).forEach((function(t){e.setAttribute(t,s[t])})),"function"==typeof t.insert)t.insert(e);else{var n=o(t.insert||"head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}return e}var h,d=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function p(t,e,a,s){var i=a?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(t.styleSheet)t.styleSheet.cssText=d(e,i);else{var o=document.createTextNode(i),n=t.childNodes;n[e]&&t.removeChild(n[e]),n.length?t.insertBefore(o,n[e]):t.appendChild(o)}}function u(t,e,a){var s=a.css,i=a.media,o=a.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}var b=null,v=0;function f(t,e){var a,s,i;if(e.singleton){var o=v++;a=b||(b=c(e)),s=p.bind(null,a,o,!1),i=p.bind(null,a,o,!0)}else a=c(e),s=u.bind(null,a,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(a)};return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var a=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var s=0;s<a.length;s++){var i=r(a[s]);n[i].references--}for(var o=l(t,e),c=0;c<a.length;c++){var h=r(a[c]);0===n[h].references&&(n[h].updater(),n.splice(h,1))}a=o}}}},function(t,e,a){"use strict";function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var a=[],s=!0,i=!1,o=void 0;try{for(var n,r=t[Symbol.iterator]();!(s=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);s=!0);}catch(t){i=!0,o=t}finally{try{s||null==r.return||r.return()}finally{if(i)throw o}}return a}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var a=Object.prototype.toString.call(t).slice(8,-1);"Object"===a&&t.constructor&&(a=t.constructor.name);if("Map"===a||"Set"===a)return Array.from(t);if("Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a))return i(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,s=new Array(e);a<e;a++)s[a]=t[a];return s}t.exports=function(t){var e=s(t,4),a=e[1],i=e[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(n," */"),l=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[a].concat(l).concat([r]).join("\n")}return[a].join("\n")}},function(t,e,a){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var a=t(e);return e[2]?"@media ".concat(e[2]," {").concat(a,"}"):a})).join("")},e.i=function(t,a,s){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(s)for(var o=0;o<this.length;o++){var n=this[o][0];null!=n&&(i[n]=!0)}for(var r=0;r<t.length;r++){var l=[].concat(t[r]);s&&i[l[0]]||(a&&(l[2]?l[2]="".concat(a," and ").concat(l[2]):l[2]=a),e.push(l))}},e}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(1),i=a(2);class o{static sendRefresh(t,e){if(!t.holding)if(t.focusMode>0){const a=2*t.focusMode;e.send(String.fromCharCode(3,1)+s.a.ShortToStr(Math.max(Math.min(t.oldMouseX,t.lastMouseX)-t.focusMode,0))+s.a.ShortToStr(Math.max(Math.min(t.oldMouseY,t.lastMouseY)-t.focusMode,0))+s.a.ShortToStr(a+Math.abs(t.oldMouseX-t.lastMouseX))+s.a.ShortToStr(a+Math.abs(t.oldMouseY-t.lastMouseY))),t.oldMouseX=t.lastMouseX,t.oldMouseY=t.lastMouseY}else e.send(String.fromCharCode(3,1,0,0,0,0)+s.a.ShortToStr(t.rwidth)+s.a.ShortToStr(t.rheight))}static sendKey(t,e,a){if("object"==typeof e)for(const a in e)o.sendKey(t,e[a][0],e[a][1]);else t.send(String.fromCharCode(4,a,0,0)+s.a.IntToStr(e))}static sendKvmData(t,e,a){!0!==t.onKvmDataAck?t.onKvmDataPending.push(a):(Object(i.a)(t.urlvars)&&Object(i.a)(t.urlvars.kvmdatatrace)&&console.log(`KVM-Send(${String(a.length)}): ${String(a)}`),a="\0KvmDataChannel\0"+a,e.send(`${String.fromCharCode(6,0,0,0)}${s.a.IntToStr(a.length)}${String(a)}`),t.onKvmDataAck=!1)}static sendKeepAlive(t,e){t.lastKeepAlive<Date.now()-5e3&&(t.lastKeepAlive=Date.now(),e.send(String.fromCharCode(6,0,0,0)+s.a.IntToStr(16)+"\0KvmDataChannel\0"))}static sendCtrlAltDelMsg(t){o.sendCad(t)}static sendCad(t){o.sendKey(t,65507,1),o.sendKey(t,65513,1),o.sendKey(t,65535,1),o.sendKey(t,65535,0),o.sendKey(t,65513,0),o.sendKey(t,65507,0)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o})),a.d(e,"b",(function(){return n}));var s=a(0),i=a.n(s);const o=i.a.createContext({data:{}});class n extends i.a.Component{render(){return i.a.createElement(o.Provider,{value:{data:this.props.data}},this.props.children)}}},function(t,e,a){"use strict";a.d(e,"b",(function(){return s})),a.d(e,"a",(function(){return l}));var s,i=a(1),o=a(20),n=a.n(o),r=a(2);!function(t){t[t.SOL=1]="SOL",t[t.KVM=2]="KVM",t[t.IDER=3]="IDER"}(s||(s={}));class l{constructor(t,e,a,s,i,o,n,r,l,c){this.fileReader=a,this.randomNonceChars="abcdef0123456789",this.host=s,this.port=i,this.user=o,this.pass=n,this.tls=r,this.tlsv1only=l,this.protocol=e,this.RedirectStartSol=String.fromCharCode(16,0,0,0,83,79,76,32),this.RedirectStartKvm=String.fromCharCode(16,1,0,0,75,86,77,82),this.RedirectStartIder=String.fromCharCode(16,0,0,0,73,68,69,82),this.urlvars={},this.server=c,this.amtAccumulator="",this.authUri="",this.logger=t}getWsLocation(){return this.isBrowser()&&!Object(r.a)(this.server)?`${window.location.protocol.replace("http","ws")}//\n      ${window.location.host}\n      ${window.location.pathname.substring(0,window.location.pathname.lastIndexOf("/"))}\n      /webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`:`wss://${String(this.server)}/webrelay.ashx?p=2&host=${this.host}&port=${this.port}&tls=${this.tls}${"*"===this.user?"&serverauth=1":""}${void 0===this.pass?"&serverauth=1&user="+this.user:""}&tls1only=${this.tlsv1only}`}isBrowser(){try{const t="undefined"!=typeof window;return t&&this.logger.debug("!!!!!BROWSER!!!!!"),t}catch(t){return!1}}start(t){this.connectState=0,this.socket=new t(this.getWsLocation()),this.socket.onopen=this.onSocketConnected.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onclose=this.onSocketClosed.bind(this);const e=t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsBinaryString(new Blob([this.fileReaderAcc.shift()]))},a=t=>{this.onSocketData(t.target.result),0===this.fileReaderAcc.length?this.fileReaderInUse=!1:this.fileReader.readAsArrayBuffer(this.fileReaderAcc.shift())};Object(r.a)(this.fileReader)&&Object(r.a)(this.fileReader.readAsBinaryString)?this.fileReader.onload=e.bind(this):Object(r.a)(this.fileReader)&&Object(r.a)(this.fileReader.readAsArrayBuffer)&&(this.fileReader.onloadend=a.bind(this)),this.logger.verbose("Connecting to websocket"),this.onStateChange(1)}onSocketConnected(){Object(r.a)(this.urlvars)&&Object(r.a)(this.urlvars.redirtrace)&&console.log("REDIR-CONNECT"),this.onStateChange(2),this.logger.verbose(`Connected to websocket server. With protocol ${this.protocol} (2 = KVM)`),this.logger.info("Start Redirect Session for protocol. "+this.protocol),this.protocol===s.SOL&&this.socketSend(this.RedirectStartSol),this.protocol===s.KVM&&this.socketSend(this.RedirectStartKvm),this.protocol===s.IDER&&this.socketSend(this.RedirectStartIder)}onMessage(t){try{if(this.inDataCount++,"object"==typeof t.data){if(this.fileReaderInUse)return void this.fileReaderAcc.push(t.data);if(null!=this.fileReader.readAsBinaryString)this.fileReaderInUse=!0,this.fileReader.readAsBinaryString(new Blob([t.data]));else if(null!=this.fileReader.readAsArrayBuffer)this.fileReaderInUse=!0,this.fileReader.readAsArrayBuffer(t.data);else{let e="";const a=new Uint8Array(t.data),s=a.byteLength;for(let t=0;t<s;t++)e+=String.fromCharCode(a[t]);this.onSocketData(e)}}else this.onSocketData(t.data)}catch(t){this.logger.error(t),this.stop(),this.onError()}}onSocketData(t){if(Object(r.a)(t)&&-1!==this.connectState){if("object"==typeof t){let e="";const a=new Uint8Array(t),s=a.byteLength;for(let t=0;t<s;t++)e+=String.fromCharCode(a[t]);t=e}else if("string"!=typeof t)return;if((this.protocol===s.KVM||this.protocol===s.IDER)&&1===this.connectState)return this.onProcessData(t);for(this.amtAccumulator+=t;this.amtAccumulator.length>=1;){let t=0;switch(this.amtAccumulator.charCodeAt(0)){case 17:if(this.logger.verbose("Start Redirection Session reply received for  "+this.protocol),this.amtAccumulator.length<4)return;switch(this.amtAccumulator.charCodeAt(1)){case 0:{if(this.logger.verbose("Session status success. Start handshake"),this.amtAccumulator.length<13)return;const e=this.amtAccumulator.charCodeAt(12);if(this.amtAccumulator.length<13+e)return;this.logger.verbose("Query for available authentication"),this.socketSend(String.fromCharCode(19,0,0,0,0,0,0,0,0)),t=13+e;break}default:this.stop()}break;case 20:{if(this.logger.verbose("Available Authentications reply received."),this.amtAccumulator.length<9)return;const e=i.a.ReadIntX(this.amtAccumulator,5);if(this.amtAccumulator.length<9+e)return;const a=this.amtAccumulator.charCodeAt(1),s=this.amtAccumulator.charCodeAt(4),o=[];for(let t=0;t<e;t++)o.push(this.amtAccumulator.charCodeAt(9+t));const n=this.amtAccumulator.substring(9,9+e);if(t=9+e,0===s)Object(r.a)(o.includes(4))?(this.logger.verbose("Good Digest Auth (With cnonce and all)"),this.socketSend(String.fromCharCode(19,0,0,0,4)+i.a.IntToStrX(this.user.length+this.authUri.length+8)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0,0))):Object(r.a)(o.includes(3))?(this.logger.warn("Bad Digest Auth"),this.socketSend(String.fromCharCode(19,0,0,0,3)+i.a.IntToStrX(this.user.length+this.authUri.length+7)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(0,0)+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(0,0,0))):Object(r.a)(o.includes(1))?(this.logger.verbose("Basic Auth"),this.socketSend(String.fromCharCode(19,0,0,0,1)+i.a.IntToStrX(this.user.length+this.pass.length+2)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(this.pass.length)+this.pass)):(this.logger.error("Auth Type not recognized. Stopping."),this.stop());else if(3!==s&&4!==s||1!==a)if(0===a){if(1===this.protocol){const t=1e4,e=100,a=0,s=1e4,o=100,n=0;this.socketSend(String.fromCharCode(32,0,0,0)+i.a.IntToStrX(this.amtSequence++)+i.a.ShortToStrX(t)+i.a.ShortToStrX(e)+i.a.ShortToStrX(a)+i.a.ShortToStrX(s)+i.a.ShortToStrX(o)+i.a.ShortToStrX(n)+i.a.IntToStrX(0))}2===this.protocol&&this.socketSend(String.fromCharCode(64,0,0,0,0,0,0,0)),3===this.protocol&&(this.connectState=1,this.onStateChange(3))}else this.stop();else{let t=0;const e=n.charCodeAt(t),a=n.substring(t+1,t+1+e);t+=e+1;const o=n.charCodeAt(t),r=n.substring(t+1,t+1+o);t+=o+1;let l=0,c=null;const h=this.generateRandomNonce(32),d="00000002";let p="";4===s&&(l=n.charCodeAt(t),c=n.substring(t+1,t+1+l),t+=l+1,p=`${d}:${h}:${String(c)} :`);const u=this.hex_md5(this.hex_md5(this.user+":"+a+":"+this.pass)+":"+r+":"+p+this.hex_md5("POST:"+this.authUri));let b=this.user.length+a.length+r.length+this.authUri.length+h.length+d.length+u.length+7;4===s&&(b+=parseInt(c.length)+1);let v=String.fromCharCode(19,0,0,0,s)+i.a.IntToStrX(b)+String.fromCharCode(this.user.length)+this.user+String.fromCharCode(a.length)+a+String.fromCharCode(r.length)+r+String.fromCharCode(this.authUri.length)+this.authUri+String.fromCharCode(h.length)+h+String.fromCharCode(d.length)+d+String.fromCharCode(u.length)+u;4===s&&(v+=String.fromCharCode(c.length)+c),this.socketSend(v)}break}case 33:if(this.amtAccumulator.length<23)break;this.logger.verbose("Response to settings"),t=23,this.socketSend(String.fromCharCode(39,0,0,0)+i.a.IntToStrX(this.amtSequence++)+String.fromCharCode(0,0,27,0,0,0)),1===this.protocol&&(this.amtKeepAliveTimer=setInterval(this.sendAmtKeepAlive.bind(this),2e3)),this.connectState=1,this.onStateChange(3);break;case 41:if(this.amtAccumulator.length<10)break;this.logger.verbose("Serial Settings"),t=10;break;case 42:{if(this.amtAccumulator.length<10)break;this.logger.verbose("Incoming display data");const e=10+((255&this.amtAccumulator.charCodeAt(9))<<8)+(255&this.amtAccumulator.charCodeAt(8));if(this.amtAccumulator.length<e)break;this.onProcessData(this.amtAccumulator.substring(10,e)),t=e;break}case 43:if(this.amtAccumulator.length<8)break;this.logger.verbose("Keep Alve message"),t=8;break;case 65:if(this.amtAccumulator.length<8)break;this.logger.verbose("KVM traffic. Call onStart handler. And forward rest of acc directly."),this.connectState=1,this.onStart(),this.amtAccumulator.length>8&&this.onProcessData(this.amtAccumulator.substring(8)),t=this.amtAccumulator.length;break;default:return this.logger.error(`Unknown Intel AMT command:  ${this.amtAccumulator.charCodeAt(0)}  acclen=${this.amtAccumulator.length}`),void this.stop()}if(0===t)return;this.amtAccumulator=this.amtAccumulator.substring(t)}}}hex_md5(t){return this.logger.verbose("MD5 the string"),n()(t)}socketSend(t){Object(r.a)(this.urlvars)&&Object(r.a)(this.urlvars.redirtrace)&&this.logger.verbose(`REDIR-SEND(${t.length}): ${i.a.rstr2hex(t)}`);try{if(null!=this.socket&&1===this.socket.readyState){const e=new Uint8Array(t.length);this.logger.verbose(`Redir Send( ${t.length}): ${i.a.rstr2hex(t)}`);for(let a=0;a<t.length;++a)e[a]=t.charCodeAt(a);this.socket.send(e.buffer)}}catch(t){this.logger.error("Socket send error: "+String(t))}}send(t){this.logger.verbose("Send called "+t),null!=this.socket&&1===this.connectState&&(this.protocol===s.SOL?this.socketSend(String.fromCharCode(40,0,0,0)+i.a.IntToStrX(this.amtSequence++)+i.a.ShortToStrX(t.length)+t):this.socketSend(t))}sendAmtKeepAlive(){null!=this.socket&&this.socketSend(String.fromCharCode(43,0,0,0)+i.a.IntToStrX(this.amtSequence++))}generateRandomNonce(t){let e="";for(let a=0;a<t;a++)e+=this.randomNonceChars.charAt(Math.floor(Math.random()*this.randomNonceChars.length));return e}onSocketClosed(t){Object(r.a)(this.urlvars)&&Object(r.a)(this.urlvars.redirtrace)&&console.log("REDIR-CLOSED"),this.logger.warn("Redir Socket Closed"),this.stop()}onStateChange(t){console.info("onstatechange",t),this.state!==t&&(this.state=t,this.onNewState(this.state),null!=this.onStateChanged&&this.onStateChanged(this,this.state))}stop(){this.logger.warn("Stop called on Redirector. Change state to 0 and close Socket."),this.onStateChange(0),this.connectState=-1,this.amtAccumulator="",null!=this.socket&&(this.socket.close(),this.socket=null),null!=this.amtKeepAliveTimer&&(clearInterval(this.amtKeepAliveTimer),this.amtKeepAliveTimer=null)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(3),i=function(t,e,a,s){return new(a||(a=Promise))((function(i,o){function n(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof a?e:new a((function(t){t(e)}))).then(n,r)}l((s=s.apply(t,e||[])).next())}))};class o{static get(t,e,a={}){return i(this,void 0,void 0,(function*(){const i=Object(s.b)(e);return yield o.fetch(t,Object.assign(Object.assign({},a),{method:"GET",headers:i}))}))}static post(t,e={},a,n,r={}){return i(this,void 0,void 0,(function*(){const i=Object(s.b)(a,n);return Object(s.a)(n)?yield o.fetch(t,Object.assign(Object.assign({},r),{method:"POST",body:e,headers:i})):yield o.fetchRPS(t,Object.assign(Object.assign({},r),{method:"POST",body:e,headers:i}))}))}static delete(t,e,a={}){return i(this,void 0,void 0,(function*(){const i=Object(s.b)(e);return yield o.fetchRPS(t,Object.assign(Object.assign({},a),{method:"DELETE",headers:i}))}))}static patch(t,e={},a,n={}){return i(this,void 0,void 0,(function*(){const i=Object(s.b)(a);return yield o.fetchRPS(t,Object.assign(Object.assign({},n),{method:"PATCH",body:e,headers:i}))}))}static fetch(t,e={}){return i(this,void 0,void 0,(function*(){return e.mode="cors",e.credentials="include",e.withCredentials=!0,yield fetch(t,e).then(t=>i(this,void 0,void 0,(function*(){return yield t.json()})))}))}static fetchRPS(t,e={}){return i(this,void 0,void 0,(function*(){return yield fetch(t,e).then(t=>i(this,void 0,void 0,(function*(){return{status:t.status,data:204===t.status?null:yield t.json()}})))}))}}},function(t,e){t.exports=require("i18next")},function(t,e,a){"use strict";a.d(e,"b",(function(){return n})),a.d(e,"a",(function(){return r}));var s=a(3),i=a(15),o=function(t,e,a,s){return new(a||(a=Promise))((function(i,o){function n(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof a?e:new a((function(t){t(e)}))).then(n,r)}l((s=s.apply(t,e||[])).next())}))};const n=(t,e,a,n,r)=>o(void 0,void 0,void 0,(function*(){const o=JSON.stringify({apikey:"xxxxx",method:"PowerAction",payload:Object(s.a)(r)?{guid:t,action:e,useSOL:r}:{guid:t,action:e}}),l=null!=a?a:"";return yield i.a.post(`https://${l}/amt`,o,n,!0)})),r=(t,e,a)=>o(void 0,void 0,void 0,(function*(){const s=JSON.stringify({apikey:"xxxxx",method:"PowerState",payload:{guid:t}}),o=null!=e?e:"";return yield i.a.post(`https://${o}/amt`,s,a,!0)}))},function(t,e,a){"use strict";a.d(e,"a",(function(){return s})),a.d(e,"b",(function(){return i}));const s=[{value:"2",label:"Power Up"},{value:"101",label:"Reset To BIOS"},{value:"4",label:"Sleep"},{value:"5",label:"Power Cycle"},{value:"7",label:"Hibernate"},{value:"8",label:"Power Down"},{value:"10",label:"Reset"},{value:"12",label:"Soft-Off"},{value:"14",label:"Soft Reset"},{value:"100",label:"Power Up To BIOS"},{value:"400",label:"Reset To PXE"},{value:"401",label:"Power Up To PXE"}],i=t=>2===t?"Power Up":8===t?"Power Off":5===t?"Power Cycle":10===t?"Reset":12===t?"Soft Off":14===t?"Soft Reset":4===t?"Sleep":7===t?"Hibernate":100===t?"Power Up To BIOS":101===t?"Reset To BIOS":null},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(6);class i{constructor(t){this.minLevel=t}log(t,e){switch(t){case s.a.VERBOSE:this.verbose(e);break;case s.a.INFO:this.info(e);break;case s.a.DEBUG:this.debug(e);break;case s.a.WARNING:this.warn(e);break;case s.a.ERROR:this.error(e)}}debug(t){this.minLevel>=s.a.DEBUG&&console.debug(t)}info(t){this.minLevel>=s.a.INFO&&console.info(t)}error(t){this.minLevel>=s.a.ERROR&&console.error(t)}warn(t){this.minLevel>=s.a.WARNING&&console.warn(t)}verbose(t){this.minLevel>=s.a.VERBOSE&&console.log(t)}}},function(t,e){t.exports=require("md5")},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,".label-text{margin-left:8px}.grey-label{opacity:.5}","",{version:3,sources:["webpack://./src/reactjs/components/shared/amtfeatures.scss"],names:[],mappings:"AAMC,YACI,eAHS,CAMb,YACI,UANM",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2020\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n $marginLeft: 8px;\r\n $opacity: 0.5;\r\n .label-text {\r\n     margin-left: $marginLeft;\r\n }\r\n\r\n .grey-label {\r\n     opacity: $opacity;\r\n }"],sourceRoot:""}]),e.a=n},function(t,e,a){"use strict";a.d(e,"a",(function(){return r}));var s=a(1),i=a(5),o=a(12),n=a(2);class r{constructor(t,e,a,s){this.wsSocket=t,this.parent=e,this.rleDecoder=a,this.updateRFBState=s}processState(t){let e=0;if(t.length>=12){const a=s.a.ReadShort(t,0),r=s.a.ReadShort(t,2),l=s.a.ReadShort(t,4),c=s.a.ReadShort(t,6),h=l*c,d=s.a.ReadInt(t,8);if(d<17){if(l<1||l>64||c<1||c>64)throw this.parent.logger.error(`Invalid tile size (${l},${c}), disconnecting.`),new Error("Invalid tile size");if(this.parent.sparew!==l||this.parent.spareh!==c){this.parent.sparew=this.parent.sparew2=l,this.parent.spareh=this.parent.spareh2=c,1!==this.parent.rotation&&3!==this.parent.rotation||(this.parent.sparew2=c,this.parent.spareh2=l);const t=`${this.parent.sparew2}x${this.parent.spareh2}`;this.parent.spare=this.parent.sparecache[t],Object(n.a)(this.parent.spare)||(this.parent.sparecache[t]=this.parent.spare=this.parent.canvasCtx.createImageData(this.parent.sparew2,this.parent.spareh2))}}if(4294967073===d)this.parent.logger.verbose("Desktop size"),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=l,this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=c,this.wsSocket.send(String.fromCharCode(3,0,0,0,0,0)+s.a.ShortToStr(this.parent.width)+s.a.ShortToStr(this.parent.height)),e=12,null!=this.parent.onScreenSizeChange&&this.parent.onScreenSizeChange(this.parent.ScreenWidth,this.parent.ScreenHeight);else if(0===d){let s=12;const o=12+h*this.parent.bpp;if(t.length<o)return 0;e=o;for(let e=0;e<h;e++)i.a.setPixel(this.parent,t.charCodeAt(s++)+(2===this.parent.bpp?t.charCodeAt(s++)<<8:0),e);i.a.putImage(this.parent,a,r)}else{if(16!==d)throw this.parent.logger.error(`Unknown Encoding: ${d} , HEX: ${s.a.rstr2hex(t)}`),new Error("Unknown Encoding: "+d);{if(t.length<16)return 0;const i=s.a.ReadInt(t,12);if(t.length<16+i)return 0;const o=16,n=5,d=0;if(i>5&&0===t.charCodeAt(o)&&s.a.ReadShortX(t,o+1)===i-n)this.rleDecoder.Decode(t,o+5,a,r,l,c,h,i);else{const e=t.substring(o,o+i-d),s=this.parent.inflate.inflate(e);if(!(s.length>0))throw this.parent.logger.error("Invalid deflate data."),new Error("invalid deflate data");this.rleDecoder.Decode(s,0,a,r,l,c,h,s.length)}e=16+i}}if(100==--this.parent.state){this.parent.logger.debug("Frame completed. Update state and request new frame"),this.updateRFBState(4);const t=()=>o.a.sendRefresh(this.parent,this.wsSocket);0===this.parent.frameRateDelay?o.a.sendRefresh(this.parent,this.wsSocket):setTimeout(t,this.parent.frameRateDelay)}}return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=12?(e=12,this.updateRFBState(1),this.wsSocket.send("RFB 003.008\n"),e):0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(1);class i{constructor(t,e,a){this.wsSocket=t,this.serverCutTextHandler=e,this.updateRFBState=a}processState(t){let e=0;switch(t.charCodeAt(0)){case 0:if(t.length<4)return 0;this.updateRFBState(100+s.a.ReadShort(t,2)),e=4;break;case 2:e=1;break;case 3:if(t.length<8)return 0;var a=s.a.ReadInt(t,4)+8;if(t.length<a)return 0;e=this.serverCutTextHandler.handleServerCutText(t)}return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;return t.length>=1?(e=t.charCodeAt(0)+1,this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(2),e):0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(1);class i{constructor(t,e){this.wsSocket=t,this.updateRFBState=e}processState(t){let e=0;if(t.length>=4){if(e=4,0!==s.a.ReadInt(t,0))throw new Error("Error. Stopping. Security response not None.");return this.wsSocket.send(String.fromCharCode(1)),this.updateRFBState(3),e}return 0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(1),i=a(12);class o{constructor(t,e,a){this.wsSocket=t,this.parent=e,this.updateRFBState=a}processState(t){let e=0;if(t.length>=24){this.parent.rotation=0;const a=s.a.ReadInt(t,20);if(t.length<24+a)return 0;e=24+a,null!=this.parent.updateScreenDimensions&&this.parent.updateScreenDimensions(s.a.ReadShort(t,0),s.a.ReadShort(t,2)),this.parent.canvasCtx.canvas.width=this.parent.ScreenWidth=this.parent.rwidth=this.parent.width=s.a.ReadShort(t,0),this.parent.canvasCtx.canvas.height=this.parent.ScreenHeight=this.parent.rheight=this.parent.height=s.a.ReadShort(t,2);let o="";return this.parent.useZRLE&&(o+=s.a.IntToStr(16)),o+=s.a.IntToStr(0),o+=s.a.IntToStr(1092),this.parent.logger.verbose("Send supported encodings"),this.wsSocket.send(String.fromCharCode(2,0)+s.a.ShortToStr(o.length/4+1)+o+s.a.IntToStr(-223)),1===this.parent.bpp&&this.wsSocket.send(String.fromCharCode(0,0,0,0,8,8,0,1)+s.a.ShortToStr(7)+s.a.ShortToStr(7)+s.a.ShortToStr(3)+String.fromCharCode(5,2,0,0,0,0)),this.updateRFBState(4),this.parent.onStateChange(3),this.parent.logger.info("Start new frame."),i.a.sendRefresh(this.parent,this.wsSocket),this.parent.oldMouseX=-1,e}return 0}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(1),i=a(2);class o{constructor(t,e){this.wsSocket=t,this.parent=e}handleServerCutText(t){if(t.length<8)return 0;const e=s.a.ReadInt(t,4)+8;if(t.length<e)return 0;if(null!=this.parent.onKvmData){const a=t.substring(8,e);a.length>=16&&"\0KvmDataChannel"===a.substring(0,15)&&(this.parent.kvmDataSupported||(this.parent.kvmDataSupported=!0,console.log("KVM Data Channel Supported.")),(-1===this.parent.onKvmDataAck&&16===a.length||0!==a.charCodeAt(15))&&(this.parent.onKvmDataAck=!0),Object(i.a)(this.parent.urlvars)&&Object(i.a)(this.parent.urlvars.kvmdatatrace)&&console.log(`KVM-Recv((${a.length-16})):  ${a.substring(16)}`),a.length>16&&this.parent.onKvmData(a.substring(16)),!0===this.parent.onKvmDataAck&&this.parent.onKvmDataPending.length>0&&this.wsSocket.onSendKvmData(this.parent.onKvmDataPending.shift()))}return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(5);class i{constructor(t){this.parent=t}Decode(t,e,a,i,o,n,r,l){const c=t.charCodeAt(e++);let h,d,p;const u={};let b,v=0,f=0;if(0===c){for(this.parent.logger.verbose("Raw encoding"),b=0;b<r;b++)s.a.setPixel(this.parent,t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),b);s.a.putImage(this.parent,a,i)}else if(1===c){d=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),this.parent.canvasCtx.fillStyle="rgb("+(1===this.parent.bpp?`${224&d}, ${(28&d)<<3}, ${s.a.fixColor((3&d)<<6)}`:`${d>>8&248}, ${d>>3&252},${(31&d)<<3}`)+")",this.parent.logger.verbose("fillstyle: "+this.parent.canvasCtx.fillStyle);const r=s.a.rotX(this.parent,a,i);i=s.a.rotY(this.parent,a,i),a=r,this.parent.canvasCtx.fillRect(a,i,o,n)}else if(c>1&&c<17){this.parent.logger.verbose("Read the packed palette");let o=4,n=15;for(b=0;b<c;b++)u[b]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(2===c?(o=1,n=1):c<=4&&(o=2,n=3);v<r&&e<t.length;)for(d=t.charCodeAt(e++),b=8-o;b>=0;b-=o)s.a.setPixel(this.parent,u[d>>b&n],v++);s.a.putImage(this.parent,a,i)}else if(128===c){for(this.parent.logger.verbose("RLE encoded tile");v<r&&e<t.length;){d=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0),f=1;do{f+=p=t.charCodeAt(e++)}while(255===p);for(;--f>=0;)s.a.setPixel(this.parent,d,v++)}s.a.putImage(this.parent,a,i)}else if(c>129){for(this.parent.logger.verbose("Read the RLE palette"),b=0;b<c-128;b++)u[b]=t.charCodeAt(e++)+(2===this.parent.bpp?t.charCodeAt(e++)<<8:0);for(this.parent.logger.verbose("Decode RLE on palette");v<r&&e<t.length;){if(f=1,h=t.charCodeAt(e++),d=u[h%128],h>127)do{f+=p=t.charCodeAt(e++)}while(255===p);for(;--f>=0;)s.a.setPixel(this.parent,d,v++)}s.a.putImage(this.parent,a,i)}}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{processData(t){}onStateChange(t){}start(){}onSendKvmData(t){}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return d}));var s=a(22),i=a(23),o=a(24),n=a(25),r=a(26),l=a(27),c=a(28),h=a(29);class d{constructor(t,e,a){this.stateProcessors={},this.stateProcessors[0]=new i.a(t,a),this.stateProcessors[1]=new n.a(t,a),this.stateProcessors[2]=new r.a(t,a),this.stateProcessors[3]=new l.a(t,e,a);const d=new c.a(t,e);this.stateProcessors[4]=new o.a(t,d,a),this.stateProcessors["100plus"]=new s.a(t,e,new h.a(e),a)}getProcessor(t){return t<=100?this.stateProcessors[t]:this.stateProcessors["100plus"]}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s={Pause:19,CapsLock:20,Space:32,Quote:39,Minus:45,NumpadMultiply:42,NumpadAdd:43,PrintScreen:44,Comma:44,NumpadSubtract:45,NumpadDecimal:46,Period:46,Slash:47,NumpadDivide:47,Semicolon:59,Equal:61,OSLeft:91,BracketLeft:91,OSRight:91,Backslash:92,BracketRight:93,ContextMenu:93,Backquote:96,NumLock:144,ScrollLock:145,Backspace:65288,Tab:65289,Enter:65293,NumpadEnter:65293,Escape:65307,Delete:65535,Home:65360,PageUp:65365,PageDown:65366,ArrowLeft:65361,ArrowUp:65362,ArrowRight:65363,ArrowDown:65364,End:65367,Insert:65379,F1:65470,F2:65471,F3:65472,F4:65473,F5:65474,F6:65475,F7:65476,F8:65477,F9:65478,F10:65479,F11:65480,F12:65481,ShiftLeft:65505,ShiftRight:65506,ControlLeft:65507,ControlRight:65508,AltLeft:65513,AltRight:65514,MetaLeft:65511,MetaRight:65512},i=a(2);class o{static convertAMTKeyCode(t){return Object(i.a)(t.code.startsWith("Key"))&&4===t.code.length?t.code.charCodeAt(3)+(!1===t.shiftKey?32:0):Object(i.a)(t.code.startsWith("Digit"))&&6===t.code.length?t.code.charCodeAt(5):Object(i.a)(t.code.startsWith("Numpad"))&&7===t.code.length?t.code.charCodeAt(6):s[t.code]}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(0),i=a.n(s);const o=t=>i.a.createElement("select",{onClick:t.onChange,name:"PowerOptions"},i.a.createElement("option",{value:"",selected:!t.isSelected},"Choose"),t.availableOptions.map(({value:t,label:e})=>i.a.createElement("option",{key:t,value:t},e)))},function(t,e,a){"use strict";a.d(e,"a",(function(){return l}));var s=a(0),i=a.n(s),o=a(17),n=a(13),r=a(3);class l extends i.a.Component{constructor(t){super(t),this.getAmtPowerState=()=>{Object(o.a)(this.props.deviceId,this.props.server,this.context.data.mpsKey).then(t=>{this.props.updateParent(),Object(r.a)(t.powerstate)?this.setState({powerState:t.powerstate}):this.setState({powerState:100}),2===t.powerstate?this.props.handlePowerStatus("poweron"):100!==this.state.powerState?this.props.handlePowerStatus("sleep"):this.props.handlePowerStatus("failed")}).catch(t=>{console.info("error",t)})},this.renderPowerState=t=>{switch(t){case 1:case 10:case 11:case 14:case 17:return i.a.createElement("span",{style:{color:"red"}},"Other");case 2:return i.a.createElement("span",{style:{color:"green"}},"Power on");case 3:case 4:return i.a.createElement("span",{style:{color:"red"}},"deep sleep");case 5:case 6:case 8:case 9:case 12:case 13:case 15:case 16:return i.a.createElement("span",{style:{color:"red"}},"Power Off");case 7:return i.a.createElement("span",{style:{color:"red"}},"Hibernate");default:return i.a.createElement("span",{style:{color:"red"}},"Unknown")}},this.state={powerState:0}}componentDidMount(){this.getAmtPowerState(),this.timeInterval=setInterval(()=>this.getAmtPowerState(),15e3)}componentWillUnmount(){clearInterval(this.timeInterval)}render(){const{powerState:t}=this.state;return this.renderPowerState(t)}}l.contextType=n.a},function(t,e,a){"use strict";a.d(e,"a",(function(){return k}));var s=a(0),i=a.n(s),o=a(15),n=function(t,e,a,s){return new(a||(a=Promise))((function(i,o){function n(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof a?e:new a((function(t){t(e)}))).then(n,r)}l((s=s.apply(t,e||[])).next())}))};var r=a(8),l=a.n(r),c=a(3),h=function(t,e){var a={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(a[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(s=Object.getOwnPropertySymbols(t);i<s.length;i++)e.indexOf(s[i])<0&&Object.prototype.propertyIsEnumerable.call(t,s[i])&&(a[s[i]]=t[s[i]])}return a};const d=l.a.div`
  display: inline-block;
  vertical-align: middle;
`,p=l.a.svg`
  fill: none;
  stroke: green;
  stroke-width: 2px;
`,u=l.a.input.attrs({type:"checkbox"})`
  border: 0;
  clip: rect(0 0 0 0);
  clippath: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
`,b=l.a.div`
  display: inline-block;
  width: 16px;
  height: 16px;
  background-color: ${({disableCheckbox:t})=>v(t)};
  border-radius: 1px solid black;
  transition: all 150ms;

  ${u}:focus + & {
    box-shadow: 0 0 0 1px white;
  }

  ${p} {
    visibility: ${t=>Object(c.a)(t.checked)?"visible":"hidden"}
  }
`,v=t=>!0===t?"#ccc":"white",f=t=>{var{className:e,checked:a,disableCheckbox:s}=t,o=h(t,["className","checked","disableCheckbox"]);return i.a.createElement(d,{className:e},i.a.createElement(u,Object.assign({checked:a},o,{disabled:s})),i.a.createElement(b,{checked:a,disableCheckbox:s},i.a.createElement(p,{viewBox:"0 0 24 24"},i.a.createElement("polyline",{points:"20 6 9 17 4 12"}))))};var m=a(7),g=a(4),S=a(9),C=a.n(S),A=a(21),E={insert:"head",singleton:!1},w=(C()(A.a,E),A.a.locals,a(13));class k extends s.Component{constructor(t){super(t),this.fetchAmtFeatures=()=>{const t=null!=this.props.server?this.props.server:"";((t,e,a)=>n(void 0,void 0,void 0,(function*(){const s=JSON.stringify({apikey:"xxxxx",method:"GetAMTFeatures",payload:{guid:t}});return yield o.a.post(`https://${e}/amt`,s,a,!0)})))(this.props.deviceId,t,this.context.data.mpsKey).then(t=>{200===t.statuscode?this.setState({userConsent:t.payload.userConsent,useKVM:t.payload.KVM,useSOL:t.payload.SOL,useIDER:t.payload.IDER,redirection:t.payload.redirection},()=>this.updateCheckboxStatus()):this.props.handleFeatureStatus("failed")}).catch(()=>console.info("error"))},this.updateCheckboxStatus=()=>{const{feature:t}=this.props,{useKVM:e,useSOL:a,useIDER:s,redirection:i}=this.state;i&&(t===Object(g.b)("amtFeatures.features.kvm")&&e||t===Object(g.b)("amtFeatures.features.sol")&&a||"IDER"===t&&s)?(this.setState({checked:!0}),this.props.handleFeatureStatus("enabled")):this.props.handleFeatureStatus("notEnabled")},this.setAmtFeature=()=>{const{deviceId:t,feature:e,server:a,handleFeatureStatus:s}=this.props,{useKVM:i,useIDER:r,useSOL:l,checked:c}=this.state,h=c?Object(g.b)("amtFeatures.enabled"):Object(g.b)("amtFeatures.disabled"),d=null!=a?a:"";s("enabled");const p={feature:e,featureText:h};((t,e,a,s,i,r,l)=>n(void 0,void 0,void 0,(function*(){const n=JSON.stringify({apikey:"xxxxx",method:"SetAMTFeatures",payload:{guid:t,userConsent:e,enableKVM:a,enableSOL:s,enableIDER:i}});return yield o.a.post(`https://${r}/amt`,n,l,!0)})))(t,"none",i,l,r,d,this.context.data.mpsKey).then(t=>{200===t.statuscode?this.setState({showMessage:!0,message:Object(g.a)("amtFeatures.messages.featureSuccess",p),type:Object(g.b)("amtFeatures.messageTypes.success")}):this.setState({showMessage:!0,checked:!c,message:Object(g.a)("amtFeatures.messages.updateFailed",p),type:Object(g.b)("amtFeatures.messageTypes.error")}),setTimeout(()=>{this.setState({showMessage:!1}),this.state.checked||this.props.handleFeatureStatus("notEnabled")},4e3)}).catch(t=>console.info("error",t))},this.handleCheckboxChange=t=>{switch(this.props.feature){case"KVM":this.setState({checked:t.target.checked,useKVM:t.target.checked},()=>this.setAmtFeature());break;case"SOL":this.setState({checked:t.target.checked,useSOL:t.target.checked},()=>this.setAmtFeature());break;case"IDER":this.setState({checked:t.target.checked,useIDER:t.target.checked},()=>this.setAmtFeature());break;default:this.setState({checked:t.target.checked})}},this.state={checked:!1,userConsent:"",useKVM:!1,useSOL:!1,useIDER:!1,redirection:!1,showMessage:!1,message:"",type:""}}componentDidMount(){this.fetchAmtFeatures()}render(){const{feature:t}=this.props,{showMessage:e,message:a,type:i}=this.state;return s.createElement(s.Fragment,null,e&&s.createElement(m.a,{message:a,type:i}),s.createElement("label",null,s.createElement(f,{checked:this.state.checked,onChange:this.handleCheckboxChange,className:"checkbox-class",disableCheckbox:2===this.props.getConnectState()}),s.createElement("span",{className:"label-text "+(2===this.props.getConnectState()?"grey-label":"")},t," ",Object(g.b)("amtFeatures.enabled"))))}}k.contextType=w.a},function(t,e,a){"use strict";a.d(e,"a",(function(){return o}));var s=a(31),i=a(2);class o{constructor(t,e,a){this.acc="",this.stateProcessorFac=new s.a(e,a,this.updateRFBState.bind(this)),this.parent=a,this.logger=t}processData(t){if(!Object(i.a)(t))return;this.acc+=t;let e=0;for(this.logger.verbose("Process Data ACC length:  "+this.acc.length);this.acc.length>0;){const t=this.stateProcessorFac.getProcessor(this.parent.state),a=this.parent.state;if(e=t.processState(this.acc),this.logger.verbose(`State  ${a}  Processed. cmdSize returned ${e}`),0===e)return;this.acc=this.acc.substring(e),this.logger.verbose(`remaining acc  ${this.acc.length} command size: ${e} new parent state: ${this.parent.state}`)}}updateRFBState(t){this.parent.state=t}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return i}));var s=a(14);class i extends s.a{constructor(t,e,a,s,i,o,n,r,l,c){super(t,e,a,s,i,o,n,r,l,c)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return l}));var s=a(30),i=a(1),o=a(2),n=a(43),r=a.n(n);class l extends s.a{constructor(t,e){super(),this.protocol=2,this.inflate=r.a.inflateInit(15),this.bpp=1,this.state=0,this.focusMode=0,this.useZRLE=!0,this.frameRateDelay=2,this.canvasCtx=e,this.sparecache={},this.buttonmask=0,this.canvasControl=this.canvasCtx.canvas,this.lastMouseMoveTime=(new Date).getTime(),this.logger=t,this.setDeskFocus=(t,e)=>{},this.getDeskFocus=t=>{}}processData(t){this.onProcessData(t)}onStateChange(t){this.logger.verbose("state change in AMTDesktop: "+t),0===t&&(this.canvasCtx.fillStyle="#FFFFFF",this.canvasCtx.fillRect(0,0,this.canvasCtx.canvas.width,this.canvasCtx.canvas.width))}start(){this.logger.verbose("Starting desktop here"),this.state=0,this.inflate.inflateReset(),this.onKvmDataPending=[],this.onKvmDataAck=-1,this.kvmDataSupported=!1;for(const t in this.sparecache)delete this.sparecache[t]}onSendKvmData(t){!0!==this.onKvmDataAck?this.onKvmDataPending.push(t):(Object(o.a)(this.urlvars)&&Object(o.a)(this.urlvars.kvmdatatrace)&&console.log(`KVM-Send (${t.length}) data`),t="\0KvmDataChannel\0"+t,this.onSend(String.fromCharCode(6,0,0,0)+i.a.IntToStr(t.length)+t),this.onKvmDataAck=!1)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return n}));var s=a(1),i=a(5),o=a(2);class n{constructor(t,e,a){this.parent=t,this.comm=e,this.debounceTime=a,this.mouseClickCompleted=!0,this.lastEvent=null}GrabMouseInput(){this.MouseInputGrab||(this.MouseInputGrab=!0)}UnGrabMouseInput(){if(!this.MouseInputGrab)return;const t=this.parent.canvasCtx.canvas;t.onmousemove=null,t.onmouseup=null,t.onmousedown=null,this.MouseInputGrab=!1}mousedown(t){return this.parent.buttonmask|=1<<t.button,this.mousemove(t)}mouseup(t){return this.parent.buttonmask&=65535-(1<<t.button),this.mousemove(t)}mousemove(t){if(4!==this.parent.state)return!0;const e=this.getPositionOfControl(this.parent.canvasControl);if(this.parent.lastMouseX=(t.pageX-e[0])*(this.parent.canvasControl.height/this.parent.canvasControl.offsetHeight),this.parent.lastMouseY=(t.pageY-e[1]+(Object(o.a)(this.parent.scrolldiv)?this.parent.scrolldiv.scrollTop:0))*(this.parent.canvasControl.width/this.parent.canvasControl.offsetWidth),Object(o.a)(this.parent.noMouseRotate)||(this.parent.lastMouseX2=i.a.crotX(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseY=i.a.crotY(this.parent,this.parent.lastMouseX,this.parent.lastMouseY),this.parent.lastMouseX=this.parent.lastMouseX2),this.comm.send(String.fromCharCode(5,this.parent.buttonmask)+s.a.ShortToStr(this.parent.lastMouseX)+s.a.ShortToStr(this.parent.lastMouseY)),this.parent.setDeskFocus("DeskFocus",this.parent.focusMode),0!==this.parent.focusMode){const t=Math.min(this.parent.lastMouseX,this.parent.canvasControl.width-this.parent.focusMode),a=Math.min(this.parent.lastMouseY,this.parent.canvasControl.height-this.parent.focusMode),s=2*this.parent.focusMode,i=this.parent.canvasControl,o=i.offsetHeight/this.parent.canvasControl.height,n=i.offsetWidth/this.parent.canvasControl.width,r=this.parent.getDeskFocus("DeskFocus"),l=this.getPositionOfControl(this.parent.canvasControl.parentElement);r.left=Math.max((t-this.parent.focusMode)*o,0)+(e[0]-l[0])+"px",r.top=Math.max((a-this.parent.focusMode)*n,0)+(e[1]-l[1])+"px",r.width=s*o-6+"px",r.height=s*o-6+"px"}return this.haltEvent(t)}haltEvent(t){return Object(o.a)(t.preventDefault)&&t.preventDefault(),Object(o.a)(t.stopPropagation)&&t.stopPropagation(),!1}getPositionOfControl(t){const e=Array(2);e[0]=e[1]=0;let a=t;for(;null!=a;)e[0]+=a.offsetLeft,e[1]+=a.offsetTop,a=a.offsetParent;return e}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return r}));var s,i=a(32),o=a(12),n=a(2);!function(t){t[t.Up=0]="Up",t[t.Down=1]="Down"}(s||(s={}));class r{constructor(t,e){this.Comms=e,this.parent=t}GrabKeyInput(){this.KeyInputGrab||(document.onkeyup=this.handleKeyUp.bind(this),document.onkeydown=this.handleKeyDown.bind(this),document.onkeypress=this.handleKeys.bind(this),this.KeyInputGrab=!0)}UnGrabKeyInput(){this.KeyInputGrab&&(document.onkeyup=null,document.onkeydown=null,document.onkeypress=null,this.KeyInputGrab=!1)}handleKeys(t){return this.haltEvent(t)}haltEvent(t){return Object(n.a)(t.preventDefault)&&t.preventDefault(),Object(n.a)(t.stopPropagation)&&t.stopPropagation(),!1}handleKeyUp(t){return this.handleKeyEvent(s.Up,t)}handleKeyDown(t){return this.handleKeyEvent(s.Down,t)}handleKeyEvent(t,e){let a=e;if(Object(n.a)(a)||(a=window.event),Object(n.a)(a.code)){const e=i.a.convertAMTKeyCode(a);this.parent.logger.verbose(`Key ${t} : ${String(e)}`),null!=e&&o.a.sendKey(this.Comms,e,t)}else{let e=a.keyCode;173===e&&(e=189),61===e&&(e=187);let s=e;!1===a.shiftKey&&e>=65&&e<=90&&(s=e+32),e>=112&&e<=124&&(s=e+65358),8===e&&(s=65288),9===e&&(s=65289),13===e&&(s=65293),16===e&&(s=65505),17===e&&(s=65507),18===e&&(s=65513),27===e&&(s=65307),33===e&&(s=65365),34===e&&(s=65366),35===e&&(s=65367),36===e&&(s=65360),37===e&&(s=65361),38===e&&(s=65362),39===e&&(s=65363),40===e&&(s=65364),45===e&&(s=65379),46===e&&(s=65535),e>=96&&e<=105&&(s=e-48),106===e&&(s=42),107===e&&(s=43),109===e&&(s=45),110===e&&(s=46),111===e&&(s=47),186===e&&(s=59),187===e&&(s=61),188===e&&(s=44),189===e&&(s=45),190===e&&(s=46),191===e&&(s=47),192===e&&(s=96),219===e&&(s=91),220===e&&(s=92),221===e&&(s=93),222===e&&(s=39),this.parent.logger.verbose(`Key ${t}: ${e}  = ${s}`),o.a.sendKey(this.Comms,s,t)}return this.haltEvent(a)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(){this.terminalEmulation=1,this.fxEmulation=0,this.fxLineBreak=0,this.AsciiToUnicode=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,171,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.AsciiToUnicodeIntel=[199,252,233,226,228,224,229,231,234,235,232,239,238,236,196,197,201,230,198,244,246,242,251,249,255,214,220,162,163,165,8359,402,225,237,243,250,241,209,170,218,191,8976,172,189,188,161,174,187,9619,9618,9617,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9576,9560,9554,9555,9579,9578,9496,9484,9608,9604,9611,9616,9600,945,223,915,960,931,963,181,964,966,952,8486,948,8734,248,949,8719,8801,177,8805,8806,8992,8993,247,8776,176,8226,183,8730,8319,178,8718,160],this.StateChange=t=>{},this.TermSendKeys=t=>this.onSend(t)}}},function(t,e,a){"use strict";a.d(e,"a",(function(){return s}));class s{constructor(t){this.processData=t=>{null!=this.terminal.capture&&(this.terminal.capture+=t);let e="";for(let a=0;a<t.length;a++){const s=t.charCodeAt(a);"J"===t[a]?this.clearTerminal():e+=0!=(128&s)?String.fromCharCode(this.terminal.AsciiToUnicode[127&s]):""+t[a]}this.processDataToXterm(e)},this.terminal=t}}},function(module,exports){var ZLIB=ZLIB||{},BASE;void 0===ZLIB.common_initialized&&(ZLIB.Z_NO_FLUSH=0,ZLIB.Z_PARTIAL_FLUSH=1,ZLIB.Z_SYNC_FLUSH=2,ZLIB.Z_FULL_FLUSH=3,ZLIB.Z_FINISH=4,ZLIB.Z_BLOCK=5,ZLIB.Z_TREES=6,ZLIB.Z_OK=0,ZLIB.Z_STREAM_END=1,ZLIB.Z_NEED_DICT=2,ZLIB.Z_ERRNO=-1,ZLIB.Z_STREAM_ERROR=-2,ZLIB.Z_DATA_ERROR=-3,ZLIB.Z_MEM_ERROR=-4,ZLIB.Z_BUF_ERROR=-5,ZLIB.Z_VERSION_ERROR=-6,ZLIB.Z_DEFLATED=8,ZLIB.z_stream=function(){this.next_in=0,this.avail_in=0,this.total_in=0,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=null,this.state=null,this.data_type=0,this.adler=0,this.input_data="",this.output_data="",this.error=0,this.checksum_function=null},ZLIB.gz_header=function(){this.text=0,this.time=0,this.xflags=0,this.os=255,this.extra=null,this.extra_len=0,this.extra_max=0,this.name=null,this.name_max=0,this.comment=null,this.comm_max=0,this.hcrc=0,this.done=0},ZLIB.common_initialized=!0),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-inflate.js"),function(){var DEF_WBITS=15,HEAD=0,FLAGS=1,TIME=2,OS=3,EXLEN=4,EXTRA=5,NAME=6,COMMENT=7,HCRC=8,DICTID=9,DICT=10,TYPE=11,TYPEDO=12,STORED=13,COPY_=14,COPY=15,TABLE=16,LENLENS=17,CODELENS=18,LEN_=19,LEN=20,LENEXT=21,DIST=22,DISTEXT=23,MATCH=24,LIT=25,CHECK=26,LENGTH=27,DONE=28,BAD=29,MEM=30,SYNC=31,ENOUGH_LENS=852,ENOUGH_DISTS=592,ENOUGH=ENOUGH_LENS+ENOUGH_DISTS,CODES=0,LENS=1,DISTS=2,inflate_table_lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],inflate_table_lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,203,69],inflate_table_dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],inflate_table_dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function inflate_table(t,e){var a,s,i,o,n,r,l,c,h,d,p,u,b,v,f,m,g,S,C,A,E,w,k=t.next,I=e==DISTS?t.distbits:t.lenbits,x=t.work,y=t.lens,T=e==DISTS?t.nlen:0,R=t.codes;a=e==LENS?t.nlen:e==DISTS?t.ndist:19;var O=new Array(16),B=new Array(16);for(s=0;s<=15;s++)O[s]=0;for(i=0;i<a;i++)O[y[T+i]]++;for(r=I,n=15;n>=1&&0==O[n];n--);if(r>n&&(r=n),0==n)return m={op:64,bits:1,val:0},R[k++]=m,R[k++]=m,e==DISTS?t.distbits=1:t.lenbits=1,t.next=k,0;for(o=1;o<n&&0==O[o];o++);for(r<o&&(r=o),h=1,s=1;s<=15;s++)if(h<<=1,(h-=O[s])<0)return-1;if(h>0&&(e==CODES||1!=n))return t.next=k,-1;for(B[1]=0,s=1;s<15;s++)B[s+1]=B[s]+O[s];for(i=0;i<a;i++)0!=y[T+i]&&(x[B[y[T+i]]++]=i);switch(e){case CODES:S=A=x,C=0,E=0,w=19;break;case LENS:S=inflate_table_lbase,C=-257,A=inflate_table_lext,E=-257,w=256;break;default:S=inflate_table_dbase,A=inflate_table_dext,C=0,E=0,w=-1}if(p=0,i=0,s=o,g=k,l=r,c=0,v=-1,f=(d=1<<r)-1,e==LENS&&d>=ENOUGH_LENS||e==DISTS&&d>=ENOUGH_DISTS)return t.next=k,1;for(;;){m={op:0,bits:s-c,val:0},x[i]<w?m.val=x[i]:x[i]>w?(m.op=A[E+x[i]],m.val=S[C+x[i]]):m.op=96,u=1<<s-c,o=b=1<<l;do{R[g+(p>>>c)+(b-=u)]=m}while(0!=b);for(u=1<<s-1;p&u;)u>>>=1;if(0!=u?(p&=u-1,p+=u):p=0,i++,0==--O[s]){if(s==n)break;s=y[T+x[i]]}if(s>r&&(p&f)!=v){for(0==c&&(c=r),g+=o,h=1<<(l=s-c);l+c<n&&!((h-=O[l+c])<=0);)l++,h<<=1;if(d+=1<<l,e==LENS&&d>=ENOUGH_LENS||e==DISTS&&d>=ENOUGH_DISTS)return t.next=k,1;R[k+(v=p&f)]={op:l,bits:r,val:g-k}}}return 0!=p&&(R[g+p]={op:64,bits:s-c,val:0}),t.next=k+d,e==DISTS?t.distbits=r:t.lenbits=r,0}function inflate_fast(t,e){var a,s,i,o,n,r,l,c,h,d,p,u,b,v,f,m,g,S,C,A,E,w,k=-1,I=-1;a=t.state,s=t.input_data,o=(i=t.next_in)+t.avail_in-5,r=(n=t.next_out)-(e-t.avail_out),l=n+(t.avail_out-257),c=a.wsize,h=a.whave,d=a.wnext,p=a.window,u=a.hold,b=a.bits,v=a.codes,f=a.lencode,m=a.distcode,g=(1<<a.lenbits)-1,S=(1<<a.distbits)-1;t:do{b<15&&(u+=(255&s.charCodeAt(i++))<<b,b+=8,u+=(255&s.charCodeAt(i++))<<b,b+=8),C=v[f+(u&g)];e:for(;;){if(u>>>=A=C.bits,b-=A,0==(A=C.op))t.output_data+=String.fromCharCode(C.val),n++;else{if(!(16&A)){if(0==(64&A)){C=v[f+(C.val+(u&(1<<A)-1))];continue e}if(32&A){a.mode=TYPE;break t}t.msg="invalid literal/length code",a.mode=BAD;break t}E=C.val,(A&=15)&&(b<A&&(u+=(255&s.charCodeAt(i++))<<b,b+=8),E+=u&(1<<A)-1,u>>>=A,b-=A),b<15&&(u+=(255&s.charCodeAt(i++))<<b,b+=8,u+=(255&s.charCodeAt(i++))<<b,b+=8),C=v[m+(u&S)];a:for(;;){if(u>>>=A=C.bits,b-=A,!(16&(A=C.op))){if(0==(64&A)){C=v[m+(C.val+(u&(1<<A)-1))];continue a}t.msg="invalid distance code",a.mode=BAD;break t}if(w=C.val,b<(A&=15)&&(u+=(255&s.charCodeAt(i++))<<b,(b+=8)<A&&(u+=(255&s.charCodeAt(i++))<<b,b+=8)),w+=u&(1<<A)-1,u>>>=A,b-=A,w>(A=n-r)){if((A=w-A)>h&&a.sane){t.msg="invalid distance too far back",a.mode=BAD;break t}k=0,I=-1,0==d?(k+=c-A,A<E&&(E-=A,t.output_data+=p.substring(k,k+A),n+=A,A=0,k=-1,I=n-w)):(k+=d-A,A<E&&(E-=A,t.output_data+=p.substring(k,k+A),k=-1,I=(n+=A)-w))}else k=-1,I=n-w;if(k>=0)t.output_data+=p.substring(k,k+E),n+=E,k+=E;else{var x=E;for(x>n-I&&(x=n-I),t.output_data+=t.output_data.substring(I,I+x),n+=x,I+=x,n+=E-=x;E>2;)t.output_data+=t.output_data.charAt(I++),t.output_data+=t.output_data.charAt(I++),t.output_data+=t.output_data.charAt(I++),E-=3;E&&(t.output_data+=t.output_data.charAt(I++),E>1&&(t.output_data+=t.output_data.charAt(I++)))}break a}}break e}}while(i<o&&n<l);i-=E=b>>>3,u&=(1<<(b-=E<<3))-1,t.next_in=i,t.next_out=n,t.avail_in=i<o?o-i+5:5-(i-o),t.avail_out=n<l?l-n+257:257-(n-l),a.hold=u,a.bits=b}function new_array(t){var e,a=new Array(t);for(e=0;e<t;e++)a[e]=0;return a}function getarg(t,e,a){return t&&e in t?t[e]:a}function checksum_none(){return 0}function inflate_state(){var t;this.mode=0,this.last=0,this.wrap=0,this.havedict=0,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=0,this.distcode=0,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=0,this.lens=new_array(320),this.work=new_array(288),this.codes=new Array(ENOUGH);var e={op:0,bits:0,val:0};for(t=0;t<ENOUGH;t++)this.codes[t]=e;this.sane=0,this.back=0,this.was=0}ZLIB.inflate_copyright=" inflate 1.2.6 Copyright 1995-2012 Mark Adler ",ZLIB.inflateResetKeep=function(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg=null,e.wrap&&(t.adler=1&e.wrap),e.mode=HEAD,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=0,e.distcode=0,e.next=0,e.sane=1,e.back=-1,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.inflateReset=function(t,e){var a,s;return t&&t.state?(s=t.state,void 0===e&&(e=DEF_WBITS),e<0?(a=0,e=-e):(a=1+(e>>>4),e<48&&(e&=15)),1==a&&"function"==typeof ZLIB.adler32?t.checksum_function=ZLIB.adler32:2==a&&"function"==typeof ZLIB.crc32?t.checksum_function=ZLIB.crc32:t.checksum_function=checksum_none,e&&(e<8||e>15)?ZLIB.Z_STREAM_ERROR:(s.window&&s.wbits!=e&&(s.window=null),s.wrap=a,s.wbits=e,s.wsize=0,s.whave=0,s.wnext=0,ZLIB.inflateResetKeep(t))):ZLIB.Z_STREAM_ERROR},ZLIB.inflateInit=function(t){var e=new ZLIB.z_stream;return e.state=new inflate_state,ZLIB.inflateReset(e,t),e},ZLIB.inflatePrime=function(t,e,a){var s;return t&&t.state?(s=t.state,e<0?(s.hold=0,s.bits=0,ZLIB.Z_OK):e>16||s.bits+e>32?ZLIB.Z_STREAM_ERROR:(a&=(1<<e)-1,s.hold+=a<<s.bits,s.bits+=e,ZLIB.Z_OK)):ZLIB.Z_STREAM_ERROR};var lenfix_ary=null,lenfix_def="([    {op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},{op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},    {op:0,bits:9,val:192},{op:16,bits:7,val:10},{op:0,bits:8,val:96},{op:0,bits:8,val:32},{op:0,bits:9,val:160},{op:0,bits:8,val:0},{op:0,bits:8,val:128},    {op:0,bits:8,val:64},{op:0,bits:9,val:224},{op:16,bits:7,val:6},{op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:144},{op:19,bits:7,val:59},    {op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:208},{op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:176},    {op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},{op:0,bits:9,val:240},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},    {op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},{op:0,bits:8,val:52},{op:0,bits:9,val:200},{op:17,bits:7,val:13},{op:0,bits:8,val:100},    {op:0,bits:8,val:36},{op:0,bits:9,val:168},{op:0,bits:8,val:4},{op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:232},{op:16,bits:7,val:8},    {op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:152},{op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:216},    {op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},{op:0,bits:9,val:184},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},    {op:0,bits:9,val:248},{op:16,bits:7,val:3},{op:0,bits:8,val:82},{op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},    {op:0,bits:8,val:50},{op:0,bits:9,val:196},{op:17,bits:7,val:11},{op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:164},{op:0,bits:8,val:2},    {op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:228},{op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:148},    {op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},{op:0,bits:9,val:212},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},    {op:0,bits:9,val:180},{op:0,bits:8,val:10},{op:0,bits:8,val:138},{op:0,bits:8,val:74},{op:0,bits:9,val:244},{op:16,bits:7,val:5},{op:0,bits:8,val:86},    {op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:204},{op:17,bits:7,val:15},    {op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:172},{op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:236},    {op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},{op:0,bits:9,val:156},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},    {op:0,bits:9,val:220},{op:18,bits:7,val:27},{op:0,bits:8,val:110},{op:0,bits:8,val:46},{op:0,bits:9,val:188},{op:0,bits:8,val:14},{op:0,bits:8,val:142},    {op:0,bits:8,val:78},{op:0,bits:9,val:252},{op:96,bits:7,val:0},{op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},    {op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:194},{op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:162},    {op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},{op:0,bits:9,val:226},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},    {op:0,bits:9,val:146},{op:19,bits:7,val:59},{op:0,bits:8,val:121},{op:0,bits:8,val:57},{op:0,bits:9,val:210},{op:17,bits:7,val:17},{op:0,bits:8,val:105},    {op:0,bits:8,val:41},{op:0,bits:9,val:178},{op:0,bits:8,val:9},{op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:242},{op:16,bits:7,val:4},    {op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},{op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:202},    {op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},{op:0,bits:9,val:170},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},    {op:0,bits:9,val:234},{op:16,bits:7,val:8},{op:0,bits:8,val:93},{op:0,bits:8,val:29},{op:0,bits:9,val:154},{op:20,bits:7,val:83},{op:0,bits:8,val:125},    {op:0,bits:8,val:61},{op:0,bits:9,val:218},{op:18,bits:7,val:23},{op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:186},{op:0,bits:8,val:13},    {op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:250},{op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},    {op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},{op:0,bits:9,val:198},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},    {op:0,bits:9,val:166},{op:0,bits:8,val:3},{op:0,bits:8,val:131},{op:0,bits:8,val:67},{op:0,bits:9,val:230},{op:16,bits:7,val:7},{op:0,bits:8,val:91},    {op:0,bits:8,val:27},{op:0,bits:9,val:150},{op:20,bits:7,val:67},{op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:214},{op:18,bits:7,val:19},    {op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:182},{op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:246},    {op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},{op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},    {op:0,bits:9,val:206},{op:17,bits:7,val:15},{op:0,bits:8,val:103},{op:0,bits:8,val:39},{op:0,bits:9,val:174},{op:0,bits:8,val:7},{op:0,bits:8,val:135},    {op:0,bits:8,val:71},{op:0,bits:9,val:238},{op:16,bits:7,val:9},{op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:158},{op:20,bits:7,val:99},    {op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:222},{op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:190},    {op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},{op:0,bits:9,val:254},{op:96,bits:7,val:0},{op:0,bits:8,val:80},{op:0,bits:8,val:16},    {op:20,bits:8,val:115},{op:18,bits:7,val:31},{op:0,bits:8,val:112},{op:0,bits:8,val:48},{op:0,bits:9,val:193},{op:16,bits:7,val:10},{op:0,bits:8,val:96},    {op:0,bits:8,val:32},{op:0,bits:9,val:161},{op:0,bits:8,val:0},{op:0,bits:8,val:128},{op:0,bits:8,val:64},{op:0,bits:9,val:225},{op:16,bits:7,val:6},    {op:0,bits:8,val:88},{op:0,bits:8,val:24},{op:0,bits:9,val:145},{op:19,bits:7,val:59},{op:0,bits:8,val:120},{op:0,bits:8,val:56},{op:0,bits:9,val:209},    {op:17,bits:7,val:17},{op:0,bits:8,val:104},{op:0,bits:8,val:40},{op:0,bits:9,val:177},{op:0,bits:8,val:8},{op:0,bits:8,val:136},{op:0,bits:8,val:72},    {op:0,bits:9,val:241},{op:16,bits:7,val:4},{op:0,bits:8,val:84},{op:0,bits:8,val:20},{op:21,bits:8,val:227},{op:19,bits:7,val:43},{op:0,bits:8,val:116},    {op:0,bits:8,val:52},{op:0,bits:9,val:201},{op:17,bits:7,val:13},{op:0,bits:8,val:100},{op:0,bits:8,val:36},{op:0,bits:9,val:169},{op:0,bits:8,val:4},    {op:0,bits:8,val:132},{op:0,bits:8,val:68},{op:0,bits:9,val:233},{op:16,bits:7,val:8},{op:0,bits:8,val:92},{op:0,bits:8,val:28},{op:0,bits:9,val:153},    {op:20,bits:7,val:83},{op:0,bits:8,val:124},{op:0,bits:8,val:60},{op:0,bits:9,val:217},{op:18,bits:7,val:23},{op:0,bits:8,val:108},{op:0,bits:8,val:44},    {op:0,bits:9,val:185},{op:0,bits:8,val:12},{op:0,bits:8,val:140},{op:0,bits:8,val:76},{op:0,bits:9,val:249},{op:16,bits:7,val:3},{op:0,bits:8,val:82},    {op:0,bits:8,val:18},{op:21,bits:8,val:163},{op:19,bits:7,val:35},{op:0,bits:8,val:114},{op:0,bits:8,val:50},{op:0,bits:9,val:197},{op:17,bits:7,val:11},    {op:0,bits:8,val:98},{op:0,bits:8,val:34},{op:0,bits:9,val:165},{op:0,bits:8,val:2},{op:0,bits:8,val:130},{op:0,bits:8,val:66},{op:0,bits:9,val:229},    {op:16,bits:7,val:7},{op:0,bits:8,val:90},{op:0,bits:8,val:26},{op:0,bits:9,val:149},{op:20,bits:7,val:67},{op:0,bits:8,val:122},{op:0,bits:8,val:58},    {op:0,bits:9,val:213},{op:18,bits:7,val:19},{op:0,bits:8,val:106},{op:0,bits:8,val:42},{op:0,bits:9,val:181},{op:0,bits:8,val:10},{op:0,bits:8,val:138},    {op:0,bits:8,val:74},{op:0,bits:9,val:245},{op:16,bits:7,val:5},{op:0,bits:8,val:86},{op:0,bits:8,val:22},{op:64,bits:8,val:0},{op:19,bits:7,val:51},    {op:0,bits:8,val:118},{op:0,bits:8,val:54},{op:0,bits:9,val:205},{op:17,bits:7,val:15},{op:0,bits:8,val:102},{op:0,bits:8,val:38},{op:0,bits:9,val:173},    {op:0,bits:8,val:6},{op:0,bits:8,val:134},{op:0,bits:8,val:70},{op:0,bits:9,val:237},{op:16,bits:7,val:9},{op:0,bits:8,val:94},{op:0,bits:8,val:30},    {op:0,bits:9,val:157},{op:20,bits:7,val:99},{op:0,bits:8,val:126},{op:0,bits:8,val:62},{op:0,bits:9,val:221},{op:18,bits:7,val:27},{op:0,bits:8,val:110},    {op:0,bits:8,val:46},{op:0,bits:9,val:189},{op:0,bits:8,val:14},{op:0,bits:8,val:142},{op:0,bits:8,val:78},{op:0,bits:9,val:253},{op:96,bits:7,val:0},    {op:0,bits:8,val:81},{op:0,bits:8,val:17},{op:21,bits:8,val:131},{op:18,bits:7,val:31},{op:0,bits:8,val:113},{op:0,bits:8,val:49},{op:0,bits:9,val:195},    {op:16,bits:7,val:10},{op:0,bits:8,val:97},{op:0,bits:8,val:33},{op:0,bits:9,val:163},{op:0,bits:8,val:1},{op:0,bits:8,val:129},{op:0,bits:8,val:65},    {op:0,bits:9,val:227},{op:16,bits:7,val:6},{op:0,bits:8,val:89},{op:0,bits:8,val:25},{op:0,bits:9,val:147},{op:19,bits:7,val:59},{op:0,bits:8,val:121},    {op:0,bits:8,val:57},{op:0,bits:9,val:211},{op:17,bits:7,val:17},{op:0,bits:8,val:105},{op:0,bits:8,val:41},{op:0,bits:9,val:179},{op:0,bits:8,val:9},    {op:0,bits:8,val:137},{op:0,bits:8,val:73},{op:0,bits:9,val:243},{op:16,bits:7,val:4},{op:0,bits:8,val:85},{op:0,bits:8,val:21},{op:16,bits:8,val:258},    {op:19,bits:7,val:43},{op:0,bits:8,val:117},{op:0,bits:8,val:53},{op:0,bits:9,val:203},{op:17,bits:7,val:13},{op:0,bits:8,val:101},{op:0,bits:8,val:37},    {op:0,bits:9,val:171},{op:0,bits:8,val:5},{op:0,bits:8,val:133},{op:0,bits:8,val:69},{op:0,bits:9,val:235},{op:16,bits:7,val:8},{op:0,bits:8,val:93},    {op:0,bits:8,val:29},{op:0,bits:9,val:155},{op:20,bits:7,val:83},{op:0,bits:8,val:125},{op:0,bits:8,val:61},{op:0,bits:9,val:219},{op:18,bits:7,val:23},    {op:0,bits:8,val:109},{op:0,bits:8,val:45},{op:0,bits:9,val:187},{op:0,bits:8,val:13},{op:0,bits:8,val:141},{op:0,bits:8,val:77},{op:0,bits:9,val:251},    {op:16,bits:7,val:3},{op:0,bits:8,val:83},{op:0,bits:8,val:19},{op:21,bits:8,val:195},{op:19,bits:7,val:35},{op:0,bits:8,val:115},{op:0,bits:8,val:51},    {op:0,bits:9,val:199},{op:17,bits:7,val:11},{op:0,bits:8,val:99},{op:0,bits:8,val:35},{op:0,bits:9,val:167},{op:0,bits:8,val:3},{op:0,bits:8,val:131},    {op:0,bits:8,val:67},{op:0,bits:9,val:231},{op:16,bits:7,val:7},{op:0,bits:8,val:91},{op:0,bits:8,val:27},{op:0,bits:9,val:151},{op:20,bits:7,val:67},    {op:0,bits:8,val:123},{op:0,bits:8,val:59},{op:0,bits:9,val:215},{op:18,bits:7,val:19},{op:0,bits:8,val:107},{op:0,bits:8,val:43},{op:0,bits:9,val:183},    {op:0,bits:8,val:11},{op:0,bits:8,val:139},{op:0,bits:8,val:75},{op:0,bits:9,val:247},{op:16,bits:7,val:5},{op:0,bits:8,val:87},{op:0,bits:8,val:23},    {op:64,bits:8,val:0},{op:19,bits:7,val:51},{op:0,bits:8,val:119},{op:0,bits:8,val:55},{op:0,bits:9,val:207},{op:17,bits:7,val:15},{op:0,bits:8,val:103},    {op:0,bits:8,val:39},{op:0,bits:9,val:175},{op:0,bits:8,val:7},{op:0,bits:8,val:135},{op:0,bits:8,val:71},{op:0,bits:9,val:239},{op:16,bits:7,val:9},    {op:0,bits:8,val:95},{op:0,bits:8,val:31},{op:0,bits:9,val:159},{op:20,bits:7,val:99},{op:0,bits:8,val:127},{op:0,bits:8,val:63},{op:0,bits:9,val:223},    {op:18,bits:7,val:27},{op:0,bits:8,val:111},{op:0,bits:8,val:47},{op:0,bits:9,val:191},{op:0,bits:8,val:15},{op:0,bits:8,val:143},{op:0,bits:8,val:79},    {op:0,bits:9,val:255}])",distfix_ary=null,distfix_def="([    {op:16,bits:5,val:1},{op:23,bits:5,val:257},{op:19,bits:5,val:17},{op:27,bits:5,val:4097},{op:17,bits:5,val:5},{op:25,bits:5,val:1025},    {op:21,bits:5,val:65},{op:29,bits:5,val:16385},{op:16,bits:5,val:3},{op:24,bits:5,val:513},{op:20,bits:5,val:33},{op:28,bits:5,val:8193},    {op:18,bits:5,val:9},{op:26,bits:5,val:2049},{op:22,bits:5,val:129},{op:64,bits:5,val:0},{op:16,bits:5,val:2},{op:23,bits:5,val:385},    {op:19,bits:5,val:25},{op:27,bits:5,val:6145},{op:17,bits:5,val:7},{op:25,bits:5,val:1537},{op:21,bits:5,val:97},{op:29,bits:5,val:24577},    {op:16,bits:5,val:4},{op:24,bits:5,val:769},{op:20,bits:5,val:49},{op:28,bits:5,val:12289},{op:18,bits:5,val:13},{op:26,bits:5,val:3073},    {op:22,bits:5,val:193},{op:64,bits:5,val:0}])";function fixedtables(state){var i;for(lenfix_ary||(lenfix_ary=eval(lenfix_def)),distfix_ary||(distfix_ary=eval(distfix_def)),state.lencode=0,state.distcode=512,i=0;i<512;i++)state.codes[i]=lenfix_ary[i];for(i=0;i<32;i++)state.codes[i+512]=distfix_ary[i];state.lenbits=9,state.distbits=5}function updatewindow(t){var e=t.state,a=t.output_data.length;return null===e.window&&(e.window=""),0==e.wsize&&(e.wsize=1<<e.wbits),a>=e.wsize?e.window=t.output_data.substring(a-e.wsize):e.whave+a<e.wsize?e.window+=t.output_data:e.window=e.window.substring(e.whave-(e.wsize-a))+t.output_data,e.whave=e.window.length,e.whave<e.wsize?e.wnext=e.whave:e.wnext=0,0}function CRC2(t,e){var a=[255&e,e>>>8&255];t.state.check=t.checksum_function(t.state.check,a,0,2)}function CRC4(t,e){var a=[255&e,e>>>8&255,e>>>16&255,e>>>24&255];t.state.check=t.checksum_function(t.state.check,a,0,4)}function LOAD(t,e){return e.strm=t,e.left=t.avail_out,e.next=t.next_in,e.have=t.avail_in,e.hold=t.state.hold,e.bits=t.state.bits,e}function RESTORE(t){var e=t.strm;e.next_in=t.next,e.avail_out=t.left,e.avail_in=t.have,e.state.hold=t.hold,e.state.bits=t.bits}function INITBITS(t){t.hold=0,t.bits=0}function PULLBYTE(t){return 0!=t.have&&(t.have--,t.hold+=(255&t.strm.input_data.charCodeAt(t.next++))<<t.bits,t.bits+=8,!0)}function NEEDBITS(t,e){for(;t.bits<e;)if(!PULLBYTE(t))return!1;return!0}function BITS(t,e){return t.hold&(1<<e)-1}function DROPBITS(t,e){t.hold>>>=e,t.bits-=e}function BYTEBITS(t){t.hold>>>=7&t.bits,t.bits-=7&t.bits}function REVERSE(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}var inflate_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];ZLIB.inflate=function(t,e){var a,s,i,o,n,r,l,c,h,d=-1,p=-1;if(!t||!t.state||!t.input_data&&0!=t.avail_in)return ZLIB.Z_STREAM_ERROR;(a=t.state).mode==TYPE&&(a.mode=TYPEDO),LOAD(t,s={}),i=s.have,o=s.left,h=ZLIB.Z_OK;t:for(;;)switch(a.mode){case HEAD:if(0==a.wrap){a.mode=TYPEDO;break}if(!NEEDBITS(s,16))break t;if(2&a.wrap&&35615==s.hold){a.check=t.checksum_function(0,null,0,0),CRC2(t,s.hold),INITBITS(s),a.mode=FLAGS;break}if(a.flags=0,null!==a.head&&(a.head.done=-1),!(1&a.wrap)||((BITS(s,8)<<8)+(s.hold>>>8))%31){t.msg="incorrect header check",a.mode=BAD;break}if(BITS(s,4)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",a.mode=BAD;break}if(DROPBITS(s,4),c=BITS(s,4)+8,0==a.wbits)a.wbits=c;else if(c>a.wbits){t.msg="invalid window size",a.mode=BAD;break}a.dmax=1<<c,t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=512&s.hold?DICTID:TYPE,INITBITS(s);break;case FLAGS:if(!NEEDBITS(s,16))break t;if(a.flags=s.hold,(255&a.flags)!=ZLIB.Z_DEFLATED){t.msg="unknown compression method",a.mode=BAD;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=BAD;break}null!==a.head&&(a.head.text=s.hold>>>8&1),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.mode=TIME;case TIME:if(!NEEDBITS(s,32))break t;null!==a.head&&(a.head.time=s.hold),512&a.flags&&CRC4(t,s.hold),INITBITS(s),a.mode=OS;case OS:if(!NEEDBITS(s,16))break t;null!==a.head&&(a.head.xflags=255&s.hold,a.head.os=s.hold>>>8),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.mode=EXLEN;case EXLEN:if(1024&a.flags){if(!NEEDBITS(s,16))break t;a.length=s.hold,null!==a.head&&(a.head.extra_len=s.hold),512&a.flags&&CRC2(t,s.hold),INITBITS(s),a.head.extra=""}else null!==a.head&&(a.head.extra=null);a.mode=EXTRA;case EXTRA:if(1024&a.flags&&((n=a.length)>s.have&&(n=s.have),n&&(null!==a.head&&null!==a.head.extra&&(c=a.head.extra_len-a.length,a.head.extra+=t.input_data.substring(s.next,s.next+(c+n>a.head.extra_max?a.head.extra_max-c:n))),512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,n)),s.have-=n,s.next+=n,a.length-=n),a.length))break t;a.length=0,a.mode=NAME;case NAME:if(2048&a.flags){if(0==s.have)break t;null!==a.head&&null===a.head.name&&(a.head.name=""),n=0;do{if(c=t.input_data.charAt(s.next+n),n++,"\0"===c)break;null!==a.head&&a.length<a.head.name_max&&(a.head.name+=c,a.length++)}while(n<s.have);if(512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,n)),s.have-=n,s.next+=n,"\0"!==c)break t}else null!==a.head&&(a.head.name=null);a.length=0,a.mode=COMMENT;case COMMENT:if(4096&a.flags){if(0==s.have)break t;n=0,null!==a.head&&null===a.head.comment&&(a.head.comment="");do{if(c=t.input_data.charAt(s.next+n),n++,"\0"===c)break;null!==a.head&&a.length<a.head.comm_max&&(a.head.comment+=c,a.length++)}while(n<s.have);if(512&a.flags&&(a.check=t.checksum_function(a.check,t.input_data,s.next,n)),s.have-=n,s.next+=n,"\0"!==c)break t}else null!==a.head&&(a.head.comment=null);a.mode=HCRC;case HCRC:if(512&a.flags){if(!NEEDBITS(s,16))break t;if(s.hold!=(65535&a.check)){t.msg="header crc mismatch",a.mode=BAD;break}INITBITS(s)}null!==a.head&&(a.head.hcrc=a.flags>>>9&1,a.head.done=1),t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=TYPE;break;case DICTID:if(!NEEDBITS(s,32))break t;t.adler=a.check=REVERSE(s.hold),INITBITS(s),a.mode=DICT;case DICT:if(0==a.havedict)return RESTORE(s),ZLIB.Z_NEED_DICT;t.adler=a.check=t.checksum_function(0,null,0,0),a.mode=TYPE;case TYPE:if(e==ZLIB.Z_BLOCK||e==ZLIB.Z_TREES)break t;case TYPEDO:if(a.last){BYTEBITS(s),a.mode=CHECK;break}if(!NEEDBITS(s,3))break t;switch(a.last=BITS(s,1),DROPBITS(s,1),BITS(s,2)){case 0:a.mode=STORED;break;case 1:if(fixedtables(a),a.mode=LEN_,e==ZLIB.Z_TREES){DROPBITS(s,2);break t}break;case 2:a.mode=TABLE;break;case 3:t.msg="invalid block type",a.mode=BAD}DROPBITS(s,2);break;case STORED:if(BYTEBITS(s),!NEEDBITS(s,32))break t;if((65535&s.hold)!=(s.hold>>>16&65535^65535)){t.msg="invalid stored block lengths",a.mode=BAD;break}if(a.length=65535&s.hold,INITBITS(s),a.mode=COPY_,e==ZLIB.Z_TREES)break t;case COPY_:a.mode=COPY;case COPY:if(n=a.length){if(n>s.have&&(n=s.have),n>s.left&&(n=s.left),0==n)break t;t.output_data+=t.input_data.substring(s.next,s.next+n),t.next_out+=n,s.have-=n,s.next+=n,s.left-=n,a.length-=n;break}a.mode=TYPE;break;case TABLE:if(!NEEDBITS(s,14))break t;if(a.nlen=BITS(s,5)+257,DROPBITS(s,5),a.ndist=BITS(s,5)+1,DROPBITS(s,5),a.ncode=BITS(s,4)+4,DROPBITS(s,4),a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=BAD;break}a.have=0,a.mode=LENLENS;case LENLENS:for(;a.have<a.ncode;){if(!NEEDBITS(s,3))break t;var u=BITS(s,3);a.lens[inflate_order[a.have++]]=u,DROPBITS(s,3)}for(;a.have<19;)a.lens[inflate_order[a.have++]]=0;if(a.next=0,a.lencode=0,a.lenbits=7,h=inflate_table(a,CODES)){t.msg="invalid code lengths set",a.mode=BAD;break}a.have=0,a.mode=CODELENS;case CODELENS:for(;a.have<a.nlen+a.ndist;){for(;!((r=a.codes[a.lencode+BITS(s,a.lenbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(r.val<16)DROPBITS(s,r.bits),a.lens[a.have++]=r.val;else{if(16==r.val){if(!NEEDBITS(s,r.bits+2))break t;if(DROPBITS(s,r.bits),0==a.have){t.msg="invalid bit length repeat",a.mode=BAD;break}c=a.lens[a.have-1],n=3+BITS(s,2),DROPBITS(s,2)}else if(17==r.val){if(!NEEDBITS(s,r.bits+3))break t;DROPBITS(s,r.bits),c=0,n=3+BITS(s,3),DROPBITS(s,3)}else{if(!NEEDBITS(s,r.bits+7))break t;DROPBITS(s,r.bits),c=0,n=11+BITS(s,7),DROPBITS(s,7)}if(a.have+n>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=BAD;break}for(;n--;)a.lens[a.have++]=c}}if(a.mode==BAD)break;if(0==a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=BAD;break}if(a.next=0,a.lencode=a.next,a.lenbits=9,h=inflate_table(a,LENS)){t.msg="invalid literal/lengths set",a.mode=BAD;break}if(a.distcode=a.next,a.distbits=6,h=inflate_table(a,DISTS)){t.msg="invalid distances set",a.mode=BAD;break}if(a.mode=LEN_,e==ZLIB.Z_TREES)break t;case LEN_:a.mode=LEN;case LEN:if(s.have>=6&&s.left>=258){RESTORE(s),inflate_fast(t,o),LOAD(t,s),a.mode==TYPE&&(a.back=-1);break}for(a.back=0;!((r=a.codes[a.lencode+BITS(s,a.lenbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(r.op&&0==(240&r.op)){for(l=r;r=a.codes[a.lencode+l.val+(BITS(s,l.bits+l.op)>>>l.bits)],!(l.bits+r.bits<=s.bits);)if(!PULLBYTE(s))break t;DROPBITS(s,l.bits),a.back+=l.bits}if(DROPBITS(s,r.bits),a.back+=r.bits,a.length=r.val,0==r.op){a.mode=LIT;break}if(32&r.op){a.back=-1,a.mode=TYPE;break}if(64&r.op){t.msg="invalid literal/length code",a.mode=BAD;break}a.extra=15&r.op,a.mode=LENEXT;case LENEXT:if(a.extra){if(!NEEDBITS(s,a.extra))break t;a.length+=BITS(s,a.extra),DROPBITS(s,a.extra),a.back+=a.extra}a.was=a.length,a.mode=DIST;case DIST:for(;!((r=a.codes[a.distcode+BITS(s,a.distbits)]).bits<=s.bits);)if(!PULLBYTE(s))break t;if(0==(240&r.op)){for(l=r;r=a.codes[a.distcode+l.val+(BITS(s,l.bits+l.op)>>>l.bits)],!(l.bits+r.bits<=s.bits);)if(!PULLBYTE(s))break t;DROPBITS(s,l.bits),a.back+=l.bits}if(DROPBITS(s,r.bits),a.back+=r.bits,64&r.op){t.msg="invalid distance code",a.mode=BAD;break}a.offset=r.val,a.extra=15&r.op,a.mode=DISTEXT;case DISTEXT:if(a.extra){if(!NEEDBITS(s,a.extra))break t;a.offset+=BITS(s,a.extra),DROPBITS(s,a.extra),a.back+=a.extra}a.mode=MATCH;case MATCH:if(0==s.left)break t;if(n=o-s.left,a.offset>n){if((n=a.offset-n)>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=BAD;break}n>a.wnext?(n-=a.wnext,d=a.wsize-n,p=-1):(d=a.wnext-n,p=-1),n>a.length&&(n=a.length)}else d=-1,p=t.next_out-a.offset,n=a.length;if(n>s.left&&(n=s.left),s.left-=n,a.length-=n,d>=0)t.output_data+=a.window.substring(d,d+n),t.next_out+=n,n=0;else{t.next_out+=n;do{t.output_data+=t.output_data.charAt(p++)}while(--n)}0==a.length&&(a.mode=LEN);break;case LIT:if(0==s.left)break t;t.output_data+=String.fromCharCode(a.length),t.next_out++,s.left--,a.mode=LEN;break;case CHECK:if(a.wrap){if(!NEEDBITS(s,32))break t;if(o-=s.left,t.total_out+=o,a.total+=o,o&&(t.adler=a.check=t.checksum_function(a.check,t.output_data,t.output_data.length-o,o)),o=s.left,(a.flags?s.hold:REVERSE(s.hold))!=a.check){t.msg="incorrect data check",a.mode=BAD;break}INITBITS(s)}a.mode=LENGTH;case LENGTH:if(a.wrap&&a.flags){if(!NEEDBITS(s,32))break t;if(s.hold!=(4294967295&a.total)){t.msg="incorrect length check",a.mode=BAD;break}INITBITS(s)}a.mode=DONE;case DONE:h=ZLIB.Z_STREAM_END;break t;case BAD:h=ZLIB.Z_DATA_ERROR;break t;case MEM:return ZLIB.Z_MEM_ERROR;case SYNC:default:return ZLIB.Z_STREAM_ERROR}return RESTORE(s),(a.wsize||o!=t.avail_out&&a.mode<BAD&&(a.mode<CHECK||e!=ZLIB.Z_FINISH))&&updatewindow(t)?(a.mode=MEM,ZLIB.Z_MEM_ERROR):(i-=t.avail_in,o-=t.avail_out,t.total_in+=i,t.total_out+=o,a.total+=o,a.wrap&&o&&(t.adler=a.check=t.checksum_function(a.check,t.output_data,0,t.output_data.length)),t.data_type=a.bits+(a.last?64:0)+(a.mode==TYPE?128:0)+(a.mode==LEN_||a.mode==COPY_?256:0),(0==i&&0==o||e==ZLIB.Z_FINISH)&&h==ZLIB.Z_OK&&(h=ZLIB.Z_BUF_ERROR),h)},ZLIB.inflateEnd=function(t){return t&&t.state?(t.state.window=null,t.state=null,ZLIB.Z_OK):ZLIB.Z_STREAM_ERROR},ZLIB.z_stream.prototype.inflate=function(t,e){var a,s;this.input_data=t,this.next_in=getarg(e,"next_in",0),this.avail_in=getarg(e,"avail_in",t.length-this.next_in),a=getarg(e,"flush",ZLIB.Z_SYNC_FLUSH),s=getarg(e,"avail_out",-1);var i="";do{if(this.avail_out=s>=0?s:16384,this.output_data="",this.next_out=0,this.error=ZLIB.inflate(this,a),0!=this.error&&console.log("zlib error",this.error),s>=0)return this.output_data;if(i+=this.output_data,this.avail_out>0)break}while(this.error==ZLIB.Z_OK);return i},ZLIB.z_stream.prototype.inflateReset=function(t){return ZLIB.inflateReset(this,t)}}(),void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-adler32.js"),BASE=65521,ZLIB.adler32=function(t,e,a,s){return"string"==typeof e?function(t,e,a,s){var i,o;if(i=t>>>16&65535,t&=65535,1==s)return(t+=255&e.charCodeAt(a))>=BASE&&(t-=BASE),(i+=t)>=BASE&&(i-=BASE),t|i<<16;if(null===e)return 1;if(s<16){for(;s--;)i+=t+=255&e.charCodeAt(a++);return t>=BASE&&(t-=BASE),t|(i%=BASE)<<16}for(;s>=5552;){s-=5552,o=347;do{i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++)}while(--o);t%=BASE,i%=BASE}if(s){for(;s>=16;)s-=16,i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++),i+=t+=255&e.charCodeAt(a++);for(;s--;)i+=t+=255&e.charCodeAt(a++);t%=BASE,i%=BASE}return t|i<<16}(t,e,a,s):function(t,e,a,s){var i,o;if(i=t>>>16&65535,t&=65535,1==s)return(t+=e[a])>=BASE&&(t-=BASE),(i+=t)>=BASE&&(i-=BASE),t|i<<16;if(null===e)return 1;if(s<16){for(;s--;)i+=t+=e[a++];return t>=BASE&&(t-=BASE),t|(i%=BASE)<<16}for(;s>=5552;){s-=5552,o=347;do{i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++]}while(--o);t%=BASE,i%=BASE}if(s){for(;s>=16;)s-=16,i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++],i+=t+=e[a++];for(;s--;)i+=t+=e[a++];t%=BASE,i%=BASE}return t|i<<16}(t,e,a,s)},ZLIB.adler32_combine=function(t,e,a){var s,i,o;return a<0?4294967295:(i=(o=a%=BASE)*(s=65535&t),i%=BASE,(s+=(65535&e)+BASE-1)>=BASE&&(s-=BASE),s>=BASE&&(s-=BASE),(i+=(t>>16&65535)+(e>>16&65535)+BASE-o)>=BASE<<1&&(i-=BASE<<1),i>=BASE&&(i-=BASE),s|i<<16)},void 0===ZLIB&&alert("ZLIB is not defined.  SRC zlib.js before zlib-crc32.js"),function(){var t=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];ZLIB.crc32=function(e,a,s,i){return"string"==typeof a?function(e,a,s,i){if(null==a)return 0;for(e^=4294967295;i>=8;)e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,e=t[255&(e^a.charCodeAt(s++))]^e>>>8,i-=8;if(i)do{e=t[255&(e^a.charCodeAt(s++))]^e>>>8}while(--i);return 4294967295^e}(e,a,s,i):function(e,a,s,i){if(null==a)return 0;for(e^=4294967295;i>=8;)e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,e=t[255&(e^a[s++])]^e>>>8,i-=8;if(i)do{e=t[255&(e^a[s++])]^e>>>8}while(--i);return 4294967295^e}(e,a,s,i)};function e(t,e){var a,s=0;for(a=0;e;)1&e&&(a^=t[s]),e>>=1,s++;return a}function a(t,a){var s;for(s=0;s<32;s++)t[s]=e(a,a[s])}ZLIB.crc32_combine=function(t,s,i){var o,n,r,l;if(i<=0)return t;for(r=new Array(32),(l=new Array(32))[0]=3988292384,n=1,o=1;o<32;o++)l[o]=n,n<<=1;a(r,l),a(l,r);do{if(a(r,l),1&i&&(t=e(r,t)),0==(i>>=1))break;a(l,r),1&i&&(t=e(l,t)),i>>=1}while(0!=i);return t^=s}}(),module.exports=ZLIB},function(t,e){t.exports=require("dot-object")},function(t,e){t.exports=require("camelcase")},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,".button{margin-right:3px;padding:2px;min-width:90px}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/Connectbutton.scss"],names:[],mappings:"AAKA,QACI,gBAAA,CACA,WAAA,CACA,cAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n\r\n.button{\r\n    margin-right: 3px;\r\n    padding: 2px;\r\n    min-width: 90px\r\n}"],sourceRoot:""}]),e.a=n},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,".encoding{margin-left:10px}.encoding label{padding:2px;font-size:15px}.encoding select{padding:2px 0}.reldisabled{opacity:.5}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/Encodingoptions.scss"],names:[],mappings:"AAKA,UACI,gBAAA,CAEF,gBACE,WAAA,CACA,cAAA,CAEF,iBACE,aAAA,CAGF,aACE,UAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n.encoding {\r\n    margin-left: 10px;\r\n  }\r\n  .encoding label {      \r\n    padding: 2px;\r\n    font-size: 15px;\r\n  }\r\n  .encoding select {\r\n    padding: 2px 0;\r\n  }\r\n  \r\n  .reldisabled{\r\n    opacity: 0.5;\r\n  }"],sourceRoot:""}]),e.a=n},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,".header{background-color:#a9a9a9;padding:5px;font-size:13px}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/Header.scss"],names:[],mappings:"AAKA,QACE,wBAAA,CACA,WAAA,CACA,cAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n.header {\r\n  background-color: darkgray;\r\n  padding: 5px;\r\n  font-size: 13px;\r\n}\r\n"],sourceRoot:""}]),e.a=n},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,".canvas{max-height:90%;max-width:100%}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/Purecanvas.scss"],names:[],mappings:"AAKA,QACI,cAAA,CACA,cAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n.canvas{\r\n    max-height: 90%;\r\n    max-width: 100%;\r\n}\r\n"],sourceRoot:""}]),e.a=n},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,"*{margin:0;padding:0;box-sizing:border-box}.canvas-container{height:100vh;text-align:center;background-color:#fff}","",{version:3,sources:["webpack://./src/reactjs/components/KVM/UI.scss"],names:[],mappings:"AAKA,EACI,QAAA,CACA,SAAA,CACA,qBAAA,CAGJ,kBACG,YAAA,CACA,iBAAA,CACA,qBAAA",sourcesContent:["/*********************************************************************\r\n * Copyright (c) Intel Corporation 2019\r\n * SPDX-License-Identifier: Apache-2.0\r\n **********************************************************************/\r\n \r\n*{ // * refers every element and removes default margin  padding that comes with html elements body, h1 etc\r\n    margin:0;\r\n    padding:0;\r\n    box-sizing: border-box; //element padding and border are included in the width and height\r\n}\r\n\r\n.canvas-container{\r\n   height: 100vh; \r\n   text-align: center;\r\n   background-color: #ffffff;\r\n}\r\n"],sourceRoot:""}]),e.a=n},function(t,e,a){"use strict";var s=a(10),i=a.n(s),o=a(11),n=a.n(o)()(i.a);n.push([t.i,".sol-header{display:flex}.power-options{display:block;position:absolute;right:1%}","",{version:3,sources:["webpack://./src/reactjs/components/SerialOverLAN/sol.scss"],names:[],mappings:"AAIA,YACI,YAAA,CAEJ,eACC,aAAA,CACA,iBAAA,CACA,QAAA",sourcesContent:["/*********************************************************************\r\n* Copyright (c) Intel Corporation 2019\r\n* SPDX-License-Identifier: Apache-2.0\r\n**********************************************************************/\r\n.sol-header {\r\n    display: flex;\r\n}\r\n.power-options {\r\n\tdisplay: block;\r\n\tposition: absolute;\r\n\tright: 1%;\r\n}\r\n"],sourceRoot:""}]),e.a=n},function(t,e){t.exports=require("xterm")},function(t,e,a){"use strict";a.r(e),a.d(e,"RemoteDesktop",(function(){return B}));var s=a(0),i=a(36),o=a(37),n=a(38),r=a(14),l=a(39),c=a(6),h=a(19),d=a(40);a(55);class p extends s.Component{render(){return s.createElement("button",{className:"button",onClick:this.props.handleConnectClick},1===this.props.kvmstate?"Connecting KVM":2===this.props.kvmstate?"Disconnect KVM":"Connect KVM")}}a(56);class u extends s.Component{constructor(t){super(t),this.state={value:1},this.onEncodingChange=this.onEncodingChange.bind(this)}onEncodingChange(t){this.setState({value:t.target.value}),this.props.changeEncoding(t.target.value)}render(){return s.createElement("span",{className:"encoding"},s.createElement("label",null,"Encoding:"),s.createElement("select",{value:this.state.value,className:2===this.props.getConnectState()?"reldisabled":"",onChange:this.onEncodingChange,disabled:2===this.props.getConnectState()},s.createElement("option",{value:"1"},"RLE 8"),s.createElement("option",{value:"2"},"RLE 16")))}}class b extends s.Component{constructor(t){super(t),this.desktopsettings={encoding:1},this.changeEncoding=this.changeEncoding.bind(this)}changeEncoding(t){this.desktopsettings.encoding=t,this.props.changeDesktopSettings(this.desktopsettings)}render(){return s.createElement(u,{changeEncoding:this.changeEncoding,getConnectState:this.props.getConnectState})}}var v=a(17),f=a(18),m=a(33),g=a(35),S=a(7),C=a(8),A=a.n(C),E=a(34),w=a(4),k=a(13),I=a(3),x=function(t,e,a,s){return new(a||(a=Promise))((function(i,o){function n(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof a?e:new a((function(t){t(e)}))).then(n,r)}l((s=s.apply(t,e||[])).next())}))};a(57);const y=A.a.label`
font-size : 15px;
margin-left: 30px;
`,T=A.a.div`
display : inline-block;
padding : 0px 5px;
`;class R extends s.Component{constructor(t){super(t),this.handlePowerOptions=t=>x(this,void 0,void 0,(function*(){const e=null!=this.props.server?this.props.server:"";if(0===t.detail){const{mpsKey:a}=this.context.data,s=Object(f.b)(parseInt(t.target.value));2!==this.props.kvmstate||"8"!==t.target.value&&"5"!==t.target.value?Object(v.b)(this.props.deviceId,t.target.value,e.substr(0,e.indexOf("/")),a).then(t=>{void 0!==t.Body&&"SUCCESS"===t.Body.ReturnValueStr?this.setState({showSuccess:!0,type:"success",message:s+" success",isSelected:!this.state.isSelected}):this.setState({showSuccess:!0,type:"error",message:void 0!==t.Body&&0!==t.Body.ReturnValue?`${s} ${String(t.Body.ReturnValueStr)}`:t.errorDescription||"Sorry! there was some technical difficulties",isSelected:!this.state.isSelected})}).catch(t=>this.setState({showSuccess:!0,type:"error",message:Object(I.a)(t.ajaxError.response)&&String(t.ajaxError.response.error)||"Power Action Failed",isSelected:!this.state.isSelected})):this.setState({showSuccess:!0,type:"warning",message:s+" not allowed while kvm is connected",isSelected:!this.state.isSelected})}setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)})),this.handleFeatureStatus=t=>{this.setState({kvmNotEnabled:t})},this.handlePowerStatus=t=>{this.setState({deviceOnSleep:t})},this.updatePowerStatus=()=>{this.setState({isPowerStateLoaded:!0})},this.state={powerState:0,showSuccess:!1,message:"",isSelected:!0,type:"",kvmNotEnabled:"",deviceOnSleep:"",isPowerStateLoaded:!1}}render(){const{showSuccess:t,message:e,type:a,kvmNotEnabled:i,deviceOnSleep:o}=this.state,{deviceId:n,server:r}=this.props,l=null!=r?r:"";return s.createElement(s.Fragment,null,"failed"===i&&"poweron"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.failedKvmFetch"),type:"error"}):"","failed"===i&&"sleep"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.failedKvmFetchAndNotPoweredUp"),type:"warning"}):"","failed"===i&&"failed"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.failedKvmFetchAndFailedPowerFetch"),type:"error"}):"","notEnabled"===i&&"sleep"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.kvmNotEnabledAndNotPoweredUp"),type:"warning"}):"","notEnabled"===i&&"failed"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.kvmNotEnabledAndFailedPowerFetch"),type:"warning"}):"","enabled"===i&&"sleep"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.notPoweredUp"),type:"warning"}):"","enabled"===i&&"failed"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.failedPowerFetch"),type:"error"}):"","notEnabled"===i&&"poweron"===o?s.createElement(S.a,{message:Object(w.b)("amtFeatures.messages.kvmNotEnabled"),type:"warning"}):"",t&&s.createElement(S.a,{message:e,type:a}),s.createElement("div",{className:"header"},s.createElement(T,null,s.createElement(y,null,this.state.isPowerStateLoaded&&s.createElement(g.a,{deviceId:n,server:l.substr(0,l.indexOf("/")),feature:"KVM",handleFeatureStatus:this.handleFeatureStatus,getConnectState:this.props.getConnectState}))),s.createElement(p,{handleConnectClick:this.props.handleConnectClick,kvmstate:this.props.kvmstate}),s.createElement(b,{changeDesktopSettings:this.props.changeDesktopSettings,getConnectState:this.props.getConnectState}),s.createElement(T,null,s.createElement(y,null,"Power Actions: "),s.createElement(m.a,{availableOptions:f.a,onChange:this.handlePowerOptions,isSelected:this.state.isSelected})),s.createElement(y,null,"Power Status :")," ",s.createElement(E.a,{deviceId:this.props.deviceId,server:l.substr(0,l.indexOf("/")),handlePowerStatus:this.handlePowerStatus,updateParent:this.updatePowerStatus})))}}R.contextType=k.a,a(58);class O extends s.Component{shouldComponentUpdate(){return!1}render(){const t={width:"1366",height:"768",onContextMenu:t=>(t.preventDefault(),!1),onMouseDown:this.props.mouseDown,onMouseUp:this.props.mouseUp,onMouseMove:this.props.mouseMove};return s.createElement("canvas",Object.assign({},t,{className:"canvas",ref:t=>Object(I.a)(t)?this.props.contextRef(t.getContext("2d")):null}))}}a(59);class B extends s.Component{constructor(t){super(t),this.desktopSettingsChange=!1,this.state={kvmstate:0,encodingOption:1},this.logger=new h.a(c.a.ERROR),this.saveContext=this.saveContext.bind(this),this.startKVM=this.startKVM.bind(this),this.stopKVM=this.stopKVM.bind(this),this.handleConnectClick=this.handleConnectClick.bind(this),this.getRenderStatus=this.getRenderStatus.bind(this),this.OnConnectionStateChange=this.OnConnectionStateChange.bind(this),this.changeDesktopSettings=this.changeDesktopSettings.bind(this)}saveContext(t){this.logger.debug("save context called"),this.ctx=t,this.init()}init(){const t=null!=this.props.deviceId?this.props.deviceId:"",e=null!=this.props.mpsServer?this.props.mpsServer:"";this.module=new n.a(this.logger,this.ctx),this.redirector=new o.a(this.logger,r.b.KVM,new FileReader,t,16994,"","",0,0,e),this.dataProcessor=new i.a(this.logger,this.redirector,this.module),this.mouseHelper=new l.a(this.module,this.redirector,this.props.mouseDebounceTime<200?200:this.props.mouseDebounceTime),this.keyboard=new d.a(this.module,this.redirector),this.redirector.onProcessData=this.module.processData.bind(this.module),this.redirector.onStart=this.module.start.bind(this.module),this.redirector.onNewState=this.module.onStateChange.bind(this.module),this.redirector.onSendKvmData=this.module.onSendKvmData.bind(this.module),this.redirector.onStateChanged=this.OnConnectionStateChange.bind(this),this.redirector.onError=this.onRedirectorError.bind(this),this.module.onSend=this.redirector.send.bind(this.redirector),this.module.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.module.bpp=this.state.encodingOption}cleanUp(){this.module=null,this.redirector=null,this.dataProcessor=null,this.mouseHelper=null,this.keyboard=null,this.ctx.clearRect(0,0,this.ctx.canvas.height,this.ctx.canvas.width)}componentWillUnmount(){this.stopKVM()}onRedirectorError(){this.reset()}reset(){this.cleanUp(),this.init()}OnConnectionStateChange(t,e){this.setState({kvmstate:e}),this.desktopSettingsChange&&0===e&&(this.desktopSettingsChange=!1,setTimeout(()=>this.startKVM(),2e3))}changeDesktopSettings(t){2===this.state.kvmstate?(this.desktopSettingsChange=!0,this.module.bpp=t.encoding,this.stopKVM()):(this.setState({encodingOption:parseInt(t.encoding)}),this.module.bpp=parseInt(t.encoding))}startKVM(){void 0!==this.redirector&&this.redirector.start(WebSocket),void 0!==this.keyboard&&this.keyboard.GrabKeyInput()}stopKVM(){void 0!==this.redirector&&this.redirector.stop(),void 0!==this.keyboard&&this.keyboard.UnGrabKeyInput(),this.reset()}getRenderStatus(){return this.module.state}handleConnectClick(t){t.persist(),0===this.state.kvmstate?this.startKVM():1===this.state.kvmstate||2===this.state.kvmstate&&this.stopKVM()}componentDidUpdate(t){t.deviceId!==this.props.deviceId&&this.stopKVM()}render(){return s.createElement("div",{className:"canvas-container"},Object(I.a)(this.props.autoConnect)?"":s.createElement(R,{key:"kvm_header",handleConnectClick:this.handleConnectClick,getConnectState:()=>this.state.kvmstate,kvmstate:this.state.kvmstate,changeDesktopSettings:this.changeDesktopSettings,deviceId:this.props.deviceId,server:this.props.mpsServer}),s.createElement(O,{key:"kvm_comp",contextRef:t=>this.saveContext(t),canvasHeight:this.props.canvasHeight,canvasWidth:this.props.canvasWidth,mouseMove:t=>{void 0!==this.mouseHelper&&this.mouseHelper.mousemove(t)},mouseDown:t=>{void 0!==this.mouseHelper&&this.mouseHelper.mousedown(t)},mouseUp:t=>{void 0!==this.mouseHelper&&this.mouseHelper.mouseup(t)}}))}}},function(t,e,a){"use strict";a.r(e),a.d(e,"Sol",(function(){return L}));var s=a(0),i=a.n(s),o=a(41),n=a(8),r=a.n(n),l=a(14),c=a(19),h=a(6),d=a(42),p=a(33),u=a(52),b=a(3);const v=r.a.div`
   display:block;
   text-align:center;
`,f=r.a.div`
   display:inline-block;
`;class m extends i.a.Component{componentDidMount(){var t;const e=null!==(t=document.getElementById("xterm"))&&void 0!==t?t:"",{xterm:a,handleKeyPress:s}=this.props;Object(b.a)(e)&&(a.open(e),a.onData(t=>s(t)),a.attachCustomKeyEventHandler(t=>(t.stopPropagation(),t.preventDefault(),Object(b.a)(t.ctrlKey)&&Object(b.a)(t.shiftKey)&&67===t.keyCode?navigator.clipboard.writeText(a.getSelection()):Object(b.a)(t.ctrlKey)&&Object(b.a)(t.shiftKey)&&86===t.keyCode?navigator.clipboard.readText().then(t=>s(t)):"Space"===t.code?s(t.key):void 0)))}render(){return i.a.createElement(v,null,i.a.createElement(f,{id:"xterm"}))}}var g=m,S=a(18),C=(a(60),a(9)),A=a.n(C),E=a(51),w={insert:"head",singleton:!1},k=(A()(E.a,w),E.a.locals,a(17)),I=a(7),x=a(35),y=a(34),T=a(4),R=a(13),O=function(t,e,a,s){return new(a||(a=Promise))((function(i,o){function n(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof a?e:new a((function(t){t(e)}))).then(n,r)}l((s=s.apply(t,e||[])).next())}))};const B=r.a.div`
display : inline-block;
padding : 0px 5px;
`,D=r.a.div`
background-color: darkgray;
padding: 5px;
font-size: 13px;
text-align: center;
`,_=r.a.label`
font-size : 15px;
margin-left: 30px;
`;class L extends i.a.Component{constructor(t){super(t),this.init=()=>{const t=null!=this.props.mpsServer?this.props.mpsServer:"",e=null!=this.props.deviceId?this.props.deviceId:"";this.terminal=new o.a,this.redirector=new l.a(this.logger,l.b.SOL,new FileReader,e,16994,"","",0,0,t+"/relay"),this.dataProcessor=new d.a(this.terminal),this.terminal.onSend=this.redirector.send.bind(this.redirector),this.redirector.onNewState=this.terminal.StateChange.bind(this.terminal),this.redirector.onStateChanged=this.onTerminalStateChange.bind(this),this.redirector.onProcessData=this.dataProcessor.processData.bind(this.dataProcessor),this.dataProcessor.processDataToXterm=this.handleWriteToXterm.bind(this),this.dataProcessor.clearTerminal=this.handleClearTerminal.bind(this),this.term=new u.Terminal({cursorStyle:"block",fontWeight:"bold",rows:30,cols:100})},this.cleanUp=()=>{this.terminal=null,this.redirector=null,this.dataProcessor=null,this.term=null},this.handleWriteToXterm=t=>this.term.write(t),this.handleClearTerminal=()=>this.term.reset(),this.handleKeyPress=t=>this.terminal.TermSendKeys(t),this.handleKeyDownPress=t=>this.terminal.handleKeyDownEvents(t),this.startSOL=()=>{void 0!==this.redirector&&this.redirector.start(WebSocket)},this.stopSOL=()=>{void 0!==this.redirector&&this.redirector.stop(),this.handleClearTerminal(),this.cleanUp(),this.init()},this.handleSOLConnect=t=>{t.persist(),0===this.state.SOLstate?this.startSOL():this.stopSOL()},this.onTerminalStateChange=(t,e)=>this.setState({SOLstate:e}),this.handlePowerOptions=t=>O(this,void 0,void 0,(function*(){if(0===t.detail){const{mpsKey:e}=this.context.data,a=Object(S.b)(parseInt(t.target.value));3!==this.state.SOLstate||"8"!==t.target.value&&"5"!==t.target.value?Object(k.b)(this.props.deviceId,t.target.value,this.props.mpsServer,e,!0).then(t=>{const e=t.Body;void 0!==e&&"SUCCESS"===e.ReturnValueStr?this.setState({showSuccess:!0,type:"success",message:a+" success",isSelected:!this.state.isSelected}):this.setState({showSuccess:!0,type:"error",message:void 0!==e&&0!==e.ReturnValue?`${a} ${String(e.ReturnValueStr)}`:t.errorDescription||"Sorry! there was some technical difficulties",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}).catch(t=>{console.log(t),this.setState({showSuccess:!0,type:"error",message:Object(b.a)(t.ajaxError.response)&&String(t.ajaxError.response.error)||"Power Action Failed",isSelected:!this.state.isSelected}),setTimeout(()=>this.setState({showSuccess:!1,isSelected:!this.state.isSelected}),4e3)}):this.setState({showSuccess:!0,type:"warning",message:a+" not allowed while termina1 is connected",isSelected:!this.state.isSelected})}})),this.handleFeatureStatus=t=>{this.setState({solNotEnabled:t})},this.handlePowerStatus=t=>{this.setState({deviceOnSleep:t})},this.updatePowerStatus=()=>{this.setState({isPowerStateLoaded:!0})},this.getSOLState=()=>3===this.state.SOLstate?2:0,this.logger=new c.a(h.a.ERROR),this.state={isConnected:!1,SOLstate:0,powerState:0,showSuccess:!1,message:"",isSelected:!0,type:"",solNotEnabled:"",deviceOnSleep:"",isPowerStateLoaded:!1}}componentDidMount(){this.init()}render(){const{SOLstate:t,showSuccess:e,message:a,type:s,deviceOnSleep:o,solNotEnabled:n,isPowerStateLoaded:r}=this.state;return i.a.createElement(i.a.Fragment,null,"failed"===n&&"poweron"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.failedSolFetch"),type:"error"}):"","failed"===n&&"sleep"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.failedSolFetchAndNotPoweredUp"),type:"warning"}):"","failed"===n&&"failed"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.failedSolFetchAndFailedPowerFetch"),type:"error"}):"","notEnabled"===n&&"sleep"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.solNotEnabledAndNotPoweredUp"),type:"warning"}):"","notEnabled"===n&&"failed"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.solNotEnabledAndFailedPowerFetch"),type:"warning"}):"","enabled"===n&&"sleep"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.notPoweredUp"),type:"warning"}):"","enabled"===n&&"failed"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.failedPowerFetch"),type:"error"}):"","notEnabled"===n&&"poweron"===o?i.a.createElement(I.a,{message:Object(T.b)("amtFeatures.messages.solNotEnabled"),type:"warning"}):"",e&&i.a.createElement(I.a,{message:a,type:s}),i.a.createElement(D,null,i.a.createElement(B,null,i.a.createElement(_,null,r&&i.a.createElement(x.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,feature:"SOL",handleFeatureStatus:this.handleFeatureStatus,getConnectState:this.getSOLState}))),i.a.createElement(B,null,i.a.createElement("button",{onClick:this.handleSOLConnect},3===t?"Disconnect":"Connect")),i.a.createElement(B,null,i.a.createElement(_,null,"Power Status :"),i.a.createElement(y.a,{deviceId:this.props.deviceId,server:this.props.mpsServer,handlePowerStatus:this.handlePowerStatus,updateParent:this.updatePowerStatus})),i.a.createElement(B,null,i.a.createElement(_,null,"Power Actions:"," "),i.a.createElement(p.a,{availableOptions:S.a,onChange:this.handlePowerOptions,isSelected:this.state.isSelected}))),3===t&&this.term&&i.a.createElement(g,{handleKeyPress:this.handleKeyPress,handleKeyDownPress:this.handleKeyDownPress,xterm:this.term}))}}L.contextType=R.a},function(t,e,a){"use strict";a.r(e);var s=a(9),i=a.n(s),o=a(46),n={insert:"head",singleton:!1};i()(o.a,n);e.default=o.a.locals||{}},function(t,e,a){"use strict";a.r(e);var s=a(9),i=a.n(s),o=a(47),n={insert:"head",singleton:!1};i()(o.a,n);e.default=o.a.locals||{}},function(t,e,a){"use strict";a.r(e);var s=a(9),i=a.n(s),o=a(48),n={insert:"head",singleton:!1};i()(o.a,n);e.default=o.a.locals||{}},function(t,e,a){"use strict";a.r(e);var s=a(9),i=a.n(s),o=a(49),n={insert:"head",singleton:!1};i()(o.a,n);e.default=o.a.locals||{}},function(t,e,a){"use strict";a.r(e);var s=a(9),i=a.n(s),o=a(50),n={insert:"head",singleton:!1};i()(o.a,n);e.default=o.a.locals||{}},function(t,e){t.exports=require("xterm/css/xterm.css")},function(t,e,a){"use strict";a.r(e);var s=a(53);a.d(e,"RemoteDesktop",(function(){return s.RemoteDesktop}));var i=a(54);a.d(e,"Sol",(function(){return i.Sol}));var o=a(13);a.d(e,"MpsProvider",(function(){return o.b}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9Db252ZXJ0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL1V0aWxpdGllcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9NZXRob2RzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1V0aWxpdGllcy9JbWFnZUhlbHBlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9JTG9nZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL1NuYWNrQmFyLnRzeCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdHlsZWQtY29tcG9uZW50c1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1V0aWxpdGllcy9Db21tc0hlbHBlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9jb250ZXh0L0Jhc2ljQ29udGV4dFByb3ZpZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9BTVRSZWRpcmVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2VydmljZXMvSHR0cENsaWVudC50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJpMThuZXh0XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zZXJ2aWNlcy9Qb3dlckFjdGlvblNlcnZpY2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL1Bvd2VyQWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9Db25zb2xlTG9nZ2VyLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1kNVwiIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL2FtdGZlYXR1cmVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvUkZCU3RhdGVQcm9jZXNzb3JzL0VuY29kaW5nLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1JGQlN0YXRlUHJvY2Vzc29ycy9IYW5kc2hha2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9SRkJTdGF0ZVByb2Nlc3NvcnMvRnJhbWVCdWZmZXJCZWxsU2VydmVyQ3V0VGV4dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9SRkJTdGF0ZVByb2Nlc3NvcnMvU2VjdXJpdHlPcHRpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1JGQlN0YXRlUHJvY2Vzc29ycy9TZWN1cml0eVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1JGQlN0YXRlUHJvY2Vzc29ycy9TZXJ2ZXJJbml0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1JGQlN0YXRlUHJvY2Vzc29ycy9TZXJ2ZXJDdXRUZXh0SGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9JbWFnZURhdGEvUkxFRGVjb2Rlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9EZXNrdG9wLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1N0YXRlUHJvY2Vzc29yRmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9VdGlsaXRpZXMvQU1US2V5Q29kZVRhYmxlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1V0aWxpdGllcy9BTVRLZXlDb2RlQ29udmVydGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL1Bvd2VyT3B0aW9ucy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvUG93ZXJTdGF0ZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvQ2hlY2tib3gudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL2FtdGZlYXR1cmVzLnNjc3M/NWEzNSIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9BbXRGZWF0dXJlcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zZXJ2aWNlcy9BbXRGZWF0dXJlc1NlcnZpY2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0ltYWdlRGF0YS9EYXRhUHJvY2Vzc29yLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0FNVEt2bURhdGFSZWRpcmVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL0FNVERlc2t0b3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvVXRpbGl0aWVzL01vdXNlSGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL1V0aWxpdGllcy9LZXlib2FyZEhlbHBlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9BTVRUZXJtaW5hbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9UZXJtaW5hbERhdGFQcm9jZXNzb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvemxpYi96bGliLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImRvdC1vYmplY3RcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjYW1lbGNhc2VcIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL0tWTS9Db25uZWN0YnV0dG9uLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vRW5jb2RpbmdvcHRpb25zLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vSGVhZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vUHVyZWNhbnZhcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvS1ZNL1VJLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9TZXJpYWxPdmVyTEFOL3NvbC5zY3NzIiwid2VicGFjazovLy9leHRlcm5hbCBcInh0ZXJtXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vQ29ubmVjdGJ1dHRvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vRW5jb2RpbmdvcHRpb25zLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL0tWTS9EZXNrdG9wc2V0dGluZ3MudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvS1ZNL0hlYWRlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vUHVyZWNhbnZhcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vVUkudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvU2VyaWFsT3ZlckxBTi9UZXJtaW5hbC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9TZXJpYWxPdmVyTEFOL3NvbC5zY3NzPzliOTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9TZXJpYWxPdmVyTEFOL1NvbC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vQ29ubmVjdGJ1dHRvbi5zY3NzP2E5MGMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vRW5jb2RpbmdvcHRpb25zLnNjc3M/NDYxNiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL0tWTS9IZWFkZXIuc2Nzcz8xYjIzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvS1ZNL1B1cmVjYW52YXMuc2Nzcz8wZGRkIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvS1ZNL1VJLnNjc3M/M2Q3NSIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ4dGVybS9jc3MveHRlcm0uY3NzXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9tcHMudHN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsIlR5cGVDb252ZXJ0ZXIiLCJ2IiwiY2hhckNvZGVBdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNwbGl0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwieCIsInJlcGxhY2UiLCJhcnIiLCJmcm9tIiwidG8iLCJzcGxpY2UiLCJBcnJheSIsInRoaXMiLCJnYXAiLCJPYmplY3RUb1N0cmluZ0V4IiwiaiIsIkVzY2FwZUh0bWwiLCJnYXAyIiwiT2JqZWN0VG9TdHJpbmdFeDIiLCJsZW5ndGgiLCJtYXRjaCIsInNoaWZ0IiwiTnVtYmVyIiwidG9TdHJpbmciLCJzdWJzdHIiLCJ0b1VwcGVyQ2FzZSIsImlucHV0IiwiY2hhcjJoZXgiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsImRhdGEiLCJieXRlcyIsIkJsb2IiLCJVaW50OEFycmF5IiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiaXNUcnV0aHkiLCJwcmVwYXJlSGVhZGVycyIsImFwaUtleSIsImlzTXBzQ29udHJvbCIsImhlYWRlcnMiLCJBY2NlcHQiLCJpc0ZhbHN5IiwidHJhbnNsYXRlVGV4dCIsInRleHQiLCJ0cmFuc2xhdGVEeW5hbWljVGV4dCIsInRyYW5zbGF0ZSIsIkltYWdlSGVscGVyIiwicGFyZW50IiwieSIsImhvbGRpbmciLCJ4eCIsImFyb3RYIiwiYXJvdFkiLCJjYW52YXNDdHgiLCJwdXRJbWFnZURhdGEiLCJzcGFyZSIsInB0ciIsInBwIiwicm90YXRpb24iLCJzcGFyZXciLCJzcGFyZXcyIiwic3BhcmVoIiwiYnBwIiwiZml4Q29sb3IiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsInNwYXJlaDIiLCJuZXdyb3RhdGlvbiIsInJ3IiwicmgiLCJ0Y2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGNhbnZhc2N0eCIsImdldENvbnRleHQiLCJzZXRUcmFuc2Zvcm0iLCJyb3RhdGUiLCJQSSIsImRyYXdJbWFnZSIsInJvdFgiLCJyb3RZIiwib25TY3JlZW5SZXNpemUiLCJjYW52YXNJZCIsIkxvZ0xldmVsIiwiU3R5bGVkQmFyIiwiZGl2IiwidHlwZSIsImdldENvbG9ycyIsIm1lc3NhZ2UiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJwdXNoIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwiX3NsaWNlZFRvQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5Iiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwibGVuIiwiYXJyMiIsIl9pdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJtYXAiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiQ29tbXNIZWxwZXIiLCJjb21tIiwiZm9jdXNNb2RlIiwiZGYiLCJzZW5kIiwiU2hvcnRUb1N0ciIsIm1pbiIsIm9sZE1vdXNlWCIsImxhc3RNb3VzZVgiLCJvbGRNb3VzZVkiLCJsYXN0TW91c2VZIiwiYWJzIiwicndpZHRoIiwicmhlaWdodCIsImsiLCJzZW5kS2V5IiwiSW50VG9TdHIiLCJvbkt2bURhdGFBY2siLCJvbkt2bURhdGFQZW5kaW5nIiwidXJsdmFycyIsImt2bWRhdGF0cmFjZSIsImNvbnNvbGUiLCJsb2ciLCJsYXN0S2VlcEFsaXZlIiwiRGF0ZSIsIm5vdyIsInNlbmRDYWQiLCJEb21haW5Db250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIlByb3ZpZGVyIiwiQ29tcG9uZW50IiwicHJvcHMiLCJjaGlsZHJlbiIsIlByb3RvY29sIiwiQU1UUmVkaXJlY3RvciIsImxvZ2dlciIsInByb3RvY29sIiwiZnIiLCJob3N0IiwicG9ydCIsInVzZXIiLCJwYXNzIiwidGxzIiwidGxzMW9ubHkiLCJzZXJ2ZXIiLCJmaWxlUmVhZGVyIiwicmFuZG9tTm9uY2VDaGFycyIsInRsc3Yxb25seSIsIlJlZGlyZWN0U3RhcnRTb2wiLCJSZWRpcmVjdFN0YXJ0S3ZtIiwiUmVkaXJlY3RTdGFydElkZXIiLCJhbXRBY2N1bXVsYXRvciIsImF1dGhVcmkiLCJpc0Jyb3dzZXIiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpc1dlYiIsImRlYnVnIiwiY29ubmVjdFN0YXRlIiwic29ja2V0IiwiZ2V0V3NMb2NhdGlvbiIsIm9ub3BlbiIsIm9uU29ja2V0Q29ubmVjdGVkIiwib25tZXNzYWdlIiwib25NZXNzYWdlIiwib25jbG9zZSIsIm9uU29ja2V0Q2xvc2VkIiwib25sb2FkIiwib25Tb2NrZXREYXRhIiwiZmlsZVJlYWRlckFjYyIsImZpbGVSZWFkZXJJblVzZSIsInJlYWRBc0JpbmFyeVN0cmluZyIsIm9ubG9hZGVuZCIsInJlYWRBc0FycmF5QnVmZmVyIiwidmVyYm9zZSIsIm9uU3RhdGVDaGFuZ2UiLCJyZWRpcnRyYWNlIiwiaW5mbyIsIlNPTCIsInNvY2tldFNlbmQiLCJLVk0iLCJJREVSIiwiaW5EYXRhQ291bnQiLCJiaW5hcnkiLCJieXRlTGVuZ3RoIiwiZXJyb3IiLCJzdG9wIiwib25FcnJvciIsIm9uUHJvY2Vzc0RhdGEiLCJjbWRzaXplIiwib2VtbGVuIiwiYXV0aERhdGFMZW4iLCJSZWFkSW50WCIsInN0YXR1cyIsImF1dGhUeXBlIiwiYXV0aERhdGEiLCJhdXRoRGF0YUJ1ZiIsImluY2x1ZGVzIiwiSW50VG9TdHJYIiwid2FybiIsIk1heFR4QnVmZmVyIiwiVHhUaW1lb3V0IiwiVHhPdmVyZmxvd1RpbWVvdXQiLCJSeFRpbWVvdXQiLCJSeEZsdXNoVGltZW91dCIsIkhlYXJ0YmVhdCIsImFtdFNlcXVlbmNlIiwiU2hvcnRUb1N0clgiLCJjdXJwdHIiLCJyZWFsbWxlbiIsInJlYWxtIiwibm9uY2VsZW4iLCJxb3BsZW4iLCJxb3AiLCJjbm9uY2UiLCJnZW5lcmF0ZVJhbmRvbU5vbmNlIiwic25jIiwiZXh0cmEiLCJkaWdlc3QiLCJoZXhfbWQ1IiwidG90YWxsZW4iLCJwYXJzZUludCIsImJ1ZiIsImFtdEtlZXBBbGl2ZVRpbWVyIiwic2V0SW50ZXJ2YWwiLCJzZW5kQW10S2VlcEFsaXZlIiwiY3MiLCJvblN0YXJ0Iiwic3RyIiwicnN0cjJoZXgiLCJyZWFkeVN0YXRlIiwiYiIsImJ1ZmZlciIsImNoYXJBdCIsIm5ld3N0YXRlIiwic3RhdGUiLCJvbk5ld1N0YXRlIiwib25TdGF0ZUNoYW5nZWQiLCJjbG9zZSIsImNsZWFySW50ZXJ2YWwiLCJIdHRwQ2xpZW50IiwidXJsIiwianNvbkhlYWRlcnMiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJpc01wcyIsImZldGNoUlBTIiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ0aGVuIiwianNvbiIsInBvd2VyQWN0aW9ucyIsImd1aWQiLCJhY3Rpb24iLCJtcHNTZXJ2ZXIiLCJ1c2VTT0wiLCJhcGlrZXkiLCJwYXlsb2FkIiwicG9zdCIsImdldFBvd2VyU3RhdGUiLCJhdmFpbGFibGVQb3dlckFjdGlvbnMiLCJsYWJlbCIsImdldEFjdGlvbkJ5SWQiLCJDb25zb2xlTG9nZ2VyIiwibGV2ZWwiLCJtaW5MZXZlbCIsIlZFUkJPU0UiLCJJTkZPIiwiREVCVUciLCJXQVJOSU5HIiwiRVJST1IiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIkVuY29kaW5nIiwicmxlRGVjb2RlciIsInVwZGF0ZVJGQlN0YXRlIiwid3NTb2NrZXQiLCJhY2MiLCJjbWRTaXplIiwiUmVhZFNob3J0IiwiZW5jb2RpbmciLCJSZWFkSW50IiwieHNwYWNlY2FjaGVuYW1lIiwic3BhcmVjYWNoZSIsImNyZWF0ZUltYWdlRGF0YSIsIlNjcmVlbldpZHRoIiwiU2NyZWVuSGVpZ2h0Iiwib25TY3JlZW5TaXplQ2hhbmdlIiwic2V0UGl4ZWwiLCJwdXRJbWFnZSIsImRhdGFsZW4iLCJkZWx0YSIsImR4IiwiUmVhZFNob3J0WCIsIkRlY29kZSIsInpsaWJzdHJpbmciLCJpbmZsYXRlIiwic2VuZFJlZnJlc2hDYWxsYmFjayIsInNlbmRSZWZyZXNoIiwiZnJhbWVSYXRlRGVsYXkiLCJzZXRUaW1lb3V0IiwiSGFuZHNoYWtlU3RhdGUiLCJGcmFtZUJ1ZmZlckJlbGxTZXJ2ZXJDdXRUZXh0Iiwic2VydmVyQ3V0VGV4dEhhbmRsZXIiLCJoYW5kbGVTZXJ2ZXJDdXRUZXh0IiwiU2VjdXJpdHlPcHRpb25zIiwiU2VjdXJpdHlSZXNwb25zZSIsIlNlcnZlckluaXQiLCJuYW1lbGVuIiwidXBkYXRlU2NyZWVuRGltZW5zaW9ucyIsInN1cHBvcnRlZEVuY29kaW5ncyIsInVzZVpSTEUiLCJTZXJ2ZXJDdXRUZXh0SGFuZGxlciIsIm9uS3ZtRGF0YSIsImt2bURhdGFTdXBwb3J0ZWQiLCJvblNlbmRLdm1EYXRhIiwiUkxFRGVjb2RlciIsInN1YmVuY29kaW5nIiwicnVubGVuZ3RoZGVjb2RlIiwicGFsZXR0ZSIsInJsZWNvdW50IiwicnVubGVuZ3RoIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJiciIsImJtIiwiRGVza3RvcCIsInN0YXRlUHJvY2Vzc29ycyIsIlBhdXNlIiwiQ2Fwc0xvY2siLCJTcGFjZSIsIlF1b3RlIiwiTWludXMiLCJOdW1wYWRNdWx0aXBseSIsIk51bXBhZEFkZCIsIlByaW50U2NyZWVuIiwiQ29tbWEiLCJOdW1wYWRTdWJ0cmFjdCIsIk51bXBhZERlY2ltYWwiLCJQZXJpb2QiLCJTbGFzaCIsIk51bXBhZERpdmlkZSIsIlNlbWljb2xvbiIsIkVxdWFsIiwiT1NMZWZ0IiwiQnJhY2tldExlZnQiLCJPU1JpZ2h0IiwiQmFja3NsYXNoIiwiQnJhY2tldFJpZ2h0IiwiQ29udGV4dE1lbnUiLCJCYWNrcXVvdGUiLCJOdW1Mb2NrIiwiU2Nyb2xsTG9jayIsIkJhY2tzcGFjZSIsIlRhYiIsIkVudGVyIiwiTnVtcGFkRW50ZXIiLCJFc2NhcGUiLCJEZWxldGUiLCJIb21lIiwiUGFnZVVwIiwiUGFnZURvd24iLCJBcnJvd0xlZnQiLCJBcnJvd1VwIiwiQXJyb3dSaWdodCIsIkFycm93RG93biIsIkVuZCIsIkluc2VydCIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIlNoaWZ0TGVmdCIsIlNoaWZ0UmlnaHQiLCJDb250cm9sTGVmdCIsIkNvbnRyb2xSaWdodCIsIkFsdExlZnQiLCJBbHRSaWdodCIsIk1ldGFMZWZ0IiwiTWV0YVJpZ2h0IiwiY29kZSIsInN0YXJ0c1dpdGgiLCJzaGlmdEtleSIsIlBvd2VyT3B0aW9ucyIsIm9uQ2xpY2siLCJvbkNoYW5nZSIsInNlbGVjdGVkIiwiaXNTZWxlY3RlZCIsImF2YWlsYWJsZU9wdGlvbnMiLCJQb3dlclN0YXRlIiwic3VwZXIiLCJnZXRBbXRQb3dlclN0YXRlIiwiZGV2aWNlSWQiLCJjb250ZXh0IiwibXBzS2V5IiwidXBkYXRlUGFyZW50IiwicG93ZXJzdGF0ZSIsInNldFN0YXRlIiwicG93ZXJTdGF0ZSIsImhhbmRsZVBvd2VyU3RhdHVzIiwiY2F0Y2giLCJyZW5kZXJQb3dlclN0YXRlIiwicGFyYW0iLCJjb2xvciIsInRpbWVJbnRlcnZhbCIsImNvbnRleHRUeXBlIiwiQ2hlY2tib3hDb250YWluZXIiLCJJY29uIiwic3ZnIiwiSGlkZGVuQ2hlY2tib3giLCJhdHRycyIsIlN0eWxlZENoZWNrYm94IiwiZGlzYWJsZUNoZWNrYm94IiwiZ2V0Q29sb3IiLCJjaGVja2VkIiwiQ2hlY2tib3giLCJjbGFzc05hbWUiLCJkaXNhYmxlZCIsInZpZXdCb3giLCJwb2ludHMiLCJsb2NhbHMiLCJmZXRjaEFtdEZlYXR1cmVzIiwiZ2V0QW10RmVhdHVyZXMiLCJzdGF0dXNjb2RlIiwidXNlckNvbnNlbnQiLCJ1c2VLVk0iLCJ1c2VJREVSIiwicmVkaXJlY3Rpb24iLCJ1cGRhdGVDaGVja2JveFN0YXR1cyIsImhhbmRsZUZlYXR1cmVTdGF0dXMiLCJmZWF0dXJlIiwic2V0QW10RmVhdHVyZSIsImZlYXR1cmVTdGF0dXNUZXh0IiwiZmVhdHVyZVRleHQiLCJlbmFibGVLVk0iLCJlbmFibGVTT0wiLCJlbmFibGVJREVSIiwic2V0QW10RmVhdHVyZXMiLCJzaG93TWVzc2FnZSIsImhhbmRsZUNoZWNrYm94Q2hhbmdlIiwiZXZlbnQiLCJTbmFja0JhciIsImdldENvbm5lY3RTdGF0ZSIsIkRhdGFQcm9jZXNzb3IiLCJzdGF0ZVByb2Nlc3NvckZhYyIsInN0YXRlUHJvY2Vzc29yIiwiZ2V0UHJvY2Vzc29yIiwicHJldlN0YXRlIiwicHJvY2Vzc1N0YXRlIiwiQU1US3ZtRGF0YVJlZGlyZWN0b3IiLCJBTVREZXNrdG9wIiwiY3R4IiwiaW5mbGF0ZUluaXQiLCJidXR0b25tYXNrIiwiY2FudmFzQ29udHJvbCIsImxhc3RNb3VzZU1vdmVUaW1lIiwiZ2V0VGltZSIsInNldERlc2tGb2N1cyIsImVsIiwiZ2V0RGVza0ZvY3VzIiwiaW5mbGF0ZVJlc2V0Iiwib25TZW5kIiwiTW91c2VIZWxwZXIiLCJkZWJvdW5jZVRpbWUiLCJtb3VzZUNsaWNrQ29tcGxldGVkIiwibGFzdEV2ZW50IiwiTW91c2VJbnB1dEdyYWIiLCJvbm1vdXNlbW92ZSIsIm9ubW91c2V1cCIsIm9ubW91c2Vkb3duIiwiYnV0dG9uIiwibW91c2Vtb3ZlIiwicG9zIiwiZ2V0UG9zaXRpb25PZkNvbnRyb2wiLCJwYWdlWCIsIm9mZnNldEhlaWdodCIsInBhZ2VZIiwic2Nyb2xsZGl2Iiwic2Nyb2xsVG9wIiwib2Zmc2V0V2lkdGgiLCJub01vdXNlUm90YXRlIiwibGFzdE1vdXNlWDIiLCJjcm90WCIsImNyb3RZIiwicXgiLCJxeSIsInEiLCJwcG9zIiwicGFyZW50RWxlbWVudCIsImxlZnQiLCJ0b3AiLCJoYWx0RXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIlBvc2l0aW9uIiwiY29udHJvbCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRQYXJlbnQiLCJVcERvd24iLCJLZXlCb2FyZEhlbHBlciIsImNvbW1zIiwiQ29tbXMiLCJLZXlJbnB1dEdyYWIiLCJvbmtleXVwIiwiaGFuZGxlS2V5VXAiLCJvbmtleWRvd24iLCJoYW5kbGVLZXlEb3duIiwib25rZXlwcmVzcyIsImhhbmRsZUtleXMiLCJoYW5kbGVLZXlFdmVudCIsIlVwIiwiRG93biIsImtlIiwiY29udmVydEFNVEtleUNvZGUiLCJrZXlDb2RlIiwia2siLCJBbXRUZXJtaW5hbCIsInRlcm1pbmFsRW11bGF0aW9uIiwiZnhFbXVsYXRpb24iLCJmeExpbmVCcmVhayIsIkFzY2lpVG9Vbmljb2RlIiwiQXNjaWlUb1VuaWNvZGVJbnRlbCIsIlN0YXRlQ2hhbmdlIiwibmV3U3RhdGUiLCJUZXJtU2VuZEtleXMiLCJUZXJtaW5hbERhdGFQcm9jZXNzb3IiLCJ0ZXJtaW5hbCIsInByb2Nlc3NEYXRhIiwiY2FwdHVyZSIsImNoIiwiY2xlYXJUZXJtaW5hbCIsInByb2Nlc3NEYXRhVG9YdGVybSIsIlpMSUIiLCJCQVNFIiwiY29tbW9uX2luaXRpYWxpemVkIiwiWl9OT19GTFVTSCIsIlpfUEFSVElBTF9GTFVTSCIsIlpfU1lOQ19GTFVTSCIsIlpfRlVMTF9GTFVTSCIsIlpfRklOSVNIIiwiWl9CTE9DSyIsIlpfVFJFRVMiLCJaX09LIiwiWl9TVFJFQU1fRU5EIiwiWl9ORUVEX0RJQ1QiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX01FTV9FUlJPUiIsIlpfQlVGX0VSUk9SIiwiWl9WRVJTSU9OX0VSUk9SIiwiWl9ERUZMQVRFRCIsInpfc3RyZWFtIiwibmV4dF9pbiIsImF2YWlsX2luIiwidG90YWxfaW4iLCJuZXh0X291dCIsImF2YWlsX291dCIsInRvdGFsX291dCIsIm1zZyIsImRhdGFfdHlwZSIsImFkbGVyIiwiaW5wdXRfZGF0YSIsIm91dHB1dF9kYXRhIiwiY2hlY2tzdW1fZnVuY3Rpb24iLCJnel9oZWFkZXIiLCJ0aW1lIiwieGZsYWdzIiwib3MiLCJleHRyYV9sZW4iLCJleHRyYV9tYXgiLCJuYW1lX21heCIsImNvbW1lbnQiLCJjb21tX21heCIsImhjcmMiLCJhbGVydCIsIkRFRl9XQklUUyIsIkhFQUQiLCJGTEFHUyIsIlRJTUUiLCJPUyIsIkVYTEVOIiwiRVhUUkEiLCJOQU1FIiwiQ09NTUVOVCIsIkhDUkMiLCJESUNUSUQiLCJESUNUIiwiVFlQRSIsIlRZUEVETyIsIlNUT1JFRCIsIkNPUFlfIiwiQ09QWSIsIlRBQkxFIiwiTEVOTEVOUyIsIkNPREVMRU5TIiwiTEVOXyIsIkxFTiIsIkxFTkVYVCIsIkRJU1QiLCJESVNURVhUIiwiTUFUQ0giLCJMSVQiLCJDSEVDSyIsIkxFTkdUSCIsIkRPTkUiLCJCQUQiLCJNRU0iLCJTWU5DIiwiRU5PVUdIX0xFTlMiLCJFTk9VR0hfRElTVFMiLCJFTk9VR0giLCJDT0RFUyIsIkxFTlMiLCJESVNUUyIsImluZmxhdGVfdGFibGVfbGJhc2UiLCJpbmZsYXRlX3RhYmxlX2xleHQiLCJpbmZsYXRlX3RhYmxlX2RiYXNlIiwiaW5mbGF0ZV90YWJsZV9kZXh0IiwiaW5mbGF0ZV90YWJsZSIsImNvZGVzIiwic3ltIiwicm9vdCIsImN1cnIiLCJkcm9wIiwidXNlZCIsImh1ZmYiLCJpbmNyIiwiZmlsbCIsImxvdyIsIm1hc2siLCJoZXJlIiwiYmFzZV9vZmZzZXQiLCJleHRyYV9vZmZzZXQiLCJlbmQiLCJ0YWJsZSIsImJpdHMiLCJkaXN0Yml0cyIsImxlbmJpdHMiLCJ3b3JrIiwibGVucyIsImxlbnNfb2Zmc2V0IiwibmxlbiIsInN0YXRlX2NvZGVzIiwibmRpc3QiLCJNQVhCSVRTIiwib2ZmcyIsIm9wIiwidmFsIiwiaW5mbGF0ZV9mYXN0Iiwic3RybSIsInN0YXJ0IiwibGFzdCIsIm91dCIsImJlZyIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsImhvbGQiLCJsY29kZSIsImRjb2RlIiwibG1hc2siLCJkbWFzayIsImRpc3QiLCJmcm9tX3dpbmRvd19vZmZzZXQiLCJmcm9tX291dF9vZmZzZXQiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsb29wIiwiZG9sZW4iLCJkb2Rpc3QiLCJzYW5lIiwibGVuX2lubmVyIiwibmV3X2FycmF5Iiwic2l6ZSIsImFyeSIsImdldGFyZyIsIm9wdHMiLCJkZWZfdmFsdWUiLCJjaGVja3N1bV9ub25lIiwiaW5mbGF0ZV9zdGF0ZSIsIndyYXAiLCJoYXZlZGljdCIsImZsYWdzIiwiZG1heCIsImNoZWNrIiwidG90YWwiLCJ3Yml0cyIsIm9mZnNldCIsIm5jb2RlIiwiaGF2ZSIsImJhY2siLCJ3YXMiLCJpbmZsYXRlX2NvcHlyaWdodCIsImluZmxhdGVSZXNldEtlZXAiLCJ3aW5kb3dCaXRzIiwiYWRsZXIzMiIsImNyYzMyIiwiaW5mbGF0ZVByaW1lIiwibGVuZml4X2FyeSIsImxlbmZpeF9kZWYiLCJkaXN0Zml4X2FyeSIsImRpc3RmaXhfZGVmIiwiZml4ZWR0YWJsZXMiLCJldmFsIiwidXBkYXRld2luZG93IiwiQ1JDMiIsIndvcmQiLCJoYnVmIiwiQ1JDNCIsIkxPQUQiLCJSRVNUT1JFIiwiSU5JVEJJVFMiLCJQVUxMQllURSIsIk5FRURCSVRTIiwiQklUUyIsIkRST1BCSVRTIiwiQllURUJJVFMiLCJSRVZFUlNFIiwiaW5mbGF0ZV9vcmRlciIsImZsdXNoIiwiX2luIiwiY29weSIsInJldCIsImluZl9sZWF2ZSIsInRtcCIsImluZmxhdGVFbmQiLCJpbnB1dF9zdHJpbmciLCJzdW0yIiwiTk1BWCIsImFkbGVyMzJfc3RyaW5nIiwiYWRsZXIzMl9hcnJheSIsImFkbGVyMzJfY29tYmluZSIsImFkbGVyMSIsImFkbGVyMiIsImxlbjIiLCJzdW0xIiwicmVtIiwiY3JjX3RhYmxlIiwiY3JjIiwiY3JjMzJfc3RyaW5nIiwiY3JjMzJfYXJyYXkiLCJnZjJfbWF0cml4X3RpbWVzIiwibWF0IiwidmVjIiwic3VtIiwibWF0X2kiLCJnZjJfbWF0cml4X3NxdWFyZSIsInNxdWFyZSIsImNyYzMyX2NvbWJpbmUiLCJjcmMxIiwiY3JjMiIsInJvdyIsImV2ZW4iLCJvZGQiLCJoYW5kbGVDb25uZWN0Q2xpY2siLCJrdm1zdGF0ZSIsIm9uRW5jb2RpbmdDaGFuZ2UiLCJjaGFuZ2VFbmNvZGluZyIsImRlc2t0b3BzZXR0aW5ncyIsImNoYW5nZURlc2t0b3BTZXR0aW5ncyIsIlN0eWxlZExhYmVsIiwiU3R5bGVkRGl2IiwiaGFuZGxlUG93ZXJPcHRpb25zIiwiZGV0YWlsIiwicG93ZXJBY3Rpb24iLCJpbmRleE9mIiwicmVzcG9uc2UiLCJCb2R5IiwiUmV0dXJuVmFsdWVTdHIiLCJzaG93U3VjY2VzcyIsIlJldHVyblZhbHVlIiwiZXJyb3JEZXNjcmlwdGlvbiIsImFqYXhFcnJvciIsImt2bU5vdEVuYWJsZWQiLCJkZXZpY2VPblNsZWVwIiwidXBkYXRlUG93ZXJTdGF0dXMiLCJpc1Bvd2VyU3RhdGVMb2FkZWQiLCJBbXRGZWF0dXJlcyIsImNhbnZhc0F0dHJpYnV0ZXMiLCJvbkNvbnRleHRNZW51Iiwib25Nb3VzZURvd24iLCJtb3VzZURvd24iLCJvbk1vdXNlVXAiLCJtb3VzZVVwIiwib25Nb3VzZU1vdmUiLCJtb3VzZU1vdmUiLCJyZWYiLCJjb250ZXh0UmVmIiwiZGVza3RvcFNldHRpbmdzQ2hhbmdlIiwiZW5jb2RpbmdPcHRpb24iLCJzYXZlQ29udGV4dCIsInN0YXJ0S1ZNIiwic3RvcEtWTSIsImdldFJlbmRlclN0YXR1cyIsIk9uQ29ubmVjdGlvblN0YXRlQ2hhbmdlIiwiaW5pdCIsImRldmljZVV1aWQiLCJyZWRpcmVjdG9yIiwiRmlsZVJlYWRlciIsImRhdGFQcm9jZXNzb3IiLCJtb3VzZUhlbHBlciIsIm1vdXNlRGVib3VuY2VUaW1lIiwia2V5Ym9hcmQiLCJvblJlZGlyZWN0b3JFcnJvciIsImNsZWFyUmVjdCIsInJlc2V0IiwiY2xlYW5VcCIsInNldHRpbmdzIiwiV2ViU29ja2V0IiwiR3JhYktleUlucHV0IiwiVW5HcmFiS2V5SW5wdXQiLCJwZXJzaXN0IiwicHJldlByb3BzIiwiYXV0b0Nvbm5lY3QiLCJjYW52YXNIZWlnaHQiLCJjYW52YXNXaWR0aCIsIm1vdXNlZG93biIsIm1vdXNldXAiLCJUZXJtaW5hbENvbnRhaW5lciIsIlhUZXJtIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwieHRlcm0iLCJoYW5kbGVLZXlQcmVzcyIsIm9wZW4iLCJvbkRhdGEiLCJhdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIiLCJjdHJsS2V5IiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiZ2V0U2VsZWN0aW9uIiwicmVhZFRleHQiLCJIZWFkZXJTdHJpcCIsIm9uVGVybWluYWxTdGF0ZUNoYW5nZSIsImhhbmRsZVdyaXRlVG9YdGVybSIsImhhbmRsZUNsZWFyVGVybWluYWwiLCJ0ZXJtIiwiY3Vyc29yU3R5bGUiLCJmb250V2VpZ2h0Iiwicm93cyIsImNvbHMiLCJ3cml0ZSIsImRvbUV2ZW50IiwiaGFuZGxlS2V5RG93blByZXNzIiwiaGFuZGxlS2V5RG93bkV2ZW50cyIsInN0YXJ0U09MIiwic3RvcFNPTCIsImhhbmRsZVNPTENvbm5lY3QiLCJTT0xzdGF0ZSIsInJlc0JvZHkiLCJzb2xOb3RFbmFibGVkIiwiZ2V0U09MU3RhdGUiLCJpc0Nvbm5lY3RlZCIsIkZyYWdtZW50Il0sIm1hcHBpbmdzIjoiNkRBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixP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Q0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEtBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxJQUNBLElBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxJQUNBLEtBQ0EsSUFDQSxLQUNBLElBQ0EsS0FDQSxLQUNBLElBQ0EsS0FDQSxLQUdGLEtBQUFDLG9CQUFzQixDQUNwQixJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FD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TUFBUSxHQUN0Q21NLEdBQVFuTSxPQUFNbU0sR0FBUW5NLE1BQ25CMk0sRUFBUVIsR0FBUSxVQXNDUCxJQUFUcE0sTUFDUDJDLE1BQU0sMERBR1QsV0FhRCxJQUFJbUssRUFBWSxDQUNaLEVBQVksV0FBWSxXQUFZLFdBQVksVUFDaEQsV0FBWSxXQUFZLFdBQVksVUFBWSxXQUNoRCxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQ2hELFdBQVksVUFBWSxXQUFZLFdBQVksV0FDaEQsVUFBWSxXQUFZLFdBQVksV0FBWSxVQUNoRCxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQ2hELFdBQVksV0FBWSxVQUFZLFdBQVksV0FDaEQsV0FBWSxXQUFZLFdBQVksV0FBWSxXQUNoRCxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQ2hELFdBQVksV0FBWSxXQUFZLFVBQVksV0FDaEQsV0FBWSxXQUFZLFVBQVksV0FBWSxXQUNoRCxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQ2hELFVBQVksV0FBWSxXQUFZLFdBQVksV0FDaEQsU0FBWSxXQUFZLFdBQVksV0FBWSxVQUNoRCxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQ2hELFdBQVksV0FBWSxVQUFZLFdBQVksV0FDaEQsV0FBWSxVQUFZLFdBQVksV0FBWSxXQUNoRCxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQ2hELFdBQVksV0FBWSxXQUFZLFVBQVksV0FDaEQsV0FBWSxXQUFZLFVBQVksV0FBWSxXQUNoRCxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQ2hELFVBQVksV0FBWSxXQUFZLFdBQVksVUFDaEQsV0FBWSxXQUFZLFdBQVksVUFBWSxXQUNoRCxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQ2hELFdBQVksVUFBWSxXQUFZLFdBQVksV0FDaEQsVUFBWSxXQUFZLFdBQVksV0FBWSxXQUNoRCxTQUFZLFdBQVksV0FBWSxXQUFZLFNBQ2hELFdBQVksV0FBWSxXQUFZLFVBQVksV0FDaEQsV0FBWSxXQUFZLFVBQVksV0FBWSxXQUNoRCxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQ2hELFVBQVksV0FBWSxXQUFZ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S3E2QixlQUFnQnFCLG1CQUFvQjE3QixLQUFLMDdCLG1CQUFvQnRCLE1BQU9wNkIsS0FBS203QixTQU01SSxFQUFJbGIsWUFBYyxLLDZCQy9SbEIsbUNBR0kxWixFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxJQUFJLElBQVNBLEdBSVgsY0FBUXlhLFFBQVUsSSw2QkNaakMsbUNBR0l6YSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxJQUFJLElBQVNBLEdBSVgsY0FBUXlhLFFBQVUsSSw2QkNaakMsbUNBR0l6YSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxJQUFJLElBQVNBLEdBSVgsY0FBUXlhLFFBQVUsSSw2QkNaakMsbUNBR0l6YSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxJQUFJLElBQVNBLEdBSVgsY0FBUXlhLFFBQVUsSSw2QkNaakMsbUNBR0l6YSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxJQUFJLElBQVNBLEdBSVgsY0FBUXlhLFFBQVUsSSxjQ1pqQ2xrQixFQUFPRCxRQUFVa0MsUUFBUSx3Qiw2QkNBekIiLCJmaWxlIjoibXBzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2MSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiLCJpbXBvcnQgeyBpc1RydXRoeSB9IGZyb20gJy4vVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzJ1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogVmluYXkgR1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuZXhwb3J0IGNsYXNzIFR5cGVDb252ZXJ0ZXIge1xyXG4gIC8vIEJpbmFyeSBlbmNvZGluZyBhbmQgZGVjb2RpbmcgZnVuY3Rpb25zXHJcbiAgc3RhdGljIFJlYWRTaG9ydCAodjogc3RyaW5nLCBwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgLy9cclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHApIDw8IDgpICsgdi5jaGFyQ29kZUF0KHAgKyAxKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIFJlYWRTaG9ydFggKHY6IHN0cmluZywgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHAgKyAxKSA8PCA4KSArIHYuY2hhckNvZGVBdChwKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIFJlYWRJbnQgKHY6IHN0cmluZywgcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodi5jaGFyQ29kZUF0KHApICogMHgxMDAwMDAwKSArICh2LmNoYXJDb2RlQXQocCArIDEpIDw8IDE2KSArXHJcbiAgICAgICAgICAgKHYuY2hhckNvZGVBdChwICsgMikgPDwgOCkgKyB2LmNoYXJDb2RlQXQocCArIDMpXHJcbiAgfSAvLyBXZSB1c2UgXCIqMHgxMDAwMDAwXCIgaW5zdGVhZCBvZiBcIjw8MjRcIiBiZWNhdXNlIHRoZSBzaGlmdCBjb252ZXJ0cyB0aGUgbnVtYmVyIHRvIHNpZ25lZCBpbnQzMi5cclxuXHJcbiAgc3RhdGljIFJlYWRTSW50ICh2OiBzdHJpbmcsIHA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKHYuY2hhckNvZGVBdChwKSA8PCAyNCkgKyAodi5jaGFyQ29kZUF0KHAgKyAxKSA8PCAxNikgK1xyXG4gICAgICAgICAgICh2LmNoYXJDb2RlQXQocCArIDIpIDw8IDgpICsgdi5jaGFyQ29kZUF0KHAgKyAzKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIFJlYWRJbnRYICh2OiBzdHJpbmcsIHA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKHYuY2hhckNvZGVBdChwICsgMykgKiAweDEwMDAwMDApICsgKHYuY2hhckNvZGVBdChwICsgMikgPDwgMTYpICtcclxuICAgICAgICAgICAodi5jaGFyQ29kZUF0KHAgKyAxKSA8PCA4KSArIHYuY2hhckNvZGVBdChwKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIFNob3J0VG9TdHIgKHY6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgodiA+PiA4KSAmIDB4RkYsIHYgJiAweEZGKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIFNob3J0VG9TdHJYICh2OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodiAmIDB4RkYsICh2ID4+IDgpICYgMHhGRilcclxuICB9XHJcblxyXG4gIHN0YXRpYyBJbnRUb1N0ciAodjogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCh2ID4+IDI0KSAmIDB4RkYsICh2ID4+IDE2KSAmIDB4RkYsICh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkYpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgSW50VG9TdHJYICh2OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodiAmIDB4RkYsICh2ID4+IDgpICYgMHhGRiwgKHYgPj4gMTYpICYgMHhGRiwgKHYgPj4gMjQpICYgMHhGRilcclxuICB9XHJcblxyXG4gIHN0YXRpYyBNYWtlVG9BcnJheSAodjogbnVtYmVyKTogbnVtYmVyIHwgbnVtYmVyW10ge1xyXG4gICAgaWYgKCF2IHx8IHYgPT0gbnVsbCB8fCB0eXBlb2YgdiA9PT0gJ29iamVjdCcpIHJldHVybiB2OyByZXR1cm4gW3ZdXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgU3BsaXRBcnJheSAodjogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHYuc3BsaXQoJywnKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIENsb25lICh2OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodikpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgRXNjYXBlSHRtbCAoeDogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbik6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4geC5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLz4vZywgJyZndDsnKVxyXG4gICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyZhcG9zOycpXHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHggPT09ICdib29sZWFuJykgeyByZXR1cm4geCB9XHJcbiAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7IHJldHVybiB4IH1cclxuICB9XHJcblxyXG4gIC8vIE1vdmUgYW4gZWxlbWVudCBmcm9tIG9uZSBwb3NpdGlvbiBpbiBhbiBhcnJheSB0byBhIG5ldyBwb3NpdGlvblxyXG4gIHN0YXRpYyBBcnJheUVsZW1lbnRNb3ZlIChhcnI6IG51bWJlcltdLCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGFyci5zcGxpY2UodG8sIDAsIGFyci5zcGxpY2UoZnJvbSwgMSlbMF0pXHJcbiAgfTtcclxuXHJcbiAgLy8gUHJpbnQgb2JqZWN0IGZvciBIVE1MXHJcbiAgc3RhdGljIE9iamVjdFRvU3RyaW5nRXggKHg6IGFueSwgYzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGxldCByOiBzdHJpbmcgPSAnJ1xyXG4gICAgaWYgKHggIT09IDAgJiYgKCFpc1RydXRoeSh4KSB8fCB4ID09IG51bGwpKSByZXR1cm4gJyhOdWxsKSdcclxuICAgIGlmICh4IGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiB4KSB7XHJcbiAgICAgICAgciArPSAnPGJyIC8+JyArIHRoaXMuZ2FwKGMpICsgJ0l0ZW0gIycgKyBpICsgJzogJyArIHRoaXMuT2JqZWN0VG9TdHJpbmdFeCh4W2ldLCBjICsgMSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh4IGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgIGZvciAodmFyIGogaW4geCkge1xyXG4gICAgICAgIHIgKz0gJzxiciAvPicgKyB0aGlzLmdhcChjKSArIGogKyAnID0gJyArIHRoaXMuT2JqZWN0VG9TdHJpbmdFeCh4W2pdLCBjICsgMSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgciArPSB0aGlzLkVzY2FwZUh0bWwoeClcclxuICAgIH1cclxuICAgIHJldHVybiByXHJcbiAgfVxyXG5cclxuICAvLyBQcmludCBvYmplY3QgZm9yIGNvbnNvbGVcclxuICBzdGF0aWMgT2JqZWN0VG9TdHJpbmdFeDIgKHg6IGFueSwgYzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGxldCByOiBzdHJpbmcgPSAnJ1xyXG4gICAgaWYgKHggIT09IDAgJiYgKCFpc1RydXRoeSh4KSB8fCB4ID09IG51bGwpKSB7IHJldHVybiAnKE51bGwpJyB9XHJcbiAgICBpZiAoeCBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4geCkge1xyXG4gICAgICAgIHIgKz0gJ1xcclxcbicgKyB0aGlzLmdhcDIoYykgKyAnSXRlbSAjJyArIGkgKyAnOiAnICsgdGhpcy5PYmplY3RUb1N0cmluZ0V4Mih4W2ldLCBjICsgMSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh4IGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgIGZvciAodmFyIGogaW4geCkge1xyXG4gICAgICAgIHIgKz0gJ1xcclxcbicgKyB0aGlzLmdhcDIoYykgKyBqICsgJyA9ICcgKyB0aGlzLk9iamVjdFRvU3RyaW5nRXgyKHhbal0sIGMgKyAxKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByICs9IHRoaXMuRXNjYXBlSHRtbCh4KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBhbiBpZGVudCBnYXBcclxuICBzdGF0aWMgZ2FwIChjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHggPSAnJ1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAoYyAqIDQpOyBpKyspIHtcclxuICAgICAgeCArPSAnJm5ic3A7J1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHhcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnYXAyIChjOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHggPSAnJ1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAoYyAqIDQpOyBpKyspIHtcclxuICAgICAgeCArPSAnICdcclxuICAgIH1cclxuICAgIHJldHVybiB4XHJcbiAgfVxyXG5cclxuICAvLyBQcmludCBhbiBvYmplY3QgaW4gaHRtbFxyXG4gIHN0YXRpYyBPYmplY3RUb1N0cmluZyAoeDogYW55KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLk9iamVjdFRvU3RyaW5nRXgoeCwgMClcclxuICB9XHJcblxyXG4gIHN0YXRpYyBPYmplY3RUb1N0cmluZzIgKHg6IGFueSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5PYmplY3RUb1N0cmluZ0V4Mih4LCAwKVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBhIGhleCBzdHJpbmcgdG8gYSByYXcgc3RyaW5nXHJcbiAgc3RhdGljIGhleDJyc3RyIChkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKHR5cGVvZiBkICE9PSAnc3RyaW5nJyB8fCBkLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJycgfVxyXG4gICAgbGV0IHIgPSAnJzsgY29uc3QgbTogYW55ID0gKCcnICsgZCkubWF0Y2goLy4uL2cpOyBsZXQgdFxyXG4gICAgd2hpbGUgKHQgPSBtLnNoaWZ0KCkpIHsgciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKE51bWJlcignMHgnICsgdCkpIH1cclxuICAgIHJldHVybiByXHJcbiAgfVxyXG5cclxuICAvLyBDb252ZXJ0IGRlY2ltYWwgdG8gaGV4XHJcbiAgc3RhdGljIGNoYXIyaGV4IChpOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoLTIpLnRvVXBwZXJDYXNlKClcclxuICB9XHJcblxyXG4gIC8vIENvbnZlcnQgYSByYXcgc3RyaW5nIHRvIGEgaGV4IHN0cmluZ1xyXG4gIHN0YXRpYyByc3RyMmhleCAoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBsZXQgciA9ICcnOyBsZXQgaVxyXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHIgKz0gdGhpcy5jaGFyMmhleChpbnB1dC5jaGFyQ29kZUF0KGkpKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJcclxuICB9XHJcblxyXG4gIC8vIFVURi04IGVuY29kaW5nICYgZGVjb2RpbmcgZnVuY3Rpb25zXHJcbiAgc3RhdGljIGVuY29kZV91dGY4IChzOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzKSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWNvZGVfdXRmOCAoczogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHMpKVxyXG4gIH1cclxuXHJcbiAgLy8gQ29udmVydCBhIHN0cmluZyBpbnRvIGEgYmxvYlxyXG4gIHN0YXRpYyBkYXRhMmJsb2IgKGRhdGE6IHN0cmluZyk6IGFueSB7XHJcbiAgICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShkYXRhLmxlbmd0aClcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgeyBieXRlc1tpXSA9IGRhdGEuY2hhckNvZGVBdChpKSB9XHJcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW25ldyBVaW50OEFycmF5KGJ5dGVzKV0pXHJcbiAgICByZXR1cm4gYmxvYlxyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhdGUgcmFuZG9tIG51bWJlcnNcclxuICBzdGF0aWMgcmFuZG9tIChtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KVxyXG4gIH1cclxuXHJcbiAgLy8gVHJhZGVtYXJrc1xyXG4gIHN0YXRpYyB0cmFkZW1hcmtzICh4OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHgucmVwbGFjZSgvXFwoUlxcKS9nLCAnJnJlZzsnKS5yZXBsYWNlKC9cXChUTVxcKS9nLCAnJnRyYWRlOycpXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDIxXHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzVHJ1dGh5ID0gKHZhbHVlOiBhbnkpOiBib29sZWFuID0+IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09ICcnICYmIHZhbHVlICE9PSBmYWxzZSAmJiB2YWx1ZSAhPT0gMFxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IGRvdCBmcm9tICdkb3Qtb2JqZWN0J1xyXG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSdcclxuXHJcbi8qKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0IG9yIG5vdCAqL1xyXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodmFsdWUpOiBhbnkgPT4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xyXG5cclxuLyoqIFRha2VzIGFuIG9iamVjdCBhbmQgY29udmVydHMgdGhlIGtleXMgaW50byBjYW1lbGNhc2UgICovXHJcbmV4cG9ydCBjb25zdCBjYW1lbENhc2VLZXlzID0gKGRhdGEpOiBhbnkgPT4ge1xyXG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICByZXR1cm4gZGF0YS5tYXAoY2FtZWxDYXNlS2V5cylcclxuICB9IGVsc2UgaWYgKGRhdGEgIT09IG51bGwgJiYgaXNGYWxzeShpc09iamVjdChkYXRhKSkpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgIGFjY1tjYW1lbENhc2Uoa2V5KV0gPSBjYW1lbENhc2VLZXlzKHZhbHVlKVxyXG4gICAgICByZXR1cm4gYWNjXHJcbiAgICB9LCB7fSlcclxuICB9XHJcbiAgcmV0dXJuIGRhdGFcclxufVxyXG5cclxuLyoqIFRha2VzIGFuIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYW5vdGhlciBzdHJ1Y3R1cmUgdXNpbmcgZG90LW5vdGF0aW9uICovXHJcbmV4cG9ydCBjb25zdCByZXNoYXBlID0gKHJlc3BvbnNlLCBtb2RlbCk6IGFueSA9PiB7XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVsKS5yZWR1Y2UoXHJcbiAgICAoYWNjLCBrZXkpID0+IGRvdC5jb3B5KGtleSwgbW9kZWxba2V5XSwgcmVzcG9uc2UsIGFjYyksXHJcbiAgICB7fVxyXG4gIClcclxufVxyXG5cclxuLyoqIFRha2VzIGFuIG9iamVjdCwgY2FtZWwgY2FzZXMgdGhlIGtleXMsIGFuZCBjb252ZXJ0cyBpdCB0byBhbm90aGVyIHN0cnVjdHVyZSB1c2luZyBkb3Qtbm90YXRpb24gKi9cclxuZXhwb3J0IGNvbnN0IGNhbWVsQ2FzZVJlc2hhcGUgPSAocmVzcG9uc2UsIG1vZGVsKTogYW55ID0+IHtcclxuICByZXR1cm4gcmVzaGFwZShjYW1lbENhc2VLZXlzKHJlc3BvbnNlKSwgbW9kZWwpXHJcbn1cclxuXHJcbi8qKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGEgZnVuY3Rpb24gKi9cclxuZXhwb3J0IGNvbnN0IGlzRnVuYyA9ICh2YWx1ZSk6IGFueSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcclxuXHJcbmV4cG9ydCBjb25zdCBwYXNzd29yZExlbmd0aFZhbGlkYXRpb24gPSAobGVuZ3RoKTogYW55ID0+IGxlbmd0aCA+PSA4ICYmIGxlbmd0aCA8PSAzMlxyXG5cclxuZXhwb3J0IGNvbnN0IG5hbWVWYWxpZGF0aW9uID0gKHZhbHVlKTogYW55ID0+XHJcbiAgbmV3IFJlZ0V4cCgnXlthLXpBLVowLTkkQCQhJSojPyYtX35eXSskJykudGVzdCh2YWx1ZSlcclxuXHJcbmV4cG9ydCBjb25zdCBwYXNzd29yZFZhbGlkYXRpb24gPSAodmFsdWUpOiBhbnkgPT5cclxuICBuZXcgUmVnRXhwKFxyXG4gICAgJ14oPz0uKlswLTldKSg/PS4qWyFAIyQlXiYqXSkoPz0uKlthLXpdKSg/PS4qW0EtWl0pW2EtekEtWjAtOSRAJCElKiM/Ji1ffl5dezgsMzJ9JCdcclxuICApLnRlc3QodmFsdWUpXHJcblxyXG4vLyBleHBvcnQgY29uc3QgcG9ydFZhbGlkYXRpb24gPSAodmFsdWUpID0+IG5ldyBSZWdFeHAoJ14oNDkxNVswLTFdfDQ5MVswLTRdXFxkfDQ5MFxcZFxcZHw0WzAtOF1cXGR7M318WzEtM11cXGR7NH18WzItOV1cXGR7M318MVsxLTldXFxkezJ9fDEwWzMtOV1cXGR8MTAyWzQtOV0pJCcpLnRlc3QodmFsdWUpXHJcbmV4cG9ydCBjb25zdCBwb3J0VmFsaWRhdGlvbiA9ICh2YWx1ZSk6IGFueSA9PlxyXG4gIG5ldyBSZWdFeHAoXHJcbiAgICAnXigxMDJbNC05XXwxMFszLTldWzAtOV18MVsxLTldWzAtOV17Mn18WzItOV1bMC05XXszfXxbMS0zXVswLTldezR9fDRbMC04XVswLTldezN9fDQ5MFswLTldezJ9fDQ5MVswLTRdWzAtOV18NDkxNVswMV0pJCdcclxuICApLnRlc3QodmFsdWUpXHJcblxyXG5leHBvcnQgY29uc3QgY29tbW9uTmFtZVZhbGlkYXRpb24gPSAodmFsdWUpOiBhbnkgPT5cclxuICBpc0ZhbHN5KHZhbHVlKSA/IG5ldyBSZWdFeHAoJ1teYS16QS1aMC05Ll8tXScpLnRlc3QodmFsdWUpIDogdHJ1ZVxyXG5cclxuZXhwb3J0IGNvbnN0IGlwQWRkcmVzc1ZhbGlkYXRpb24gPSAoaXBUeXBlLCB2YWx1ZSk6IGFueSA9PlxyXG4gIGlwVHlwZSA9PT0gM1xyXG4gICAgPyBpcHY0KHZhbHVlKVxyXG4gICAgOiBpcFR5cGUgPT09IDZcclxuICAgICAgPyBpcHY2KHZhbHVlKVxyXG4gICAgICA6IGlwVHlwZSA9PT0gMjAxXHJcbiAgICAgICAgPyBmcWRuKHZhbHVlKVxyXG4gICAgICAgIDogJydcclxuXHJcbi8qKiBpcHY0IGZvcm1hdGUgdmFsaWRhdGlvbiAgKi9cclxuY29uc3QgaXB2NCA9ICh2YWx1ZSk6IGFueSA9PlxyXG4gIG5ldyBSZWdFeHAoXHJcbiAgICAnXihbMDFdP1swLTldP1swLTldfDJbMC00XVswLTldfDI1WzAtNV0pXFxcXC4oWzAxXT9bMC05XT9bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKVxcXFwuKFswMV0/WzAtOV0/WzAtOV18MlswLTRdWzAtOV18MjVbMC01XSlcXFxcLihbMDFdP1swLTldP1swLTldfDJbMC00XVswLTldfDI1WzAtNV0pJCdcclxuICApLnRlc3QodmFsdWUpXHJcblxyXG4vKiogaXB2NiBmb3JtYXRlIHZhbGlkYXRpb24gICovXHJcblxyXG5jb25zdCBpcHY2ID0gKHZhbHVlKTogYW55ID0+XHJcbiAgbmV3IFJlZ0V4cChcclxuICAgICdeKCg/OlswLTlBLUZhLWZdezEsNH0pKSgoPzo6WzAtOUEtRmEtZl17MSw0fSkpKjo6KCg/OlswLTlBLUZhLWZdezEsNH0pKSgoPzo6WzAtOUEtRmEtZl17MSw0fSkpKnwoKD86WzAtOUEtRmEtZl17MSw0fSkpKCg/OjpbMC05QS1GYS1mXXsxLDR9KSl7N30kJ1xyXG4gICkudGVzdCh2YWx1ZSlcclxuXHJcbi8qKiBmcWRuIGZvcm1hdGUgdmFsaWRhdGlvbiAgKi9cclxuY29uc3QgZnFkbiA9ICh2YWx1ZSk6IGFueSA9PiAvXig/PS57MSwyNTR9JCkoKD89W2EtejAtOS1dezEsNjN9XFwuKSh4bi0tKyk/W2EtejAtOV0rKC1bYS16MC05XSspKlxcLikrW2Etel17Miw2M30kLy50ZXN0KHZhbHVlKVxyXG5cclxuLyoqIHV0aWxpdHkgZnVuY3Rpb24gdG8gam9pbiB0aGUgY3NzIGNsYXNzIG5hbWVzICovXHJcbmV4cG9ydCBjb25zdCBqb2luQ2xhc3NlcyA9ICguLi5jbGFzc05hbWVzKTogYW55ID0+XHJcbiAgY2xhc3NOYW1lc1xyXG4gICAgLmZpbHRlcigobmFtZSkgPT4gISFpc0ZhbHN5KG5hbWUpKVxyXG4gICAgLmpvaW4oJyAnKVxyXG4gICAgLnRyaW0oKVxyXG5cclxuLyoqXHJcbiAqIGVuY29kZSB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW5jb2RlU3BlY2lhbENoYXJhY3RlcnMgPSAoY29uZmlnTmFtZSk6IHN0cmluZyA9PiB7XHJcbiAgY29uc3QgcmVwbGFjZUNoYXJzID0geyAnIyc6ICclMjMnLCAnJSc6ICclMjUnIH1cclxuICByZXR1cm4gY29uZmlnTmFtZS5yZXBsYWNlKC8jfCUvZywgbWF0Y2ggPT4gcmVwbGFjZUNoYXJzW21hdGNoXSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHByZXBhcmVIZWFkZXJzID0gKGFwaUtleSwgaXNNcHNDb250cm9sPzogYm9vbGVhbik6IGFueSA9PiB7XHJcbiAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gIH1cclxuICBpZiAoaXNGYWxzeShpc01wc0NvbnRyb2wpKSB7XHJcbiAgICBoZWFkZXJzWydYLU1QUy1BUEktS2V5J10gPSBhcGlLZXlcclxuICB9IGVsc2Uge1xyXG4gICAgaGVhZGVyc1snWC1SUFMtQVBJLUtleSddID0gYXBpS2V5XHJcbiAgfVxyXG4gIHJldHVybiBoZWFkZXJzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUZpbGVFeHRlbnNpb25zID0gKGZpbGVQYXRoKTogYm9vbGVhbiA9PiB7XHJcbiAgY29uc3QgdmFsaWRFeHRlbnNpb25zID0gLyhcXC5wZngpJC9pXHJcbiAgcmV0dXJuICEhaXNGYWxzeSh2YWxpZEV4dGVuc2lvbnMuZXhlYyhmaWxlUGF0aCkpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0ZhbHN5ID0gKHZhbHVlOiBhbnkpOiBib29sZWFuID0+IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09ICcnICYmIHZhbHVlICE9PSBmYWxzZSAmJiB2YWx1ZSAhPT0gMFxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBpMThuZXh0IGZyb20gJ2kxOG5leHQnXHJcbmltcG9ydCB7IGlzRmFsc3kgfSBmcm9tICcuL1V0aWxpdGllcydcclxuXHJcbi8qKlxyXG4gKiBBIGhlbHBlciBtZXRob2QgZm9yIHRyYW5zbGF0aW5nIGhlYWRlck5hbWVzIGFuZCBoZWFkZXJUb29sdGlwcyBvZiBjb2x1bW5EZWZzLlxyXG4gKiBJZiBoZWFkZXJUb29sdGlwIGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIHRyYW5zbGF0ZWQuXHJcbiAqIElmIGhlYWRlclRvb2x0aXAgaXMgbm90IHByb3ZpZGVkLCB0aGUgaGVhZGVyTmFtZSB3aWxsIGJlIHVzZWQgdG8gZW5zdXJlIGhlYWRlcnNcclxuICogY2FuIGJlIGRlY2lwaGVyZWQgZXZlbiB3aGVuIHRoZSBjb2x1bW4gaXMgdG9vIG5hcnJvdyB0byBzaG93IHRoZSBlbnRpcmUgaGVhZGVyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZUNvbHVtbkRlZnMgPSAoY29sdW1uRGVmczogYW55KTogYW55ID0+IHtcclxuICByZXR1cm4gY29sdW1uRGVmcy5tYXAoY29sdW1uRGVmID0+IHtcclxuICAgIGNvbnN0IGhlYWRlckNvbXBvbmVudFBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMpXHJcbiAgICBjb25zdCBoZWFkZXJOYW1lID0gaXNGYWxzeShjb2x1bW5EZWYuaGVhZGVyTmFtZSkgPyBpMThuZXh0LnQoY29sdW1uRGVmLmhlYWRlck5hbWUpIDogdW5kZWZpbmVkXHJcbiAgICBjb25zdCBoZWFkZXJUb29sdGlwID0gaXNGYWxzeShjb2x1bW5EZWYuaGVhZGVyVG9vbHRpcCkgPyBpMThuZXh0LnQoY29sdW1uRGVmLmhlYWRlclRvb2x0aXApIDogaGVhZGVyTmFtZVxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zLmRlc2NyaXB0aW9uID0gaXNGYWxzeShjb2x1bW5EZWYuaGVhZGVyQ29tcG9uZW50UGFyYW1zKSAmJiBpc0ZhbHN5KGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMuZGVzY3JpcHRpb24pID8gaTE4bmV4dC50KGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMuZGVzY3JpcHRpb24pIDogaGVhZGVyTmFtZVxyXG4gICAgcmV0dXJuIHsgLi4uY29sdW1uRGVmLCBoZWFkZXJOYW1lLCBoZWFkZXJDb21wb25lbnRQYXJhbXMsIGhlYWRlclRvb2x0aXAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbi8qKiBmdW5jdGlvbiB0byBnZXQgdGhlIHN0YXRpYyB0cmFubGF0aW9uIHRleHRzIGZyb20gdHJhbnNsYXRpb24uanNvblxyXG4gKiBAcGFyYW06IHRleHQgLSBjb250YWlucyB0aGUgcGF0aCB0byB0aGUgdGV4dCBpbiB0cmFuc2xhdGlvbi5qc29uXHJcbiovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVUZXh0ID0gKHRleHQ6IGFueSk6IGFueSA9PiBpMThuZXh0LnQodGV4dClcclxuXHJcbi8qKiBmdW5jdGlvbiB0byBnZXQgdGhlIHRyYW5zbGF0aW9uIHRleHQgd2hlbiB0aGVyZSBhcmUgZHluYW1pYyB2YWx1ZXMgdG8gYmUgcmVuZGVyZWQgaW4gdHJhbnNsYXRpb25cclxuICogQHBhcmFtOiB0ZXh0IC0gY29udGFpbnMgdGhlIHBhdGggdG8gdGhlIHRleHQgaW4gdHJhbnNsYXRpb24uanNvblxyXG4gKiBAcGFyYW06IHRyYW5zbGF0ZSAtIG9iamVjdCBjb250YWluaW5nIGR5bmFtaWMgdmFsdWVzLiBUaGUga2V5cyB0byBiZSB1c2VkIGluc2lkZSB0cmFuc2xhdGlvbi5qc29uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlRHluYW1pY1RleHQgPSAodGV4dDogYW55LCB0cmFuc2xhdGUpOiBhbnkgPT4gaTE4bmV4dC50KHRleHQsIHsgdHJhbnNsYXRlIH0pXHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IERlc2t0b3AgfSBmcm9tICcuLi9EZXNrdG9wJ1xyXG5cclxuLyoqXHJcbiAqIFByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gaGFuZGxlIGltYWdlIHBpeGVsIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW1hZ2VIZWxwZXIge1xyXG4gIC8qKlxyXG4gICAqIHB1dHMgaW1hZ2Ugb24gY2FudmFzIHVzaW5nIHRoZSBwYXJlbnQgY2FudmFzIGN0eC5cclxuICAgKiBAcGFyYW0gcGFyZW50IHBhcmVudCBkZXNrdG9wIHdpdGggQ1RYIGZvciBjYW52YXNcclxuICAgKiBAcGFyYW0geCB4IGxvY1xyXG4gICAqIEBwYXJhbSB5IHkgbG9jXHJcbiAgICovXHJcbiAgc3RhdGljIHB1dEltYWdlIChwYXJlbnQ6IERlc2t0b3AsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYW55IHtcclxuICAgIGlmIChwYXJlbnQuaG9sZGluZykgcmV0dXJuXHJcblxyXG4gICAgY29uc3QgeHggPSBJbWFnZUhlbHBlci5hcm90WChwYXJlbnQsIHgsIHkpXHJcbiAgICB5ID0gSW1hZ2VIZWxwZXIuYXJvdFkocGFyZW50LCB4LCB5KVxyXG4gICAgeCA9IHh4XHJcbiAgICBwYXJlbnQuY2FudmFzQ3R4LnB1dEltYWdlRGF0YShwYXJlbnQuc3BhcmUsIHgsIHkpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXJlbnQgcGFyZW50IGRlc2t0b3BcclxuICAgKiBAcGFyYW0gdmFsdWUgcGl4ZWwgdmFsdWUgYXQgcHRyXHJcbiAgICogQHBhcmFtIHB0ciBwdHIgaW50byB0aGUgaW1hZ2UgcGl4ZWwgZGF0YVxyXG4gICAqL1xyXG4gIHN0YXRpYyBzZXRQaXhlbCAocGFyZW50OiBEZXNrdG9wLCB2YWx1ZTogYW55LCBwdHI6IG51bWJlcik6IGFueSB7XHJcbiAgICBsZXQgcHAgPSBwdHIgKiA0XHJcbiAgICBsZXQgeDogbnVtYmVyXHJcbiAgICBsZXQgeTogbnVtYmVyXHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID4gMCkge1xyXG4gICAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAxKSB7XHJcbiAgICAgICAgeCA9IHB0ciAlIHBhcmVudC5zcGFyZXdcclxuICAgICAgICB5ID0gTWF0aC5mbG9vcihwdHIgLyBwYXJlbnQuc3BhcmV3KVxyXG4gICAgICAgIHB0ciA9ICh4ICogcGFyZW50LnNwYXJldzIpICsgKHBhcmVudC5zcGFyZXcyIC0gMSAtIHkpXHJcbiAgICAgICAgcHAgPSBwdHIgKiA0XHJcbiAgICAgIH0gZWxzZSBpZiAocGFyZW50LnJvdGF0aW9uID09PSAyKSB7IHBwID0gKHBhcmVudC5zcGFyZXcgKiBwYXJlbnQuc3BhcmVoICogNCkgLSA0IC0gcHAgfSBlbHNlIGlmIChwYXJlbnQucm90YXRpb24gPT09IDMpIHtcclxuICAgICAgICB4ID0gcHRyICUgcGFyZW50LnNwYXJld1xyXG4gICAgICAgIHkgPSBNYXRoLmZsb29yKHB0ciAvIHBhcmVudC5zcGFyZXcpXHJcbiAgICAgICAgcHRyID0gKChwYXJlbnQuc3BhcmV3MiAtIDEgLSB4KSAqIHBhcmVudC5zcGFyZXcyKSArICh5KVxyXG4gICAgICAgIHBwID0gcHRyICogNFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhcmVudC5icHAgPT09IDEpIHtcclxuICAgICAgLy8gU2V0IDhiaXQgY29sb3IgUkdCMzMyXHJcbiAgICAgIHBhcmVudC5zcGFyZS5kYXRhW3BwKytdID0gdmFsdWUgJiAyMjRcclxuICAgICAgcGFyZW50LnNwYXJlLmRhdGFbcHArK10gPSAodmFsdWUgJiAyOCkgPDwgM1xyXG4gICAgICBwYXJlbnQuc3BhcmUuZGF0YVtwcCsrXSA9IEltYWdlSGVscGVyLmZpeENvbG9yKCh2YWx1ZSAmIDMpIDw8IDYpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBTZXQgMTZiaXQgY29sb3IgUkdCNTY1XHJcbiAgICAgIHBhcmVudC5zcGFyZS5kYXRhW3BwKytdID0gKHZhbHVlID4+IDgpICYgMjQ4XHJcbiAgICAgIHBhcmVudC5zcGFyZS5kYXRhW3BwKytdID0gKHZhbHVlID4+IDMpICYgMjUyXHJcbiAgICAgIHBhcmVudC5zcGFyZS5kYXRhW3BwKytdID0gKHZhbHVlICYgMzEpIDw8IDNcclxuICAgIH1cclxuICAgIHBhcmVudC5zcGFyZS5kYXRhW3BwXSA9IDB4RkYgLy8gU2V0IGFscGhhIGNoYW5uZWwgdG8gb3BhcXVlLlxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFyb3RYIChwYXJlbnQ6IERlc2t0b3AsIHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDApIHJldHVybiB4XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAxKSByZXR1cm4gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMud2lkdGggLSBwYXJlbnQuc3BhcmV3MiAtIHlcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDIpIHJldHVybiBwYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy53aWR0aCAtIHBhcmVudC5zcGFyZXcyIC0geFxyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMykgcmV0dXJuIHlcclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXJvdFkgKHBhcmVudDogRGVza3RvcCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMCkgcmV0dXJuIHlcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDEpIHJldHVybiB4XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAyKSByZXR1cm4gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0IC0gcGFyZW50LnNwYXJlaDIgLSB5XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAzKSByZXR1cm4gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0IC0gcGFyZW50LnNwYXJlaCAtIHhcclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JvdFggKHBhcmVudDogRGVza3RvcCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMCkgcmV0dXJuIHhcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDEpIHJldHVybiB5XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAyKSByZXR1cm4gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMud2lkdGggLSB4XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAzKSByZXR1cm4gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0IC0geVxyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcm90WSAocGFyZW50OiBEZXNrdG9wLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAwKSByZXR1cm4geVxyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMSkgcmV0dXJuIHBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoIC0geFxyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMikgcmV0dXJuIHBhcmVudC5jYW52YXNDdHguY2FudmFzLmhlaWdodCAtIHlcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDMpIHJldHVybiB4XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJvdFggKHBhcmVudDogRGVza3RvcCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMCkgcmV0dXJuIHhcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDEpIHJldHVybiB4XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAyKSByZXR1cm4geCAtIHBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoXHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAzKSByZXR1cm4geCAtIHBhcmVudC5jYW52YXNDdHguY2FudmFzLmhlaWdodFxyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcblxyXG4gIHN0YXRpYyByb3RZIChwYXJlbnQ6IERlc2t0b3AsIHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDApIHJldHVybiB5XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAxKSByZXR1cm4geSAtIHBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoXHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAyKSByZXR1cm4geSAtIHBhcmVudC5jYW52YXNDdHguY2FudmFzLmhlaWdodFxyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMykgcmV0dXJuIHlcclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0Um90YXRpb24gKHBhcmVudDogRGVza3RvcCwgeDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICB3aGlsZSAoeCA8IDApIHsgeCArPSA0IH1cclxuICAgIGNvbnN0IG5ld3JvdGF0aW9uOiBhbnkgPSB4ICUgNFxyXG4gICAgLy8gY29uc29sZS5sb2coJ2hhcmQtcm90OiAnICsgbmV3cm90YXRpb24pO1xyXG5cclxuICAgIGlmIChwYXJlbnQuaG9sZGluZykgeyBwYXJlbnQucm90YXRpb24gPSBuZXdyb3RhdGlvbjsgcmV0dXJuIGZhbHNlIH1cclxuXHJcbiAgICBpZiAobmV3cm90YXRpb24gPT09IHBhcmVudC5yb3RhdGlvbikgcmV0dXJuIHRydWVcclxuICAgIGxldCBydyA9IHBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoXHJcbiAgICBsZXQgcmggPSBwYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHRcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDEgfHwgcGFyZW50LnJvdGF0aW9uID09PSAzKSB7IHJ3ID0gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0OyByaCA9IHBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoIH1cclxuXHJcbiAgICAvLyBDb3B5IHRoZSBjYW52YXMsIHB1dCBpdCBiYWNrIGluIHRoZSBjb3JyZWN0IGRpcmVjdGlvblxyXG4gICAgaWYgKHBhcmVudC50Y2FudmFzID09IG51bGwpIHBhcmVudC50Y2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcclxuICAgIGNvbnN0IHRjYW52YXNjdHg6IGFueSA9IHBhcmVudC50Y2FudmFzLmdldENvbnRleHQoJzJkJylcclxuICAgIHRjYW52YXNjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApXHJcbiAgICB0Y2FudmFzY3R4LmNhbnZhcy53aWR0aCA9IHJ3XHJcbiAgICB0Y2FudmFzY3R4LmNhbnZhcy5oZWlnaHQgPSByaFxyXG4gICAgdGNhbnZhc2N0eC5yb3RhdGUoKHBhcmVudC5yb3RhdGlvbiAqIC05MCkgKiBNYXRoLlBJIC8gMTgwKVxyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMCkgdGNhbnZhc2N0eC5kcmF3SW1hZ2UocGFyZW50LmNhbnZhc0N0eC5jYW52YXMsIDAsIDApXHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAxKSB0Y2FudmFzY3R4LmRyYXdJbWFnZShwYXJlbnQuY2FudmFzQ3R4LmNhbnZhcywgLXBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoLCAwKVxyXG4gICAgaWYgKHBhcmVudC5yb3RhdGlvbiA9PT0gMikgdGNhbnZhc2N0eC5kcmF3SW1hZ2UocGFyZW50LmNhbnZhc0N0eC5jYW52YXMsIC1wYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy53aWR0aCwgLXBhcmVudC5jYW52YXNDdHguY2FudmFzLmhlaWdodClcclxuICAgIGlmIChwYXJlbnQucm90YXRpb24gPT09IDMpIHRjYW52YXNjdHguZHJhd0ltYWdlKHBhcmVudC5jYW52YXNDdHguY2FudmFzLCAwLCAtcGFyZW50LmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0KVxyXG5cclxuICAgIC8vIENoYW5nZSB0aGUgc2l6ZSBhbmQgb3JpZW50YXRpb24gYW5kIGNvcHkgdGhlIGNhbnZhcyBiYWNrIGludG8gdGhlIHJvdGF0aW9uXHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAwIHx8IHBhcmVudC5yb3RhdGlvbiA9PT0gMikgeyBwYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHQgPSBydzsgcGFyZW50LmNhbnZhc0N0eC5jYW52YXMud2lkdGggPSByaCB9XHJcbiAgICBpZiAocGFyZW50LnJvdGF0aW9uID09PSAxIHx8IHBhcmVudC5yb3RhdGlvbiA9PT0gMykgeyBwYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHQgPSByaDsgcGFyZW50LmNhbnZhc0N0eC5jYW52YXMud2lkdGggPSBydyB9XHJcbiAgICBwYXJlbnQuY2FudmFzQ3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKVxyXG4gICAgcGFyZW50LmNhbnZhc0N0eC5yb3RhdGUoKG5ld3JvdGF0aW9uICogOTApICogTWF0aC5QSSAvIDE4MClcclxuICAgIHBhcmVudC5yb3RhdGlvbiA9IG5ld3JvdGF0aW9uXHJcbiAgICBwYXJlbnQuY2FudmFzQ3R4LmRyYXdJbWFnZShwYXJlbnQudGNhbnZhcywgSW1hZ2VIZWxwZXIucm90WChwYXJlbnQsIDAsIDApLCBJbWFnZUhlbHBlci5yb3RZKHBhcmVudCwgMCwgMCkpXHJcblxyXG4gICAgcGFyZW50LndpZHRoID0gcGFyZW50LmNhbnZhc0N0eC5jYW52YXMud2lkdGhcclxuICAgIHBhcmVudC5oZWlnaHQgPSBwYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHRcclxuICAgIGlmIChwYXJlbnQub25TY3JlZW5SZXNpemUgIT0gbnVsbCkgcGFyZW50Lm9uU2NyZWVuUmVzaXplKHBhcmVudC53aWR0aCwgcGFyZW50LmhlaWdodCwgcGFyZW50LmNhbnZhc0lkKVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmaXhDb2xvciAoYzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAoYyA+IDEyNykgPyAoYyArIDMyKSA6IGNcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW50ZXJmYWNlIElMb2dnZXIge1xyXG4gIGRlYnVnOiAobG9nOiBzdHJpbmcpID0+IHZvaWRcclxuICBpbmZvOiAobG9nOiBzdHJpbmcpID0+IHZvaWRcclxuICBlcnJvcjogKGxvZzogc3RyaW5nKSA9PiB2b2lkXHJcbiAgd2FybjogKGxvZzogc3RyaW5nKSA9PiB2b2lkXHJcbiAgdmVyYm9zZTogKGxvZzogc3RyaW5nKSA9PiB2b2lkXHJcbn1cclxuZW51bSBMb2dMZXZlbCB7XHJcbiAgVkVSQk9TRSA9IDUsXHJcbiAgSU5GTyA9IDQsXHJcbiAgREVCVUcgPSAzLFxyXG4gIFdBUk5JTkcgPSAyLFxyXG4gIEVSUk9SID0gMVxyXG59XHJcbmV4cG9ydCB7IElMb2dnZXIsIExvZ0xldmVsIH1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuXHJcbmNvbnN0IFN0eWxlZEJhciA9IFN0eWxlZC5kaXZgXHJcbmRpc3BsYXk6IGJsb2NrO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxuYm90dG9tOiAwO1xyXG5sZWZ0OiA0MCU7XHJcbmJhY2tncm91bmQ6ICR7KHsgdHlwZSB9KSA9PiBnZXRDb2xvcnModHlwZSl9O1xyXG5ib3JkZXI6ICR7KHsgdHlwZSB9KSA9PiBgMXB4IHNvbGlkICR7Z2V0Q29sb3JzKHR5cGUpfWB9O1xyXG5tYXJnaW46IDEwcHg7XHJcbnBhZGRpbmc6IDEwcHg7cG9zaXRpb246IGFic29sdXRlO1xyXG5jb2xvcjogI2ZmZjsgXHJcbmZvbnQtd2VpZ2h0OjUwMDtcclxuei1pbmRleDoxO1xyXG5gXHJcblxyXG5jb25zdCBnZXRDb2xvcnMgPSAodHlwZSk6IHN0cmluZyA9PiB0eXBlID09PSAnc3VjY2VzcycgPyAnIzRjYWY1MCcgOiB0eXBlID09PSAnd2FybmluZycgPyAnI2ZmOTgwMCcgOiB0eXBlID09PSAnZXJyb3InID8gJyNmNDQzMzYnIDogJyMwMDAwMDAnXHJcblxyXG5jb25zdCBTbmFja0JhciA9ICh7IG1lc3NhZ2UsIHR5cGUgfSk6IGFueSA9PiA8U3R5bGVkQmFyIHR5cGU9e3R5cGV9PnttZXNzYWdlfTwvU3R5bGVkQmFyPlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU25hY2tCYXJcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBEZXNrdG9wIH0gZnJvbSAnLi4vRGVza3RvcCdcclxuaW1wb3J0IHsgVHlwZUNvbnZlcnRlciB9IGZyb20gJy4uL0NvbnZlcnRlcidcclxuaW1wb3J0IHsgSUNvbW11bmljYXRvciB9IGZyb20gJy4uL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi9VdGlsaXR5TWV0aG9kcydcclxuZXhwb3J0IGNsYXNzIENvbW1zSGVscGVyIHtcclxuICBzdGF0aWMgc2VuZFJlZnJlc2ggKHBhcmVudDogRGVza3RvcCwgY29tbTogSUNvbW11bmljYXRvcik6IHZvaWQge1xyXG4gICAgaWYgKHBhcmVudC5ob2xkaW5nKSByZXR1cm5cclxuXHJcbiAgICBpZiAocGFyZW50LmZvY3VzTW9kZSA+IDApIHtcclxuICAgICAgLy8gUmVxdWVzdCBvbmx5IHBpeGVscyBhcm91bmQgdGhlIGxhc3QgbW91c2UgcG9zaXRpb25cclxuICAgICAgY29uc3QgZGYgPSBwYXJlbnQuZm9jdXNNb2RlICogMlxyXG4gICAgICBjb21tLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgzLCAxKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKE1hdGgubWF4KE1hdGgubWluKHBhcmVudC5vbGRNb3VzZVgsIHBhcmVudC5sYXN0TW91c2VYKSAtIHBhcmVudC5mb2N1c01vZGUsIDApKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKE1hdGgubWF4KE1hdGgubWluKHBhcmVudC5vbGRNb3VzZVksIHBhcmVudC5sYXN0TW91c2VZKSAtIHBhcmVudC5mb2N1c01vZGUsIDApKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKGRmICsgTWF0aC5hYnMocGFyZW50Lm9sZE1vdXNlWCAtIHBhcmVudC5sYXN0TW91c2VYKSkgK1xyXG4gICAgICAgIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0cihkZiArIE1hdGguYWJzKHBhcmVudC5vbGRNb3VzZVkgLSBwYXJlbnQubGFzdE1vdXNlWSkpKSAvLyBGcmFtZWJ1ZmZlclVwZGF0ZVJlcXVlc3RcclxuICAgICAgcGFyZW50Lm9sZE1vdXNlWCA9IHBhcmVudC5sYXN0TW91c2VYXHJcbiAgICAgIHBhcmVudC5vbGRNb3VzZVkgPSBwYXJlbnQubGFzdE1vdXNlWVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gUmVxdWVzdCB0aGUgZW50aXJlIHNjcmVlblxyXG4gICAgICBjb21tLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgzLCAxLCAwLCAwLCAwLCAwKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKHBhcmVudC5yd2lkdGgpICtcclxuICAgICAgICBUeXBlQ29udmVydGVyLlNob3J0VG9TdHIocGFyZW50LnJoZWlnaHQpKSAvLyBGcmFtZWJ1ZmZlclVwZGF0ZVJlcXVlc3RcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZW5kS2V5IChjb21tOiBJQ29tbXVuaWNhdG9yLCBrOiBhbnksIGQ6IG51bWJlcik6IGFueSB7XHJcbiAgICBpZiAodHlwZW9mIGsgPT09ICdvYmplY3QnKSB7IGZvciAoY29uc3QgaSBpbiBrKSB7IENvbW1zSGVscGVyLnNlbmRLZXkoY29tbSwga1tpXVswXSwga1tpXVsxXSkgfSB9IGVsc2UgeyBjb21tLnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSg0LCBkLCAwLCAwKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHIoaykpIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZW5kS3ZtRGF0YSAocGFyZW50OiBEZXNrdG9wLCBjb21tOiBJQ29tbXVuaWNhdG9yLCB4OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKHBhcmVudC5vbkt2bURhdGFBY2sgIT09IHRydWUpIHtcclxuICAgICAgcGFyZW50Lm9uS3ZtRGF0YVBlbmRpbmcucHVzaCh4KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGlzVHJ1dGh5KHBhcmVudC51cmx2YXJzKSAmJiBpc1RydXRoeShwYXJlbnQudXJsdmFycy5rdm1kYXRhdHJhY2UpKSB7IGNvbnNvbGUubG9nKGBLVk0tU2VuZCgke1N0cmluZyh4Lmxlbmd0aCl9KTogJHtTdHJpbmcoeCl9YCkgfVxyXG4gICAgICB4ID0gJ1xcMEt2bURhdGFDaGFubmVsXFwwJyArIHhcclxuICAgICAgY29tbS5zZW5kKGAke1N0cmluZy5mcm9tQ2hhckNvZGUoNiwgMCwgMCwgMCl9JHtUeXBlQ29udmVydGVyLkludFRvU3RyKHgubGVuZ3RoKX0ke1N0cmluZyh4KX1gKVxyXG4gICAgICBwYXJlbnQub25Ldm1EYXRhQWNrID0gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZW5kS2VlcEFsaXZlIChwYXJlbnQ6IERlc2t0b3AsIGNvbW06IElDb21tdW5pY2F0b3IpOiBhbnkge1xyXG4gICAgaWYgKHBhcmVudC5sYXN0S2VlcEFsaXZlIDwgRGF0ZS5ub3coKSAtIDUwMDApIHtcclxuICAgICAgcGFyZW50Lmxhc3RLZWVwQWxpdmUgPSBEYXRlLm5vdygpXHJcbiAgICAgIGNvbW0uc2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDYsIDAsIDAsIDApICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0cigxNikgKyAnXFwwS3ZtRGF0YUNoYW5uZWxcXDAnKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNlbmRDdHJsQWx0RGVsTXNnIChjb21tOiBJQ29tbXVuaWNhdG9yKTogYW55IHtcclxuICAgIENvbW1zSGVscGVyLnNlbmRDYWQoY29tbSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZW5kQ2FkIChjb21tOiBJQ29tbXVuaWNhdG9yKTogYW55IHtcclxuICAgIENvbW1zSGVscGVyLnNlbmRLZXkoY29tbSwgMHhGRkUzLCAxKSAvLyBDb250cm9sXHJcbiAgICBDb21tc0hlbHBlci5zZW5kS2V5KGNvbW0sIDB4RkZFOSwgMSkgLy8gQWx0XHJcbiAgICBDb21tc0hlbHBlci5zZW5kS2V5KGNvbW0sIDB4RkZGRiwgMSkgLy8gRGVsZXRlXHJcbiAgICBDb21tc0hlbHBlci5zZW5kS2V5KGNvbW0sIDB4RkZGRiwgMCkgLy8gRGVsZXRlXHJcbiAgICBDb21tc0hlbHBlci5zZW5kS2V5KGNvbW0sIDB4RkZFOSwgMCkgLy8gQWx0XHJcbiAgICBDb21tc0hlbHBlci5zZW5kS2V5KGNvbW0sIDB4RkZFMywgMCkgLy8gQ29udHJvbFxyXG4gIH1cclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBEb21haW5Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XHJcbiAgZGF0YToge31cclxufSlcclxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlclByb3BzIHtcclxuICBkYXRhOiBhbnlcclxufVxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvdmlkZXJQcm9wcywge30+IHtcclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8RG9tYWluQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBkYXRhOiB0aGlzLnByb3BzLmRhdGEgfX0+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgIDwvRG9tYWluQ29udGV4dC5Qcm92aWRlcj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb25zdW1lciA9ICh7IGNoaWxkcmVuIH0pOiBKU1guRWxlbWVudCA9PiB7XHJcbiAgcmV0dXJuIDxEb21haW5Db250ZXh0LkNvbnN1bWVyID5cclxuICAgIHtjaGlsZHJlbn1cclxuICA8L0RvbWFpbkNvbnRleHQuQ29uc3VtZXI+XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnLi9Db252ZXJ0ZXInXHJcbmltcG9ydCB7IElDb21tdW5pY2F0b3IgfSBmcm9tICcuL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCBtZDUgZnJvbSAnbWQ1J1xyXG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSAnLi9JTG9nZ2VyJ1xyXG5pbXBvcnQgeyBpc1RydXRoeSB9IGZyb20gJy4vVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzJ1xyXG4vKipcclxuICogUHJvdG9jb2wgZm9yIGRpZmZlcmVudCBSZWRpciBwcm90b2NvbHMuIFNPTD0xLEtWTT0yLElERVI9VVNCLVJcclxuICovXHJcbmV4cG9ydCBlbnVtIFByb3RvY29sIHtcclxuICBTT0wgPSAxLFxyXG4gIEtWTSA9IDIsXHJcbiAgSURFUiA9IDNcclxufVxyXG4vKipcclxuICogQU1UUmVkaXJlY3RvciBwcm92aWRlcyBhbGwgY29tbXVuaWNhdGlvbiBvdmVyIFdlYlNvY2tldHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBTVRSZWRpcmVjdG9yIGltcGxlbWVudHMgSUNvbW11bmljYXRvciB7XHJcbiAgc3RhdGU6IG51bWJlclxyXG4gIHNvY2tldDogYW55XHJcbiAgaG9zdDogc3RyaW5nXHJcbiAgcG9ydDogbnVtYmVyXHJcbiAgdXNlcjogc3RyaW5nXHJcbiAgcGFzczogc3RyaW5nXHJcbiAgdGxzOiBudW1iZXJcclxuICBhdXRoVXJpOiBzdHJpbmdcclxuICB0bHN2MW9ubHk6IG51bWJlclxyXG4gIGNvbm5lY3RTdGF0ZTogbnVtYmVyXHJcbiAgcHJvdG9jb2w6IFByb3RvY29sXHJcbiAgYW10QWNjdW11bGF0b3I6IHN0cmluZ1xyXG4gIGFtdFNlcXVlbmNlOiBudW1iZXJcclxuICBhbXRLZWVwQWxpdmVUaW1lcjogYW55XHJcblxyXG4gIGZpbGVSZWFkZXI6IEZpbGVSZWFkZXJcclxuICBmaWxlUmVhZGVySW5Vc2U6IGJvb2xlYW5cclxuICBmaWxlUmVhZGVyQWNjOiBhbnlbXVxyXG4gIHJhbmRvbU5vbmNlQ2hhcnM6IHN0cmluZ1xyXG4gIFJlZGlyZWN0U3RhcnRTb2w6IHN0cmluZ1xyXG4gIFJlZGlyZWN0U3RhcnRLdm06IHN0cmluZ1xyXG4gIFJlZGlyZWN0U3RhcnRJZGVyOiBzdHJpbmdcclxuICB1cmx2YXJzOiBhbnlcclxuICBpbkRhdGFDb3VudDogbnVtYmVyXHJcbiAgc2VydmVyOiBhbnlcclxuICBsb2dnZXI6IElMb2dnZXJcclxuICBvblByb2Nlc3NEYXRhOiAoZGF0YTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgb25TdGFydDogKCkgPT4gdm9pZFxyXG4gIG9uTmV3U3RhdGU6IChzdGF0ZTogbnVtYmVyKSA9PiB2b2lkXHJcbiAgb25TdGF0ZUNoYW5nZWQ6IChyZWRpcmVjdG9yOiBhbnksIHN0YXRlOiBudW1iZXIpID0+IHZvaWRcclxuICBvbkVycm9yOiAoKSA9PiB2b2lkXHJcblxyXG4gIGNvbnN0cnVjdG9yIChsb2dnZXI6IElMb2dnZXIsIHByb3RvY29sOiBudW1iZXIsIGZyOiBGaWxlUmVhZGVyLCBob3N0OiBzdHJpbmcsIHBvcnQ6IG51bWJlciwgdXNlcjogc3RyaW5nLCBwYXNzOiBzdHJpbmcsIHRsczogbnVtYmVyLCB0bHMxb25seTogbnVtYmVyLCBzZXJ2ZXI/OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuZmlsZVJlYWRlciA9IGZyXHJcbiAgICB0aGlzLnJhbmRvbU5vbmNlQ2hhcnMgPSAnYWJjZGVmMDEyMzQ1Njc4OSdcclxuICAgIHRoaXMuaG9zdCA9IGhvc3RcclxuICAgIHRoaXMucG9ydCA9IHBvcnRcclxuICAgIHRoaXMudXNlciA9IHVzZXJcclxuICAgIHRoaXMucGFzcyA9IHBhc3NcclxuICAgIHRoaXMudGxzID0gdGxzXHJcbiAgICB0aGlzLnRsc3Yxb25seSA9IHRsczFvbmx5XHJcbiAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2xcclxuICAgIHRoaXMuUmVkaXJlY3RTdGFydFNvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHg1MywgMHg0RiwgMHg0QywgMHgyMClcclxuICAgIHRoaXMuUmVkaXJlY3RTdGFydEt2bSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMCwgMHgwMSwgMHgwMCwgMHgwMCwgMHg0YiwgMHg1NiwgMHg0ZCwgMHg1MilcclxuICAgIHRoaXMuUmVkaXJlY3RTdGFydElkZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDksIDB4NDQsIDB4NDUsIDB4NTIpXHJcbiAgICB0aGlzLnVybHZhcnMgPSB7fVxyXG4gICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXJcclxuICAgIHRoaXMuYW10QWNjdW11bGF0b3IgPSAnJ1xyXG4gICAgdGhpcy5hdXRoVXJpID0gJydcclxuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIFdlYlNvY2tldCBwYXRoIHRvIGNvbm5lY3QgdG8gdXNpbmcgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbiAgICogVXNlcyBob3N0KGRldmljZWlkKSwgcG9ydCwgdGxzLCB0bHN2MW9ubHksIHVzZXIsIHBhc3Mgb3B0aW9ucyB0byBidWlsZCB0aGUgdXJsLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0V3NMb2NhdGlvbiAoKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLmlzQnJvd3NlcigpICYmICFpc1RydXRoeSh0aGlzLnNlcnZlcikpIHtcclxuICAgICAgcmV0dXJuIGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKCdodHRwJywgJ3dzJyl9Ly9cclxuICAgICAgJHt3aW5kb3cubG9jYXRpb24uaG9zdH1cclxuICAgICAgJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDAsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5sYXN0SW5kZXhPZignLycpKX1cclxuICAgICAgL3dlYnJlbGF5LmFzaHg/cD0yJmhvc3Q9JHt0aGlzLmhvc3R9JnBvcnQ9JHt0aGlzLnBvcnR9JnRscz0ke3RoaXMudGxzfSR7KCh0aGlzLnVzZXIgPT09ICcqJykgPyAnJnNlcnZlcmF1dGg9MScgOiAnJyl9JHsoKHR5cGVvZiB0aGlzLnBhc3MgPT09ICd1bmRlZmluZWQnKSA/ICgnJnNlcnZlcmF1dGg9MSZ1c2VyPScgKyB0aGlzLnVzZXIpIDogJycpfSZ0bHMxb25seT0ke3RoaXMudGxzdjFvbmx5fWBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBgd3NzOi8vJHtTdHJpbmcodGhpcy5zZXJ2ZXIpfS93ZWJyZWxheS5hc2h4P3A9MiZob3N0PSR7dGhpcy5ob3N0fSZwb3J0PSR7dGhpcy5wb3J0fSZ0bHM9JHt0aGlzLnRsc30keygodGhpcy51c2VyID09PSAnKicpID8gJyZzZXJ2ZXJhdXRoPTEnIDogJycpfSR7KCh0eXBlb2YgdGhpcy5wYXNzID09PSAndW5kZWZpbmVkJykgPyAoJyZzZXJ2ZXJhdXRoPTEmdXNlcj0nICsgdGhpcy51c2VyKSA6ICcnKX0mdGxzMW9ubHk9JHt0aGlzLnRsc3Yxb25seX1gXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBjdXJyZW50IGVudmlyb25tZW50IGlzIGJyb3dzZXIgb3IgdGVzdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNCcm93c2VyICgpOiBib29sZWFuIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGlzV2ViID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBpZiAoaXNXZWIpIHRoaXMubG9nZ2VyLmRlYnVnKCchISEhIUJST1dTRVIhISEhIScpXHJcbiAgICAgIHJldHVybiBpc1dlYlxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldHMgV3MgTG9jYXRpb24gYW5kIHN0YXJ0cyBhIHdlYnNvY2tldCBmb3IgbGlzdGVuaW5nXHJcbiAgICogQHBhcmFtIGMgaXMgYmFzZSB0eXBlIGZvciBXZWJTb2NrZXRcclxuICAgKi9cclxuICBzdGFydDxUPiAoYzogbmV3KHBhdGg6IHN0cmluZykgPT4gVCk6IGFueSB7IC8vIFVzaW5nIHRoaXMgZ2VuZXJpYyBzaWduYXR1cmUgYWxsb3dzIHVzIHRvIHBhc3MgdGhlIFdlYlNvY2tldCB0eXBlIGZyb20gdW5pdCB0ZXN0cyBvciBpbiBwcm9kdWNpb24gZnJvbSBhIHdlYiBicm93c2VyXHJcbiAgICB0aGlzLmNvbm5lY3RTdGF0ZSA9IDBcclxuICAgIC8vIGxldCB3cyA9IG5ldyBjKHRoaXMuZ2V0V3NMb2NhdGlvbigpKSAvLyB1c2luZyBjcmVhdGUgZnVuY3Rpb24gYyBpbnZva2VzIHRoZSBjb25zdHJ1Y3RvciBXZWJTb2NrZXQoKVxyXG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgYyh0aGlzLmdldFdzTG9jYXRpb24oKSkgLy8gVGhlIFwicD0yXCIgaW5kaWNhdGVzIHRvIHRoZSByZWxheSB0aGF0IHRoaXMgaXMgYSBSRURJUkVDVElPTiBzZXNzaW9uXHJcbiAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSB0aGlzLm9uU29ja2V0Q29ubmVjdGVkLmJpbmQodGhpcylcclxuICAgIHRoaXMuc29ja2V0Lm9ubWVzc2FnZSA9IHRoaXMub25NZXNzYWdlLmJpbmQodGhpcylcclxuICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSB0aGlzLm9uU29ja2V0Q2xvc2VkLmJpbmQodGhpcylcclxuICAgIGNvbnN0IG9ubG9hZCA9IChlOiBhbnkpOiBhbnkgPT4ge1xyXG4gICAgICB0aGlzLm9uU29ja2V0RGF0YShlLnRhcmdldC5yZXN1bHQpXHJcbiAgICAgIGlmICh0aGlzLmZpbGVSZWFkZXJBY2MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5maWxlUmVhZGVySW5Vc2UgPSBmYWxzZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcobmV3IEJsb2IoW3RoaXMuZmlsZVJlYWRlckFjYy5zaGlmdCgpXSkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IG9ubG9hZGVuZCA9IChlOiBhbnkpOiBhbnkgPT4ge1xyXG4gICAgICB0aGlzLm9uU29ja2V0RGF0YShlLnRhcmdldC5yZXN1bHQpXHJcbiAgICAgIGlmICh0aGlzLmZpbGVSZWFkZXJBY2MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5maWxlUmVhZGVySW5Vc2UgPSBmYWxzZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcih0aGlzLmZpbGVSZWFkZXJBY2Muc2hpZnQoKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlzVHJ1dGh5KHRoaXMuZmlsZVJlYWRlcikgJiYgaXNUcnV0aHkodGhpcy5maWxlUmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZykpIHtcclxuICAgIC8vIENocm9tZSAmIEZpcmVmb3ggKERyYWZ0KVxyXG4gICAgICB0aGlzLmZpbGVSZWFkZXIub25sb2FkID0gb25sb2FkLmJpbmQodGhpcylcclxuICAgIH0gZWxzZSBpZiAoaXNUcnV0aHkodGhpcy5maWxlUmVhZGVyKSAmJiBpc1RydXRoeSh0aGlzLmZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIpKSB7XHJcbiAgICAvLyBDaHJvbWUgJiBGaXJlZm94IChTcGVjKVxyXG4gICAgICB0aGlzLmZpbGVSZWFkZXIub25sb2FkZW5kID0gb25sb2FkZW5kLmJpbmQodGhpcylcclxuICAgIH1cclxuICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ0Nvbm5lY3RpbmcgdG8gd2Vic29ja2V0JylcclxuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgxKVxyXG4gIH1cclxuXHJcbiAgb25Tb2NrZXRDb25uZWN0ZWQgKCk6IGFueSB7XHJcbiAgICBpZiAoaXNUcnV0aHkodGhpcy51cmx2YXJzKSAmJiBpc1RydXRoeSh0aGlzLnVybHZhcnMucmVkaXJ0cmFjZSkpIGNvbnNvbGUubG9nKCdSRURJUi1DT05ORUNUJylcclxuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgyKVxyXG4gICAgdGhpcy5sb2dnZXIudmVyYm9zZShgQ29ubmVjdGVkIHRvIHdlYnNvY2tldCBzZXJ2ZXIuIFdpdGggcHJvdG9jb2wgJHt0aGlzLnByb3RvY29sfSAoMiA9IEtWTSlgKVxyXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgU3RhcnQgUmVkaXJlY3QgU2Vzc2lvbiBmb3IgcHJvdG9jb2wuICR7dGhpcy5wcm90b2NvbH1gKVxyXG4gICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLlNPTCkgdGhpcy5zb2NrZXRTZW5kKHRoaXMuUmVkaXJlY3RTdGFydFNvbCkgLy8gVE9ETzogUHV0IHRoZXNlIHN0cmluZ3MgaW4gaGlnaGVyIGxldmVsIG1vZHVsZSB0byB0aWdodGVuIGNvZGVcclxuICAgIGlmICh0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5LVk0pIHRoaXMuc29ja2V0U2VuZCh0aGlzLlJlZGlyZWN0U3RhcnRLdm0pIC8vIERvbid0IG5lZWQgdGhlc2UgaXMgdGhlIGZlYXR1cmUgaXMgbm90IGNvbXBpbGVkLWluLlxyXG4gICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLklERVIpIHRoaXMuc29ja2V0U2VuZCh0aGlzLlJlZGlyZWN0U3RhcnRJZGVyKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgbmV3IGRhdGEgb24gdGhlIHdlYnNvY2tldFxyXG4gICAqIEBwYXJhbSBlIGRhdGEgcmVjZWl2ZWQgb3ZlciB0aGUgd2Vic29ja2V0XHJcbiAgICovXHJcbiAgb25NZXNzYWdlIChlOiBhbnkpOiBhbnkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gY29uc29sZS5sb2coZS5kYXRhKVxyXG4gICAgICB0aGlzLmluRGF0YUNvdW50KytcclxuICAgICAgaWYgKHR5cGVvZiBlLmRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVJlYWRlckluVXNlKSB7XHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXJBY2MucHVzaChlLmRhdGEpXHJcbiAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcgIT0gbnVsbCkge1xyXG4gICAgICAgICAgLy8gQ2hyb21lICYgRmlyZWZveCAoRHJhZnQpXHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXJJblVzZSA9IHRydWVcclxuICAgICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcobmV3IEJsb2IoW2UuZGF0YV0pKVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyICE9IG51bGwpIHtcclxuICAgICAgICAgIC8vIENocm9tZSAmIEZpcmVmb3ggKFNwZWMpXHJcbiAgICAgICAgICB0aGlzLmZpbGVSZWFkZXJJblVzZSA9IHRydWVcclxuICAgICAgICAgIHRoaXMuZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihlLmRhdGEpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIElFMTAsIHJlYWRBc0JpbmFyeVN0cmluZyBkb2VzIG5vdCBleGlzdCwgdXNlIGFuIGFsdGVybmF0aXZlLlxyXG4gICAgICAgICAgbGV0IGJpbmFyeSA9ICcnOyBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YSk7IGNvbnN0IGxlbmd0aCA9IGJ5dGVzLmJ5dGVMZW5ndGhcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pIH1cclxuICAgICAgICAgIHRoaXMub25Tb2NrZXREYXRhKGJpbmFyeSlcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gSWYgd2UgZ2V0IGEgc3RyaW5nIG9iamVjdCwgaXQgbWF5YmUgdGhlIFdlYlJUQyBjb25maXJtLiBJZ25vcmUgaXQuXHJcbiAgICAgICAgLy8gdGhpcy5kZWJ1ZyhcIk1lc2hEYXRhQ2hhbm5lbCAtIE9uRGF0YSAtIFwiICsgdHlwZW9mIGUuZGF0YSArIFwiIC0gXCIgKyBlLmRhdGEubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLm9uU29ja2V0RGF0YShlLmRhdGEpXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKVxyXG4gICAgICB0aGlzLnN0b3AoKVxyXG4gICAgICB0aGlzLm9uRXJyb3IoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIGZyb20gb25NZXNzYWdlXHJcbiAgICogQHBhcmFtIGRhdGEgZGF0YSBvdmVyIHRoZSB3aXJlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBvblNvY2tldERhdGEgKGRhdGE6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoIWlzVHJ1dGh5KGRhdGEpIHx8IHRoaXMuY29ubmVjdFN0YXRlID09PSAtMSkgcmV0dXJuXHJcblxyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAvLyBUaGlzIGlzIGFuIEFycmF5QnVmZmVyLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nIGFycmF5ICh1c2VkIGluIElFKVxyXG4gICAgICBsZXQgYmluYXJ5ID0gJydcclxuICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShkYXRhKVxyXG4gICAgICBjb25zdCBsZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pIH1cclxuICAgICAgZGF0YSA9IGJpbmFyeVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIH1cclxuXHJcbiAgICBpZiAoKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLktWTSB8fCB0aGlzLnByb3RvY29sID09PSBQcm90b2NvbC5JREVSKSAmJiB0aGlzLmNvbm5lY3RTdGF0ZSA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5vblByb2Nlc3NEYXRhKGRhdGEpXHJcbiAgICB9IC8vIEtWTSB0cmFmZmljLCBmb3J3YXJkIGl0IGRpcmVjdGx5LlxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdiZWZvcmU6ICcsIHRoaXMuYW10QWNjdW11bGF0b3IpXHJcbiAgICB0aGlzLmFtdEFjY3VtdWxhdG9yICs9IGRhdGFcclxuICAgIC8vIGNvbnNvbGUubG9nKCdhZnRlcjogJywgdGhpcy5hbXRBY2N1bXVsYXRvcilcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiUkVESVItUkVDVihcIiArIHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoICsgXCIpOiBcIiArIFR5cGVDb252ZXJ0ZXIucnN0cjJoZXgodGhpcy5hbXRBY2N1bXVsYXRvcikpO1xyXG4gICAgd2hpbGUgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoID49IDEpIHtcclxuICAgICAgbGV0IGNtZHNpemUgPSAwXHJcbiAgICAgIHN3aXRjaCAodGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDApKSB7XHJcbiAgICAgICAgY2FzZSAweDExOiB7IC8vIFN0YXJ0UmVkaXJlY3Rpb25TZXNzaW9uUmVwbHkgKDE3KVxyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShgU3RhcnQgUmVkaXJlY3Rpb24gU2Vzc2lvbiByZXBseSByZWNlaXZlZCBmb3IgICR7dGhpcy5wcm90b2NvbH1gKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgNCkgcmV0dXJuXHJcbiAgICAgICAgICBjb25zdCBzdGF0dXNjb2RlID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDEpXHJcbiAgICAgICAgICBzd2l0Y2ggKHN0YXR1c2NvZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAwOiB7IC8vIFNUQVRVU19TVUNDRVNTXHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnU2Vzc2lvbiBzdGF0dXMgc3VjY2Vzcy4gU3RhcnQgaGFuZHNoYWtlJylcclxuICAgICAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCAxMykgcmV0dXJuXHJcbiAgICAgICAgICAgICAgY29uc3Qgb2VtbGVuID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDEyKVxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDEzICsgb2VtbGVuKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgICAgLy8gUXVlcnkgZm9yIGF2YWlsYWJsZSBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ1F1ZXJ5IGZvciBhdmFpbGFibGUgYXV0aGVudGljYXRpb24nKVxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDApKSAvLyBRdWVyeSBhdXRoZW50aWNhdGlvbiBzdXBwb3J0XHJcbiAgICAgICAgICAgICAgY21kc2l6ZSA9ICgxMyArIG9lbWxlbilcclxuICAgICAgICAgICAgICBicmVhayB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWsgfVxyXG4gICAgICAgIGNhc2UgMHgxNDogeyAvLyBBdXRoZW50aWNhdGVTZXNzaW9uUmVwbHkgKDIwKVxyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnQXZhaWxhYmxlIEF1dGhlbnRpY2F0aW9ucyByZXBseSByZWNlaXZlZC4nKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgOSkgcmV0dXJuXHJcbiAgICAgICAgICBjb25zdCBhdXRoRGF0YUxlbiA9IFR5cGVDb252ZXJ0ZXIuUmVhZEludFgodGhpcy5hbXRBY2N1bXVsYXRvciwgNSlcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDkgKyBhdXRoRGF0YUxlbikgcmV0dXJuXHJcbiAgICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoMSlcclxuICAgICAgICAgIGNvbnN0IGF1dGhUeXBlID0gdGhpcy5hbXRBY2N1bXVsYXRvci5jaGFyQ29kZUF0KDQpXHJcbiAgICAgICAgICBjb25zdCBhdXRoRGF0YTogYW55ID0gW11cclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXV0aERhdGFMZW47IGkrKykgeyBhdXRoRGF0YS5wdXNoKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg5ICsgaSkpIH1cclxuICAgICAgICAgIGNvbnN0IGF1dGhEYXRhQnVmID0gdGhpcy5hbXRBY2N1bXVsYXRvci5zdWJzdHJpbmcoOSwgOSArIGF1dGhEYXRhTGVuKVxyXG4gICAgICAgICAgY21kc2l6ZSA9IDkgKyBhdXRoRGF0YUxlblxyXG5cclxuICAgICAgICAgIGlmIChhdXRoVHlwZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBRdWVyeVxyXG4gICAgICAgICAgICBpZiAoaXNUcnV0aHkoYXV0aERhdGEuaW5jbHVkZXMoNCkpKSB7XHJcbiAgICAgICAgICAgICAgLy8gR29vZCBEaWdlc3QgQXV0aCAoV2l0aCBjbm9uY2UgYW5kIGFsbClcclxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdHb29kIERpZ2VzdCBBdXRoIChXaXRoIGNub25jZSBhbmQgYWxsKScpXHJcbiAgICAgICAgICAgICAgdGhpcy5zb2NrZXRTZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNCkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCh0aGlzLnVzZXIubGVuZ3RoICsgdGhpcy5hdXRoVXJpLmxlbmd0aCArIDgpICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnVzZXIubGVuZ3RoKSArIHRoaXMudXNlciArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuYXV0aFVyaS5sZW5ndGgpICsgdGhpcy5hdXRoVXJpICsgU3RyaW5nLmZyb21DaGFyQ29kZSgweDAwLCAweDAwLCAweDAwLCAweDAwKSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RydXRoeShhdXRoRGF0YS5pbmNsdWRlcygzKSkpIHtcclxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdCYWQgRGlnZXN0IEF1dGgnKVxyXG4gICAgICAgICAgICAgIC8vIEJhZCBEaWdlc3QgQXV0aCAoTm90IHN1cmUgd2h5IHRoaXMgaXMgc3VwcG9ydGVkLCBjbm9uY2UgaXMgbm90IHVzZWQhKVxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDMpICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy51c2VyLmxlbmd0aCArIHRoaXMuYXV0aFVyaS5sZW5ndGggKyA3KSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy51c2VyLmxlbmd0aCkgKyB0aGlzLnVzZXIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MDAsIDB4MDApICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmF1dGhVcmkubGVuZ3RoKSArIHRoaXMuYXV0aFVyaSArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCwgMHgwMCkpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUcnV0aHkoYXV0aERhdGEuaW5jbHVkZXMoMSkpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnQmFzaWMgQXV0aCcpXHJcbiAgICAgICAgICAgICAgLy8gQmFzaWMgQXV0aCAoUHJvYmFibHkgYSBnb29kIGlkZWEgdG8gbm90IHN1cHBvcnQgdGhpcyB1bmxlc3MgdGhpcyBpcyBhbiBvbGQgdmVyc2lvbiBvZiBJbnRlbCBBTVQpXHJcbiAgICAgICAgICAgICAgdGhpcy5zb2NrZXRTZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxMywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyWCh0aGlzLnVzZXIubGVuZ3RoICsgdGhpcy5wYXNzLmxlbmd0aCArIDIpICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnVzZXIubGVuZ3RoKSArIHRoaXMudXNlciArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5wYXNzLmxlbmd0aCkgKyB0aGlzLnBhc3MpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0F1dGggVHlwZSBub3QgcmVjb2duaXplZC4gU3RvcHBpbmcuJylcclxuICAgICAgICAgICAgICB0aGlzLnN0b3AoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKChhdXRoVHlwZSA9PT0gMyB8fCBhdXRoVHlwZSA9PT0gNCkgJiYgc3RhdHVzID09PSAxKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJwdHIgPSAwXHJcblxyXG4gICAgICAgICAgICAvLyBSZWFsbVxyXG4gICAgICAgICAgICBjb25zdCByZWFsbWxlbiA9IGF1dGhEYXRhQnVmLmNoYXJDb2RlQXQoY3VycHRyKVxyXG4gICAgICAgICAgICBjb25zdCByZWFsbSA9IGF1dGhEYXRhQnVmLnN1YnN0cmluZyhjdXJwdHIgKyAxLCBjdXJwdHIgKyAxICsgcmVhbG1sZW4pXHJcbiAgICAgICAgICAgIGN1cnB0ciArPSAocmVhbG1sZW4gKyAxKVxyXG5cclxuICAgICAgICAgICAgLy8gTm9uY2VcclxuICAgICAgICAgICAgY29uc3Qgbm9uY2VsZW4gPSBhdXRoRGF0YUJ1Zi5jaGFyQ29kZUF0KGN1cnB0cilcclxuICAgICAgICAgICAgY29uc3Qgbm9uY2UgPSBhdXRoRGF0YUJ1Zi5zdWJzdHJpbmcoY3VycHRyICsgMSwgY3VycHRyICsgMSArIG5vbmNlbGVuKVxyXG4gICAgICAgICAgICBjdXJwdHIgKz0gKG5vbmNlbGVuICsgMSlcclxuXHJcbiAgICAgICAgICAgIC8vIFFPUFxyXG4gICAgICAgICAgICBsZXQgcW9wbGVuID0gMFxyXG4gICAgICAgICAgICBsZXQgcW9wOiBhbnkgPSBudWxsXHJcbiAgICAgICAgICAgIGNvbnN0IGNub25jZTogc3RyaW5nID0gdGhpcy5nZW5lcmF0ZVJhbmRvbU5vbmNlKDMyKVxyXG4gICAgICAgICAgICBjb25zdCBzbmMgPSAnMDAwMDAwMDInXHJcbiAgICAgICAgICAgIGxldCBleHRyYSA9ICcnXHJcbiAgICAgICAgICAgIGlmIChhdXRoVHlwZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgIHFvcGxlbiA9IGF1dGhEYXRhQnVmLmNoYXJDb2RlQXQoY3VycHRyKVxyXG4gICAgICAgICAgICAgIHFvcCA9IGF1dGhEYXRhQnVmLnN1YnN0cmluZyhjdXJwdHIgKyAxLCBjdXJwdHIgKyAxICsgcW9wbGVuKVxyXG4gICAgICAgICAgICAgIGN1cnB0ciArPSAocW9wbGVuICsgMSlcclxuICAgICAgICAgICAgICBleHRyYSA9IGAke3NuY306JHtjbm9uY2V9OiR7U3RyaW5nKHFvcCl9IDpgXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpZ2VzdCA9IHRoaXMuaGV4X21kNSh0aGlzLmhleF9tZDUodGhpcy51c2VyICsgJzonICsgcmVhbG0gKyAnOicgKyB0aGlzLnBhc3MpICsgJzonICsgbm9uY2UgKyAnOicgKyBleHRyYSArIHRoaXMuaGV4X21kNSgnUE9TVDonICsgdGhpcy5hdXRoVXJpKSlcclxuICAgICAgICAgICAgbGV0IHRvdGFsbGVuOiBudW1iZXIgPSB0aGlzLnVzZXIubGVuZ3RoICsgcmVhbG0ubGVuZ3RoICsgbm9uY2UubGVuZ3RoICsgdGhpcy5hdXRoVXJpLmxlbmd0aCArIGNub25jZS5sZW5ndGggKyBzbmMubGVuZ3RoICsgZGlnZXN0Lmxlbmd0aCArIDdcclxuICAgICAgICAgICAgaWYgKGF1dGhUeXBlID09PSA0KSB0b3RhbGxlbiArPSAocGFyc2VJbnQocW9wLmxlbmd0aCkgKyAxKVxyXG4gICAgICAgICAgICBsZXQgYnVmOiBhbnkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTMsIDB4MDAsIDB4MDAsIDB4MDAsIGF1dGhUeXBlKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRvdGFsbGVuKSArIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy51c2VyLmxlbmd0aCkgKyB0aGlzLnVzZXIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlYWxtLmxlbmd0aCkgKyByZWFsbSArIFN0cmluZy5mcm9tQ2hhckNvZGUobm9uY2UubGVuZ3RoKSArIG5vbmNlICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmF1dGhVcmkubGVuZ3RoKSArIHRoaXMuYXV0aFVyaSArIFN0cmluZy5mcm9tQ2hhckNvZGUoY25vbmNlLmxlbmd0aCkgKyBjbm9uY2UgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHNuYy5sZW5ndGgpICsgc25jICsgU3RyaW5nLmZyb21DaGFyQ29kZShkaWdlc3QubGVuZ3RoKSArIGRpZ2VzdFxyXG4gICAgICAgICAgICBpZiAoYXV0aFR5cGUgPT09IDQpIGJ1ZiArPSAoU3RyaW5nLmZyb21DaGFyQ29kZShxb3AubGVuZ3RoKSArIHFvcClcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXRTZW5kKGJ1ZilcclxuICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMCkgeyAvLyBTdWNjZXNzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvY29sID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgLy8gU2VyaWFsLW92ZXItTEFOOiBTZW5kIEludGVsIEFNVCBzZXJpYWwgc2V0dGluZ3MuLi5cclxuICAgICAgICAgICAgICBjb25zdCBNYXhUeEJ1ZmZlciA9IDEwMDAwXHJcbiAgICAgICAgICAgICAgY29uc3QgVHhUaW1lb3V0ID0gMTAwXHJcbiAgICAgICAgICAgICAgY29uc3QgVHhPdmVyZmxvd1RpbWVvdXQgPSAwXHJcbiAgICAgICAgICAgICAgY29uc3QgUnhUaW1lb3V0ID0gMTAwMDBcclxuICAgICAgICAgICAgICBjb25zdCBSeEZsdXNoVGltZW91dCA9IDEwMFxyXG4gICAgICAgICAgICAgIGNvbnN0IEhlYXJ0YmVhdCA9IDAvLyA1MDAwO1xyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjAsIDB4MDAsIDB4MDAsIDB4MDApICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy5hbXRTZXF1ZW5jZSsrKSArIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoTWF4VHhCdWZmZXIpICtcclxuICAgICAgICAgICAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChUeFRpbWVvdXQpICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChUeE92ZXJmbG93VGltZW91dCkgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHJYKFJ4VGltZW91dCkgK1xyXG4gICAgICAgICAgICAgICAgICBUeXBlQ29udmVydGVyLlNob3J0VG9TdHJYKFJ4Rmx1c2hUaW1lb3V0KSArIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0clgoSGVhcnRiZWF0KSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvY29sID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgLy8gUmVtb3RlIERlc2t0b3A6IFNlbmQgdHJhZmZpYyBkaXJlY3RseS4uLlxyXG4gICAgICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvY29sID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgLy8gUmVtb3RlIElERVI6IFNlbmQgdHJhZmZpYyBkaXJlY3RseS4uLlxyXG4gICAgICAgICAgICAgIHRoaXMuY29ubmVjdFN0YXRlID0gMVxyXG4gICAgICAgICAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgdGhpcy5zdG9wKClcclxuICAgICAgICAgIGJyZWFrIH1cclxuICAgICAgICBjYXNlIDB4MjE6IHsgLy8gUmVzcG9uc2UgdG8gc2V0dGluZ3MgKDMzKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMjMpIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdSZXNwb25zZSB0byBzZXR0aW5ncycpXHJcbiAgICAgICAgICBjbWRzaXplID0gMjNcclxuICAgICAgICAgIHRoaXMuc29ja2V0U2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjcsIDB4MDAsIDB4MDAsIDB4MDApICsgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy5hbXRTZXF1ZW5jZSsrKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCwgMHgwMCwgMHgxQiwgMHgwMCwgMHgwMCwgMHgwMCkpXHJcbiAgICAgICAgICBpZiAodGhpcy5wcm90b2NvbCA9PT0gMSkgeyB0aGlzLmFtdEtlZXBBbGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5zZW5kQW10S2VlcEFsaXZlLmJpbmQodGhpcyksIDIwMDApIH1cclxuICAgICAgICAgIHRoaXMuY29ubmVjdFN0YXRlID0gMVxyXG4gICAgICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKDMpXHJcbiAgICAgICAgICBicmVhayB9XHJcbiAgICAgICAgY2FzZSAweDI5OiAvLyBTZXJpYWwgU2V0dGluZ3MgKDQxKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMTApIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdTZXJpYWwgU2V0dGluZ3MnKVxyXG4gICAgICAgICAgY21kc2l6ZSA9IDEwXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIGNhc2UgMHgyQTogeyAvLyBJbmNvbWluZyBkaXNwbGF5IGRhdGEgKDQyKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgMTApIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdJbmNvbWluZyBkaXNwbGF5IGRhdGEnKVxyXG4gICAgICAgICAgY29uc3QgY3MgPSAoMTAgKyAoKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg5KSAmIDB4RkYpIDw8IDgpICsgKHRoaXMuYW10QWNjdW11bGF0b3IuY2hhckNvZGVBdCg4KSAmIDB4RkYpKVxyXG4gICAgICAgICAgaWYgKHRoaXMuYW10QWNjdW11bGF0b3IubGVuZ3RoIDwgY3MpIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLm9uUHJvY2Vzc0RhdGEodGhpcy5hbXRBY2N1bXVsYXRvci5zdWJzdHJpbmcoMTAsIGNzKSlcclxuICAgICAgICAgIGNtZHNpemUgPSBjc1xyXG4gICAgICAgICAgYnJlYWsgfVxyXG4gICAgICAgIGNhc2UgMHgyQjogLy8gS2VlcCBhbGl2ZSBtZXNzYWdlICg0MylcclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA8IDgpIGJyZWFrXHJcbiAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdLZWVwIEFsdmUgbWVzc2FnZScpXHJcbiAgICAgICAgICBjbWRzaXplID0gOFxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlIDB4NDE6XHJcbiAgICAgICAgICBpZiAodGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGggPCA4KSBicmVha1xyXG4gICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnS1ZNIHRyYWZmaWMuIENhbGwgb25TdGFydCBoYW5kbGVyLiBBbmQgZm9yd2FyZCByZXN0IG9mIGFjYyBkaXJlY3RseS4nKVxyXG4gICAgICAgICAgdGhpcy5jb25uZWN0U3RhdGUgPSAxXHJcbiAgICAgICAgICB0aGlzLm9uU3RhcnQoKVxyXG4gICAgICAgICAgLy8gS1ZNIHRyYWZmaWMsIGZvcndhcmQgcmVzdCBvZiBhY2N1bXVsYXRvciBkaXJlY3RseS5cclxuICAgICAgICAgIGlmICh0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aCA+IDgpIHsgdGhpcy5vblByb2Nlc3NEYXRhKHRoaXMuYW10QWNjdW11bGF0b3Iuc3Vic3RyaW5nKDgpKSB9XHJcbiAgICAgICAgICBjbWRzaXplID0gdGhpcy5hbXRBY2N1bXVsYXRvci5sZW5ndGhcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBVbmtub3duIEludGVsIEFNVCBjb21tYW5kOiAgJHt0aGlzLmFtdEFjY3VtdWxhdG9yLmNoYXJDb2RlQXQoMCl9ICBhY2NsZW49JHt0aGlzLmFtdEFjY3VtdWxhdG9yLmxlbmd0aH1gKVxyXG4gICAgICAgICAgdGhpcy5zdG9wKClcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIGlmIChjbWRzaXplID09PSAwKSByZXR1cm5cclxuICAgICAgdGhpcy5hbXRBY2N1bXVsYXRvciA9IHRoaXMuYW10QWNjdW11bGF0b3Iuc3Vic3RyaW5nKGNtZHNpemUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoZXhfbWQ1IChzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB0aGlzLmxvZ2dlci52ZXJib3NlKCdNRDUgdGhlIHN0cmluZycpXHJcbiAgICByZXR1cm4gbWQ1KHN0cilcclxuICB9XHJcblxyXG4gIHNvY2tldFNlbmQgKGRhdGE6IHN0cmluZyk6IGFueSB7IC8vIHh4U2VuZFxyXG4gICAgaWYgKGlzVHJ1dGh5KHRoaXMudXJsdmFycykgJiYgaXNUcnV0aHkodGhpcy51cmx2YXJzLnJlZGlydHJhY2UpKSB7IHRoaXMubG9nZ2VyLnZlcmJvc2UoYFJFRElSLVNFTkQoJHtkYXRhLmxlbmd0aH0pOiAke1R5cGVDb252ZXJ0ZXIucnN0cjJoZXgoZGF0YSl9YCkgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICh0aGlzLnNvY2tldCAhPSBudWxsICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IDEpIHsgLy8gMSA9IFdlYlNvY2tldC5PUEVOXHJcbiAgICAgICAgY29uc3QgYiA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYFJlZGlyIFNlbmQoICR7ZGF0YS5sZW5ndGh9KTogJHtUeXBlQ29udmVydGVyLnJzdHIyaGV4KGRhdGEpfWApXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7IGJbaV0gPSBkYXRhLmNoYXJDb2RlQXQoaSkgfVxyXG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQoYi5idWZmZXIpXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBTb2NrZXQgc2VuZCBlcnJvcjogJHtTdHJpbmcoZXJyb3IpfWApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZW5kIHNlbmRzIGRhdGEgb3ZlciB0aGUgd2Vic29ja2V0IHRvIHRoZSBzZXJ2ZXIuXHJcbiAgICogQHBhcmFtIGRhdGEgZGF0YSB0byBzZW5kIHRvIHNlcnZlclxyXG4gICAqL1xyXG4gIHNlbmQgKGRhdGE6IHN0cmluZyk6IGFueSB7IC8vIHNlbmRcclxuICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoJ1NlbmQgY2FsbGVkICcgKyBkYXRhKVxyXG4gICAgaWYgKHRoaXMuc29ja2V0ID09IG51bGwgfHwgdGhpcy5jb25uZWN0U3RhdGUgIT09IDEpIHJldHVyblxyXG4gICAgaWYgKHRoaXMucHJvdG9jb2wgPT09IFByb3RvY29sLlNPTCkge1xyXG4gICAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDI4LCAweDAwLCAweDAwLCAweDAwKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5JbnRUb1N0clgodGhpcy5hbXRTZXF1ZW5jZSsrKSArXHJcbiAgICAgICAgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyWChkYXRhLmxlbmd0aCkgK1xyXG4gICAgICAgIGRhdGEpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNvY2tldFNlbmQoZGF0YSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlbmRBbXRLZWVwQWxpdmUgKCk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5zb2NrZXQgPT0gbnVsbCkgcmV0dXJuXHJcbiAgICB0aGlzLnNvY2tldFNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDJCLCAweDAwLCAweDAwLCAweDAwKSArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHJYKHRoaXMuYW10U2VxdWVuY2UrKykpXHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZVJhbmRvbU5vbmNlIChsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgcjogc3RyaW5nID0gJydcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsgciArPSB0aGlzLnJhbmRvbU5vbmNlQ2hhcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMucmFuZG9tTm9uY2VDaGFycy5sZW5ndGgpKSB9XHJcbiAgICByZXR1cm4gclxyXG4gIH1cclxuXHJcbiAgb25Tb2NrZXRDbG9zZWQgKGU6IEV2ZW50KTogYW55IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGUpXHJcbiAgICBpZiAoaXNUcnV0aHkodGhpcy51cmx2YXJzKSAmJiBpc1RydXRoeSh0aGlzLnVybHZhcnMucmVkaXJ0cmFjZSkpIHsgY29uc29sZS5sb2coJ1JFRElSLUNMT1NFRCcpIH1cclxuICAgIHRoaXMubG9nZ2VyLndhcm4oJ1JlZGlyIFNvY2tldCBDbG9zZWQnKVxyXG4gICAgdGhpcy5zdG9wKClcclxuICB9XHJcblxyXG4gIG9uU3RhdGVDaGFuZ2UgKG5ld3N0YXRlOiBudW1iZXIpOiBhbnkge1xyXG4gICAgY29uc29sZS5pbmZvKCdvbnN0YXRlY2hhbmdlJywgbmV3c3RhdGUpXHJcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gbmV3c3RhdGUpIHJldHVyblxyXG4gICAgdGhpcy5zdGF0ZSA9IG5ld3N0YXRlXHJcbiAgICB0aGlzLm9uTmV3U3RhdGUodGhpcy5zdGF0ZSlcclxuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2VkICE9IG51bGwpIHRoaXMub25TdGF0ZUNoYW5nZWQodGhpcywgdGhpcy5zdGF0ZSlcclxuICB9XHJcblxyXG4gIHN0b3AgKCk6IHZvaWQge1xyXG4gICAgdGhpcy5sb2dnZXIud2FybignU3RvcCBjYWxsZWQgb24gUmVkaXJlY3Rvci4gQ2hhbmdlIHN0YXRlIHRvIDAgYW5kIGNsb3NlIFNvY2tldC4nKVxyXG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlKDApXHJcbiAgICB0aGlzLmNvbm5lY3RTdGF0ZSA9IC0xXHJcbiAgICB0aGlzLmFtdEFjY3VtdWxhdG9yID0gJydcclxuICAgIGlmICh0aGlzLnNvY2tldCAhPSBudWxsKSB7IHRoaXMuc29ja2V0LmNsb3NlKCk7IHRoaXMuc29ja2V0ID0gbnVsbCB9XHJcbiAgICBpZiAodGhpcy5hbXRLZWVwQWxpdmVUaW1lciAhPSBudWxsKSB7IGNsZWFySW50ZXJ2YWwodGhpcy5hbXRLZWVwQWxpdmVUaW1lcik7IHRoaXMuYW10S2VlcEFsaXZlVGltZXIgPSBudWxsIH1cclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBpc0ZhbHN5LCBwcmVwYXJlSGVhZGVycyB9IGZyb20gJy4uL3NoYXJlZC9VdGlsaXRpZXMnXHJcblxyXG5leHBvcnQgY2xhc3MgSHR0cENsaWVudCB7XHJcbiAgc3RhdGljIGFzeW5jIGdldCAodXJsLCBhcGlLZXksIG9wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zdCBqc29uSGVhZGVycyA9IHByZXBhcmVIZWFkZXJzKGFwaUtleSlcclxuICAgIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LmZldGNoKHVybCwge1xyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBwb3N0ICh1cmwsIGJvZHkgPSB7fSwgYXBpS2V5PywgaXNNcHM/LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXksIGlzTXBzKVxyXG4gICAgaWYgKGlzRmFsc3koaXNNcHMpKSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LmZldGNoKHVybCwge1xyXG4gICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IEh0dHBDbGllbnQuZmV0Y2hSUFModXJsLCB7XHJcbiAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgIGhlYWRlcnM6IGpzb25IZWFkZXJzXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgZGVsZXRlICh1cmwsIGFwaUtleT8sIG9wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zdCBqc29uSGVhZGVycyA9IHByZXBhcmVIZWFkZXJzKGFwaUtleSlcclxuICAgIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LmZldGNoUlBTKHVybCwge1xyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBwYXRjaCAodXJsLCBib2R5ID0ge30sIGFwaUtleT8sIG9wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zdCBqc29uSGVhZGVycyA9IHByZXBhcmVIZWFkZXJzKGFwaUtleSlcclxuICAgIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LmZldGNoUlBTKHVybCwge1xyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgIGhlYWRlcnM6IGpzb25IZWFkZXJzXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGZldGNoICh1cmwsIG9wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAob3B0aW9ucyBhcyBhbnkpLm1vZGUgPSAnY29ycyc7XHJcbiAgICAob3B0aW9ucyBhcyBhbnkpLmNyZWRlbnRpYWxzID0gJ2luY2x1ZGUnO1xyXG4gICAgKG9wdGlvbnMgYXMgYW55KS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXHJcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKGFzeW5jIHJlc3VsdCA9PiBhd2FpdCByZXN1bHQuanNvbigpKVxyXG4gIH1cclxuXHJcbiAgLy8gSGFuZGxlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGFzIHRleHRcclxuICBzdGF0aWMgYXN5bmMgZmV0Y2hSUFMgKHVybCwgb3B0aW9ucyA9IHt9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpLnRoZW4oYXN5bmMgKHJlc3VsdCkgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcclxuICAgICAgICBkYXRhOiByZXN1bHQuc3RhdHVzID09PSAyMDQgPyBudWxsIDogYXdhaXQgcmVzdWx0Lmpzb24oKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJpMThuZXh0XCIpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJy4vSHR0cENsaWVudCdcclxuXHJcbmV4cG9ydCBjb25zdCBwb3dlckFjdGlvbnMgPSBhc3luYyAoZ3VpZCwgYWN0aW9uLCBtcHNTZXJ2ZXI6IHN0cmluZyB8IG51bGwsIGFwaUtleSwgdXNlU09MPzogYm9vbGVhbik6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcclxuICAgIGFwaWtleTogJ3h4eHh4JyxcclxuICAgIG1ldGhvZDogJ1Bvd2VyQWN0aW9uJyxcclxuICAgIHBheWxvYWQ6IGlzRmFsc3kodXNlU09MKSA/IHsgZ3VpZCwgYWN0aW9uLCB1c2VTT0wgfSA6IHsgZ3VpZCwgYWN0aW9uIH1cclxuICB9KVxyXG4gIGNvbnN0IHNlcnZlcjogc3RyaW5nID0gbXBzU2VydmVyICE9IG51bGwgPyBtcHNTZXJ2ZXIgOiAnJ1xyXG4gIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LnBvc3QoYGh0dHBzOi8vJHtzZXJ2ZXJ9L2FtdGAsIGJvZHksIGFwaUtleSwgdHJ1ZSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBvd2VyU3RhdGUgPSBhc3luYyAoZ3VpZCwgbXBzU2VydmVyOiBzdHJpbmcgfCBudWxsLCBhcGlLZXkpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICBhcGlrZXk6ICd4eHh4eCcsXHJcbiAgICBtZXRob2Q6ICdQb3dlclN0YXRlJyxcclxuICAgIHBheWxvYWQ6IHsgZ3VpZCB9XHJcbiAgfSlcclxuICBjb25zdCBzZXJ2ZXI6IHN0cmluZyA9IG1wc1NlcnZlciAhPSBudWxsID8gbXBzU2VydmVyIDogJydcclxuICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5wb3N0KGBodHRwczovLyR7c2VydmVyfS9hbXRgLCBib2R5LCBhcGlLZXksIHRydWUpXHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmV4cG9ydCBjb25zdCBhdmFpbGFibGVQb3dlckFjdGlvbnMgPSBbXHJcbiAgeyB2YWx1ZTogJzInLCBsYWJlbDogJ1Bvd2VyIFVwJyB9LFxyXG4gIHsgdmFsdWU6ICcxMDEnLCBsYWJlbDogJ1Jlc2V0IFRvIEJJT1MnIH0sXHJcbiAgeyB2YWx1ZTogJzQnLCBsYWJlbDogJ1NsZWVwJyB9LFxyXG4gIHsgdmFsdWU6ICc1JywgbGFiZWw6ICdQb3dlciBDeWNsZScgfSxcclxuICB7IHZhbHVlOiAnNycsIGxhYmVsOiAnSGliZXJuYXRlJyB9LFxyXG4gIHsgdmFsdWU6ICc4JywgbGFiZWw6ICdQb3dlciBEb3duJyB9LFxyXG4gIHsgdmFsdWU6ICcxMCcsIGxhYmVsOiAnUmVzZXQnIH0sXHJcbiAgeyB2YWx1ZTogJzEyJywgbGFiZWw6ICdTb2Z0LU9mZicgfSxcclxuICB7IHZhbHVlOiAnMTQnLCBsYWJlbDogJ1NvZnQgUmVzZXQnIH0sXHJcbiAgeyB2YWx1ZTogJzEwMCcsIGxhYmVsOiAnUG93ZXIgVXAgVG8gQklPUycgfSxcclxuICB7IHZhbHVlOiAnNDAwJywgbGFiZWw6ICdSZXNldCBUbyBQWEUnIH0sXHJcbiAgeyB2YWx1ZTogJzQwMScsIGxhYmVsOiAnUG93ZXIgVXAgVG8gUFhFJyB9XHJcbl1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBY3Rpb25CeUlkID0gKGFjdGlvbik6IGFueSA9PiBhY3Rpb24gPT09IDIgPyAnUG93ZXIgVXAnIDogYWN0aW9uID09PSA4ID8gJ1Bvd2VyIE9mZicgOiBhY3Rpb24gPT09IDUgPyAnUG93ZXIgQ3ljbGUnIDogYWN0aW9uID09PSAxMCA/ICdSZXNldCcgOiBhY3Rpb24gPT09IDEyID8gJ1NvZnQgT2ZmJyA6IGFjdGlvbiA9PT0gMTQgPyAnU29mdCBSZXNldCcgOiBhY3Rpb24gPT09IDQgPyAnU2xlZXAnIDogYWN0aW9uID09PSA3ID8gJ0hpYmVybmF0ZScgOiBhY3Rpb24gPT09IDEwMCA/ICdQb3dlciBVcCBUbyBCSU9TJyA6IGFjdGlvbiA9PT0gMTAxID8gJ1Jlc2V0IFRvIEJJT1MnIDogbnVsbFxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCB7IElMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnLi9JTG9nZ2VyJ1xyXG5cclxuLyoqXHJcbiAqIENvbnNvbGVMb2dnZXIgaW1wbGVtZW50cyBJTG9nZ2VyIHRvIHByb3ZpZGUgYmFzaWMgY29uc29sZSBsb2dnaW5nIGZ1bmN0aW9uYWxpdHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29uc29sZUxvZ2dlciBpbXBsZW1lbnRzIElMb2dnZXIge1xyXG4gIG1pbkxldmVsOiBMb2dMZXZlbFxyXG4gIGNvbnN0cnVjdG9yIChsZXZlbDogTG9nTGV2ZWwpIHtcclxuICAgIHRoaXMubWluTGV2ZWwgPSBsZXZlbFxyXG4gIH1cclxuXHJcbiAgbG9nIChsZXZlbDogTG9nTGV2ZWwsIGRhdGE6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgc3dpdGNoIChsZXZlbCkge1xyXG4gICAgICBjYXNlIExvZ0xldmVsLlZFUkJPU0U6XHJcbiAgICAgICAgdGhpcy52ZXJib3NlKGRhdGEpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxyXG4gICAgICAgIHRoaXMuaW5mbyhkYXRhKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XHJcbiAgICAgICAgdGhpcy5kZWJ1ZyhkYXRhKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgTG9nTGV2ZWwuV0FSTklORzpcclxuICAgICAgICB0aGlzLndhcm4oZGF0YSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxyXG4gICAgICAgIHRoaXMuZXJyb3IoZGF0YSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZWJ1ZyAobG9nOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm1pbkxldmVsID49IExvZ0xldmVsLkRFQlVHKSBjb25zb2xlLmRlYnVnKGxvZylcclxuICB9XHJcblxyXG4gIGluZm8gKGxvZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5taW5MZXZlbCA+PSBMb2dMZXZlbC5JTkZPKSBjb25zb2xlLmluZm8obG9nKVxyXG4gIH1cclxuXHJcbiAgZXJyb3IgKGxvZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5taW5MZXZlbCA+PSBMb2dMZXZlbC5FUlJPUikgY29uc29sZS5lcnJvcihsb2cpXHJcbiAgfVxyXG5cclxuICB3YXJuIChsb2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubWluTGV2ZWwgPj0gTG9nTGV2ZWwuV0FSTklORykgY29uc29sZS53YXJuKGxvZylcclxuICB9XHJcblxyXG4gIHZlcmJvc2UgKGxvZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5taW5MZXZlbCA+PSBMb2dMZXZlbC5WRVJCT1NFKSBjb25zb2xlLmxvZyhsb2cpXHJcbiAgfVxyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1kNVwiKTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sYWJlbC10ZXh0e21hcmdpbi1sZWZ0OjhweH0uZ3JleS1sYWJlbHtvcGFjaXR5Oi41fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvc2hhcmVkL2FtdGZlYXR1cmVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBTUMsWUFDSSxlQUhTLENBTWIsWUFDSSxVQU5NXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXHJcXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMjBcXHJcXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxcclxcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcclxcbiAkbWFyZ2luTGVmdDogOHB4O1xcclxcbiAkb3BhY2l0eTogMC41O1xcclxcbiAubGFiZWwtdGV4dCB7XFxyXFxuICAgICBtYXJnaW4tbGVmdDogJG1hcmdpbkxlZnQ7XFxyXFxuIH1cXHJcXG5cXHJcXG4gLmdyZXktbGFiZWwge1xcclxcbiAgICAgb3BhY2l0eTogJG9wYWNpdHk7XFxyXFxuIH1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgSUNvbW11bmljYXRvciB9IGZyb20gJy4uL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCB7IElTdGF0ZVByb2Nlc3NvciB9IGZyb20gJy4uL0lTdGF0ZVByb2Nlc3NvcidcclxuaW1wb3J0IHsgVHlwZUNvbnZlcnRlciB9IGZyb20gJy4uL0NvbnZlcnRlcidcclxuaW1wb3J0IHsgRGVza3RvcCB9IGZyb20gJy4uL0Rlc2t0b3AnXHJcbmltcG9ydCB7IElSTEVEZWNvZGVyIH0gZnJvbSAnLi4vSVJMRURlY29kZXInXHJcbmltcG9ydCB7IEltYWdlSGVscGVyIH0gZnJvbSAnLi4vVXRpbGl0aWVzL0ltYWdlSGVscGVyJ1xyXG5pbXBvcnQgeyBDb21tc0hlbHBlciB9IGZyb20gJy4uL1V0aWxpdGllcy9Db21tc0hlbHBlcidcclxuaW1wb3J0IHsgaXNUcnV0aHkgfSBmcm9tICcuLi9VdGlsaXRpZXMvVXRpbGl0eU1ldGhvZHMnXHJcblxyXG4vKipcclxuICogSGFuZGxlIGVuY29kZWQgUkZCIHBhY2tldHMuIFN1cHBvcnRlZCBlbmNvZGluZ3MsIFJBVywgWlJMRS5cclxuICovXHJcblxyXG5jbGFzcyBFbmNvZGluZyBpbXBsZW1lbnRzIElTdGF0ZVByb2Nlc3NvciB7XHJcbiAgd3NTb2NrZXQ6IElDb21tdW5pY2F0b3JcclxuICBuZXh0OiBJU3RhdGVQcm9jZXNzb3JcclxuXHJcbiAgcGFyZW50OiBEZXNrdG9wXHJcbiAgcmxlRGVjb2RlcjogSVJMRURlY29kZXJcclxuICB1cGRhdGVSRkJTdGF0ZTogYW55XHJcbiAgY29uc3RydWN0b3IgKGNvbW06IElDb21tdW5pY2F0b3IsIHBhcmVudDogRGVza3RvcCwgcmxlRGVjb2RlcjogSVJMRURlY29kZXIsIHVwZGF0ZVJGQlN0YXRlOiAoc3RhdGU6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgdGhpcy53c1NvY2tldCA9IGNvbW1cclxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50XHJcbiAgICB0aGlzLnJsZURlY29kZXIgPSBybGVEZWNvZGVyXHJcbiAgICB0aGlzLnVwZGF0ZVJGQlN0YXRlID0gdXBkYXRlUkZCU3RhdGVcclxuICB9XHJcblxyXG4gIHByb2Nlc3NTdGF0ZSAoYWNjOiBzdHJpbmcpOiBudW1iZXIgeyAvLyBhY2MgaXMgdGhlIGFjY3VtdWxhdGVkIGJ5dGUgZW5jb2RlZCBzdHJpbmcgc28gZmFyXHJcbiAgICAvLyBjb25zb2xlLmxvZyhUeXBlQ29udmVydGVyLnJzdHIyaGV4KGFjYykpXHJcbiAgICBsZXQgY21kU2l6ZSA9IDBcclxuICAgIGlmIChhY2MubGVuZ3RoID49IDEyKSB7XHJcbiAgICAgIGNvbnN0IHggPSBUeXBlQ29udmVydGVyLlJlYWRTaG9ydChhY2MsIDApXHJcbiAgICAgIGNvbnN0IHkgPSBUeXBlQ29udmVydGVyLlJlYWRTaG9ydChhY2MsIDIpXHJcbiAgICAgIGNvbnN0IHdpZHRoID0gVHlwZUNvbnZlcnRlci5SZWFkU2hvcnQoYWNjLCA0KVxyXG4gICAgICBjb25zdCBoZWlnaHQgPSBUeXBlQ29udmVydGVyLlJlYWRTaG9ydChhY2MsIDYpXHJcbiAgICAgIGNvbnN0IHMgPSB3aWR0aCAqIGhlaWdodFxyXG4gICAgICBjb25zdCBlbmNvZGluZyA9IFR5cGVDb252ZXJ0ZXIuUmVhZEludChhY2MsIDgpXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHgsIHksIHdpZHRoLCBoZWlnaHQsIHMsIGVuY29kaW5nKVxyXG4gICAgICBpZiAoZW5jb2RpbmcgPCAxNykge1xyXG4gICAgICAgIGlmICh3aWR0aCA8IDEgfHwgd2lkdGggPiA2NCB8fCBoZWlnaHQgPCAxIHx8IGhlaWdodCA+IDY0KSB7XHJcbiAgICAgICAgICB0aGlzLnBhcmVudC5sb2dnZXIuZXJyb3IoYEludmFsaWQgdGlsZSBzaXplICgke3dpZHRofSwke2hlaWdodH0pLCBkaXNjb25uZWN0aW5nLmApXHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdGlsZSBzaXplJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgc3BhcmUgYml0bWFwIHRvIHRoZSByaWd0aCBzaXplIGlmIGl0J3Mgbm90IGFscmVhZHkuIFRoaXMgYWxsb3dzIHVzIHRvIHJlY3ljbGUgdGhlIHNwYXJlIG1vc3QgaWYgbm90IGFsbCB0aGUgdGltZS5cclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQuc3BhcmV3ICE9PSB3aWR0aCB8fCB0aGlzLnBhcmVudC5zcGFyZWggIT09IGhlaWdodCkge1xyXG4gICAgICAgICAgdGhpcy5wYXJlbnQuc3BhcmV3ID0gdGhpcy5wYXJlbnQuc3BhcmV3MiA9IHdpZHRoXHJcbiAgICAgICAgICB0aGlzLnBhcmVudC5zcGFyZWggPSB0aGlzLnBhcmVudC5zcGFyZWgyID0gaGVpZ2h0XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMucGFyZW50LnJvdGF0aW9uID09PSAxIHx8IHRoaXMucGFyZW50LnJvdGF0aW9uID09PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnNwYXJldzIgPSBoZWlnaHRcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuc3BhcmVoMiA9IHdpZHRoXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCB4c3BhY2VjYWNoZW5hbWUgPSBgJHt0aGlzLnBhcmVudC5zcGFyZXcyfXgke3RoaXMucGFyZW50LnNwYXJlaDJ9YFxyXG4gICAgICAgICAgdGhpcy5wYXJlbnQuc3BhcmUgPSB0aGlzLnBhcmVudC5zcGFyZWNhY2hlW3hzcGFjZWNhY2hlbmFtZV1cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucGFyZW50LnNwYXJlKVxyXG4gICAgICAgICAgaWYgKCFpc1RydXRoeSh0aGlzLnBhcmVudC5zcGFyZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuc3BhcmVjYWNoZVt4c3BhY2VjYWNoZW5hbWVdID0gdGhpcy5wYXJlbnQuc3BhcmUgPSB0aGlzLnBhcmVudC5jYW52YXNDdHguY3JlYXRlSW1hZ2VEYXRhKHRoaXMucGFyZW50LnNwYXJldzIsIHRoaXMucGFyZW50LnNwYXJlaDIpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBhcmVudC5zcGFyZWNhY2hlW3hzcGFjZWNhY2hlbmFtZV0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IDB4RkZGRkZGMjEpIHtcclxuICAgICAgICAvLyBEZXNrdG9wIFNpemUgKDB4RkZGRkZGMjEsIC0yMjMpXHJcbiAgICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoJ0Rlc2t0b3Agc2l6ZScpXHJcbiAgICAgICAgdGhpcy5wYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy53aWR0aCA9IHRoaXMucGFyZW50LlNjcmVlbldpZHRoID0gdGhpcy5wYXJlbnQucndpZHRoID0gdGhpcy5wYXJlbnQud2lkdGggPSB3aWR0aFxyXG4gICAgICAgIHRoaXMucGFyZW50LmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0ID0gdGhpcy5wYXJlbnQuU2NyZWVuSGVpZ2h0ID0gdGhpcy5wYXJlbnQucmhlaWdodCA9IHRoaXMucGFyZW50LmhlaWdodCA9IGhlaWdodFxyXG4gICAgICAgIHRoaXMud3NTb2NrZXQuc2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDMsIDAsIDAsIDAsIDAsIDApICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKHRoaXMucGFyZW50LndpZHRoKSArIFR5cGVDb252ZXJ0ZXIuU2hvcnRUb1N0cih0aGlzLnBhcmVudC5oZWlnaHQpKSAvLyBGcmFtZWJ1ZmZlclVwZGF0ZVJlcXVlc3RcclxuICAgICAgICBjbWRTaXplID0gMTJcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQub25TY3JlZW5TaXplQ2hhbmdlICE9IG51bGwpIHtcclxuICAgICAgICAgIHRoaXMucGFyZW50Lm9uU2NyZWVuU2l6ZUNoYW5nZSh0aGlzLnBhcmVudC5TY3JlZW5XaWR0aCwgdGhpcy5wYXJlbnQuU2NyZWVuSGVpZ2h0KVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLnBhcmVudC5EZWJ1ZyhcIk5ldyBkZXNrdG9wIHdpZHRoOiBcIiArIHRoaXMucGFyZW50LndpZHRoICsgXCIsIGhlaWdodDogXCIgKyB0aGlzLnBhcmVudC5oZWlnaHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGVuY29kaW5nID09PSAwKSB7XHJcbiAgICAgICAgLy8gUkFXIGVuY29kaW5nXHJcblxyXG4gICAgICAgIGxldCBwdHIgPSAxMjsgY29uc3QgY3MgPSAxMiArIChzICogdGhpcy5wYXJlbnQuYnBwKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdSQVcgZW5jb2RpbmcgJywgYWNjLmxlbmd0aCwgY3MpXHJcbiAgICAgICAgaWYgKGFjYy5sZW5ndGggPCBjcykgcmV0dXJuIDAgLy8gQ2hlY2sgd2UgaGF2ZSBhbGwgdGhlIGRhdGEgbmVlZGVkIGFuZCB3ZSBjYW4gb25seSBkcmF3IDY0eDY0IHRpbGVzLlxyXG4gICAgICAgIGNtZFNpemUgPSBjc1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdlbmNvZGluZyBjbWRTaXplJywgZW5jb2RpbmcsIHRoaXMuY21kU2l6ZSlcclxuXHJcbiAgICAgICAgLy8gQ1JJVElDQUwgTE9PUCwgb3B0aW1pemUgdGhpcyBhcyBtdWNoIGFzIHBvc3NpYmxlXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzOyBpKyspIHtcclxuICAgICAgICAgIEltYWdlSGVscGVyLnNldFBpeGVsKHRoaXMucGFyZW50LCBhY2MuY2hhckNvZGVBdChwdHIrKykgKyAoKHRoaXMucGFyZW50LmJwcCA9PT0gMikgPyAoYWNjLmNoYXJDb2RlQXQocHRyKyspIDw8IDgpIDogMCksIGkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIEltYWdlSGVscGVyLnB1dEltYWdlKHRoaXMucGFyZW50LCB4LCB5KVxyXG4gICAgICB9IGVsc2UgaWYgKGVuY29kaW5nID09PSAxNikge1xyXG4gICAgICAgIC8vIFpSTEUgZW5jb2RpbmdcclxuICAgICAgICBpZiAoYWNjLmxlbmd0aCA8IDE2KSByZXR1cm4gMFxyXG4gICAgICAgIGNvbnN0IGRhdGFsZW4gPSBUeXBlQ29udmVydGVyLlJlYWRJbnQoYWNjLCAxMilcclxuICAgICAgICBpZiAoYWNjLmxlbmd0aCA8ICgxNiArIGRhdGFsZW4pKSByZXR1cm4gMFxyXG4gICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJSRUNUIFpSTEUgKFwiICsgeCArIFwiLFwiICsgeSArIFwiLFwiICsgd2lkdGggKyBcIixcIiArIGhlaWdodCArIFwiKSBMRU4gPSBcIiArIGRhdGFsZW4pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJSRUNUIFpSTEUgTEVOOiBcIiArIFR5cGVDb252ZXJ0ZXIuUmVhZFNob3J0WChhY2MsIDE3KSArIFwiLCBEQVRBOiBcIiArIFR5cGVDb252ZXJ0ZXIucnN0cjJoZXgoYWNjLnN1YnN0cmluZygxNikpKTtcclxuXHJcbiAgICAgICAgLy8gUHJvY2VzcyB0aGUgWkxpYiBoZWFkZXIgaWYgdGhpcyBpcyB0aGUgZmlyc3QgYmxvY2tcclxuICAgICAgICBjb25zdCBwdHIgPSAxNjsgY29uc3QgZGVsdGEgPSA1OyBjb25zdCBkeCA9IDBcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhUeXBlQ29udmVydGVyLnJzdHIyaGV4KGFjYykpXHJcbiAgICAgICAgLy8gMDAwMDAwMDAwMDQwMDA0MDAwMDAwMDEwMDAwMDAwMEE3ODlDNjI2NDAwMDAwMDAwRkZGRjAwNDAwMDAwMDA0MDAwNDAwMDAwMDAxMDAwMDAwMDA4NjI2NDAwMDAwMDAwRkZGRlxyXG4gICAgICAgIGlmIChkYXRhbGVuID4gNSAmJiBhY2MuY2hhckNvZGVBdChwdHIpID09PSAwICYmIFR5cGVDb252ZXJ0ZXIuUmVhZFNob3J0WChhY2MsIHB0ciArIDEpID09PSAoZGF0YWxlbiAtIGRlbHRhKSkge1xyXG4gICAgICAgICAgLy8gVGhpcyBpcyBhbiB1bmNvbXByZXNzZWQgWkxpYiBkYXRhIGJsb2NrXHJcbiAgICAgICAgICB0aGlzLnJsZURlY29kZXIuRGVjb2RlKGFjYywgcHRyICsgNSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcywgZGF0YWxlbilcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gVGhpcyBpcyBjb21wcmVzc2VkIFpMaWIgZGF0YSwgZGVjb21wcmVzcyBhbmQgcHJvY2VzcyBpdC5cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhY2NsZW5ndGg9JyxhY2MubGVuZ3RoLCdwdHI9JyxwdHIsJ2RhdGFsZW49JyxkYXRhbGVuLCdkeD0nLGR4KVxyXG4gICAgICAgICAgY29uc3QgemxpYnN0cmluZyA9IGFjYy5zdWJzdHJpbmcocHRyLCBwdHIgKyBkYXRhbGVuIC0gZHgpXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh6bGlic3RyaW5nKVxyXG4gICAgICAgICAgY29uc3QgYXJyID0gdGhpcy5wYXJlbnQuaW5mbGF0ZS5pbmZsYXRlKHpsaWJzdHJpbmcpXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygndW56aXBwZWQgc3RyZWFtJywgYXJyKVxyXG4gICAgICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmxlRGVjb2Rlci5EZWNvZGUoYXJyLCAwLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzLCBhcnIubGVuZ3RoKVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLmVycm9yKCdJbnZhbGlkIGRlZmxhdGUgZGF0YS4nKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgZGVmbGF0ZSBkYXRhJylcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNtZFNpemUgPSAxNiArIGRhdGFsZW5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBhcmVudC5sb2dnZXIuZXJyb3IoYFVua25vd24gRW5jb2Rpbmc6ICR7ZW5jb2Rpbmd9ICwgSEVYOiAke1R5cGVDb252ZXJ0ZXIucnN0cjJoZXgoYWNjKX1gKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBFbmNvZGluZzogJHtlbmNvZGluZ31gKVxyXG4gICAgICB9XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzdGF0ZSAnLCB0aGlzLnBhcmVudC5zdGF0ZSwgJ2FjYyAnLCBhY2MubGVuZ3RoKVxyXG4gICAgICBpZiAoLS10aGlzLnBhcmVudC5zdGF0ZSA9PT0gMTAwKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLmRlYnVnKCdGcmFtZSBjb21wbGV0ZWQuIFVwZGF0ZSBzdGF0ZSBhbmQgcmVxdWVzdCBuZXcgZnJhbWUnKVxyXG4gICAgICAgIHRoaXMudXBkYXRlUkZCU3RhdGUoNClcclxuICAgICAgICBjb25zdCBzZW5kUmVmcmVzaENhbGxiYWNrID0gKCk6IGFueSA9PiBDb21tc0hlbHBlci5zZW5kUmVmcmVzaCh0aGlzLnBhcmVudCwgdGhpcy53c1NvY2tldClcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQuZnJhbWVSYXRlRGVsYXkgPT09IDApIHtcclxuICAgICAgICAgIENvbW1zSGVscGVyLnNlbmRSZWZyZXNoKHRoaXMucGFyZW50LCB0aGlzLndzU29ja2V0KSAvLyBBc2sgZm9yIG5ldyBmcmFtZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KHNlbmRSZWZyZXNoQ2FsbGJhY2ssIHRoaXMucGFyZW50LmZyYW1lUmF0ZURlbGF5KSAvLyBIb2xkIHggbWlsaXNlY29uZHMgYmVmb3JlIGFza2luZyBmb3IgYSBuZXcgZnJhbWVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjbWRTaXplXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBFbmNvZGluZyB9XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IElDb21tdW5pY2F0b3IgfSBmcm9tICcuLi9JQ29tbXVuaWNhdG9yJ1xyXG5pbXBvcnQgeyBJU3RhdGVQcm9jZXNzb3IgfSBmcm9tICcuLi9JU3RhdGVQcm9jZXNzb3InXHJcblxyXG4vKipcclxuICogSW5pdGlhbCBoYW5kc2hha2UgYW5kIHNlbmQgUkZCIHByb3RvY29sIHN1cHBvcnRlZCBvbiBjbGllbnRcclxuICovXHJcbmNsYXNzIEhhbmRzaGFrZVN0YXRlIGltcGxlbWVudHMgSVN0YXRlUHJvY2Vzc29yIHtcclxuICB3c1NvY2tldDogSUNvbW11bmljYXRvclxyXG4gIG5leHQ6IElTdGF0ZVByb2Nlc3NvclxyXG5cclxuICB1cGRhdGVSRkJTdGF0ZTogYW55XHJcbiAgY29uc3RydWN0b3IgKGNvbW06IElDb21tdW5pY2F0b3IsIHVwZGF0ZVJGQlN0YXRlOiAoc3RhdGU6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgdGhpcy53c1NvY2tldCA9IGNvbW1cclxuICAgIHRoaXMudXBkYXRlUkZCU3RhdGUgPSB1cGRhdGVSRkJTdGF0ZVxyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc1N0YXRlIChhY2M6IHN0cmluZyk6IG51bWJlciB7IC8vIGFjYyBpcyB0aGUgYWNjdW11bGF0ZWQgYnl0ZSBlbmNvZGVkIHN0cmluZyBzbyBmYXJcclxuICAgIGxldCBjbWRTaXplID0gMFxyXG4gICAgaWYgKGFjYy5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgLy8gR2V0dGluZyBoYW5kc2hha2UgJiB2ZXJzaW9uXHJcbiAgICAgIGNtZFNpemUgPSAxMlxyXG4gICAgICAvLyBpZiAob2JqLmFjYy5zdWJzdHJpbmcoMCwgNCkgIT0gXCJSRkIgXCIpIHsgcmV0dXJuIG9iai5TdG9wKCk7IH1cclxuICAgICAgLy8gdmFyIHZlcnNpb24gPSBwYXJzZUZsb2F0KG9iai5hY2Muc3Vic3RyaW5nKDQsIDExKSk7XHJcbiAgICAgIC8vIG9iai5EZWJ1ZyhcIktWZXJzaW9uOiBcIiArIHZlcnNpb24pO1xyXG4gICAgICB0aGlzLnVwZGF0ZVJGQlN0YXRlKDEpXHJcbiAgICAgIHRoaXMud3NTb2NrZXQuc2VuZCgnUkZCIDAwMy4wMDhcXG4nKVxyXG5cclxuICAgICAgcmV0dXJuIGNtZFNpemVcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgSGFuZHNoYWtlU3RhdGUgfVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBJQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi4vSUNvbW11bmljYXRvcidcclxuaW1wb3J0IHsgSVN0YXRlUHJvY2Vzc29yIH0gZnJvbSAnLi4vSVN0YXRlUHJvY2Vzc29yJ1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnLi4vQ29udmVydGVyJ1xyXG5pbXBvcnQgeyBJU2VydmVyQ3V0VGV4dEhhbmRsZXIgfSBmcm9tICcuLi9JU2VydmVyQ3V0VGV4dEhhbmRsZXInXHJcblxyXG5jbGFzcyBGcmFtZUJ1ZmZlckJlbGxTZXJ2ZXJDdXRUZXh0IGltcGxlbWVudHMgSVN0YXRlUHJvY2Vzc29yIHtcclxuICB3c1NvY2tldDogSUNvbW11bmljYXRvclxyXG4gIG5leHQ6IElTdGF0ZVByb2Nlc3NvclxyXG4gIGNtZFNpemU6IG51bWJlclxyXG4gIGJpbmFyeUVuY0RlYzogVHlwZUNvbnZlcnRlclxyXG4gIHNlcnZlckN1dFRleHRIYW5kbGVyOiBJU2VydmVyQ3V0VGV4dEhhbmRsZXJcclxuICB1cGRhdGVSRkJTdGF0ZTogYW55XHJcbiAgY29uc3RydWN0b3IgKGNvbW06IElDb21tdW5pY2F0b3IsIHNlcnZlckN1dFRleHRIYW5kbGVyOiBJU2VydmVyQ3V0VGV4dEhhbmRsZXIsIHVwZGF0ZVJGQlN0YXRlOiAoc3RhdGU6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgdGhpcy53c1NvY2tldCA9IGNvbW1cclxuICAgIHRoaXMuc2VydmVyQ3V0VGV4dEhhbmRsZXIgPSBzZXJ2ZXJDdXRUZXh0SGFuZGxlclxyXG4gICAgdGhpcy51cGRhdGVSRkJTdGF0ZSA9IHVwZGF0ZVJGQlN0YXRlXHJcbiAgfVxyXG5cclxuICBwcm9jZXNzU3RhdGUgKGFjYzogc3RyaW5nKTogbnVtYmVyIHsgLy8gYWNjIGlzIHRoZSBhY2N1bXVsYXRlZCBieXRlIGVuY29kZWQgc3RyaW5nIHNvIGZhclxyXG4gICAgbGV0IGNtZHNpemUgPSAwXHJcbiAgICBzd2l0Y2ggKGFjYy5jaGFyQ29kZUF0KDApKSB7XHJcbiAgICAgIGNhc2UgMDogLy8gRnJhbWVidWZmZXJVcGRhdGVcclxuICAgICAgICBpZiAoYWNjLmxlbmd0aCA8IDQpIHJldHVybiAwXHJcbiAgICAgICAgdGhpcy51cGRhdGVSRkJTdGF0ZSgxMDAgKyBUeXBlQ29udmVydGVyLlJlYWRTaG9ydChhY2MsIDIpKSAvLyBSZWFkIHRoZSBudW1iZXIgb2YgdGlsZXMgdGhhdCBhcmUgZ29pbmcgdG8gYmUgc2VudCwgYWRkIDEwMCBhbmQgdXNlIHRoYXQgYXMgb3VyIHByb3RvY29sIHN0YXRlLlxyXG4gICAgICAgIGNtZHNpemUgPSA0XHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAyOiAvLyBUaGlzIGlzIHRoZSBiZWxsLCBkbyBub3RoaW5nLlxyXG4gICAgICAgIGNtZHNpemUgPSAxXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAzOiAvLyBUaGlzIGlzIFNlcnZlckN1dFRleHRcclxuICAgICAgICBpZiAoYWNjLmxlbmd0aCA8IDgpIHJldHVybiAwXHJcbiAgICAgICAgdmFyIGxlbiA9IFR5cGVDb252ZXJ0ZXIuUmVhZEludChhY2MsIDQpICsgOFxyXG4gICAgICAgIGlmIChhY2MubGVuZ3RoIDwgbGVuKSByZXR1cm4gMFxyXG4gICAgICAgIGNtZHNpemUgPSB0aGlzLnNlcnZlckN1dFRleHRIYW5kbGVyLmhhbmRsZVNlcnZlckN1dFRleHQoYWNjKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgICByZXR1cm4gY21kc2l6ZVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRnJhbWVCdWZmZXJCZWxsU2VydmVyQ3V0VGV4dCB9XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IElDb21tdW5pY2F0b3IgfSBmcm9tICcuLi9JQ29tbXVuaWNhdG9yJ1xyXG5pbXBvcnQgeyBJU3RhdGVQcm9jZXNzb3IgfSBmcm9tICcuLi9JU3RhdGVQcm9jZXNzb3InXHJcblxyXG4vKipcclxuICogR2V0IHNlY3VyaXR5IG9wdGlvbnMgZnJvbSByZW1vdGUgZGV2aWNlLiBTZW5kIGF1dGggdHlwZS5cclxuICovXHJcbmNsYXNzIFNlY3VyaXR5T3B0aW9ucyBpbXBsZW1lbnRzIElTdGF0ZVByb2Nlc3NvciB7XHJcbiAgd3NTb2NrZXQ6IElDb21tdW5pY2F0b3JcclxuICBuZXh0OiBJU3RhdGVQcm9jZXNzb3JcclxuICB1cGRhdGVSRkJTdGF0ZTogYW55XHJcbiAgY29uc3RydWN0b3IgKGNvbW06IElDb21tdW5pY2F0b3IsIHVwZGF0ZVJGQlN0YXRlOiAoc3RhdGU6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgdGhpcy53c1NvY2tldCA9IGNvbW1cclxuICAgIHRoaXMudXBkYXRlUkZCU3RhdGUgPSB1cGRhdGVSRkJTdGF0ZVxyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc1N0YXRlIChhY2M6IHN0cmluZyk6IG51bWJlciB7IC8vIGFjYyBpcyB0aGUgYWNjdW11bGF0ZWQgYnl0ZSBlbmNvZGVkIHN0cmluZyBzbyBmYXJcclxuICAgIGxldCBjbWRTaXplID0gMFxyXG4gICAgaWYgKGFjYy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAvLyBHZXR0aW5nIHNlY3VyaXR5IG9wdGlvbnNcclxuICAgICAgY21kU2l6ZSA9IGFjYy5jaGFyQ29kZUF0KDApICsgMVxyXG4gICAgICB0aGlzLndzU29ja2V0LnNlbmQoU3RyaW5nLmZyb21DaGFyQ29kZSgxKSkgLy8gU2VuZCB0aGUgXCJOb25lXCIgc2VjdXJpdHkgdHlwZS4gU2luY2Ugd2UgYWxyZWFkeSBhdXRoZW50aWNhdGVkIHVzaW5nIHJlZGlyZWN0aW9uIGRpZ2VzdCBhdXRoLCB3ZSBkb24ndCBuZWVkIHRvIGRvIHRoaXMgYWdhaW4uXHJcbiAgICAgIHRoaXMudXBkYXRlUkZCU3RhdGUoMilcclxuICAgICAgcmV0dXJuIGNtZFNpemVcclxuICAgIH1cclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTZWN1cml0eU9wdGlvbnMgfVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBJQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi4vSUNvbW11bmljYXRvcidcclxuaW1wb3J0IHsgSVN0YXRlUHJvY2Vzc29yIH0gZnJvbSAnLi4vSVN0YXRlUHJvY2Vzc29yJ1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnLi4vQ29udmVydGVyJ1xyXG5cclxuLyoqXHJcbiAqIEdldCBhdXRoIHNlY3VyaXR5IHJlc3BvbnNlIGFuZCBwcm9jZWVkIHdpdGggc2hhcmUgZGVza3RvcCBmbGFnXHJcbiAqL1xyXG5jbGFzcyBTZWN1cml0eVJlc3BvbnNlIGltcGxlbWVudHMgSVN0YXRlUHJvY2Vzc29yIHtcclxuICB3c1NvY2tldDogSUNvbW11bmljYXRvclxyXG4gIG5leHQ6IElTdGF0ZVByb2Nlc3NvclxyXG4gIGJpbmFyeUVuY0RlYzogVHlwZUNvbnZlcnRlclxyXG4gIHVwZGF0ZVJGQlN0YXRlOiBhbnlcclxuICBjb25zdHJ1Y3RvciAoY29tbTogSUNvbW11bmljYXRvciwgdXBkYXRlUkZCU3RhdGU6IChzdGF0ZTogbnVtYmVyKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLndzU29ja2V0ID0gY29tbVxyXG4gICAgdGhpcy51cGRhdGVSRkJTdGF0ZSA9IHVwZGF0ZVJGQlN0YXRlXHJcbiAgfVxyXG5cclxuICBwcm9jZXNzU3RhdGUgKGFjYzogc3RyaW5nKTogbnVtYmVyIHsgLy8gYWNjIGlzIHRoZSBhY2N1bXVsYXRlZCBieXRlIGVuY29kZWQgc3RyaW5nIHNvIGZhclxyXG4gICAgbGV0IGNtZFNpemUgPSAwXHJcbiAgICBpZiAoYWNjLmxlbmd0aCA+PSA0KSB7XHJcbiAgICAgIC8vIEdldHRpbmcgc2VjdXJpdHkgcmVzcG9uc2VcclxuICAgICAgY21kU2l6ZSA9IDRcclxuICAgICAgaWYgKFR5cGVDb252ZXJ0ZXIuUmVhZEludChhY2MsIDApICE9PSAwKSB7XHJcbiAgICAgICAgLy8gY29uc3QgcmVhc29uTGVuZ3RoID0gVHlwZUNvbnZlcnRlci5SZWFkSW50KGFjYywgNClcclxuICAgICAgICAvLyBjb25zdCByZWFzb25TdHJpbmcgPSBhY2Muc3Vic3RyaW5nKDgsIDggKyByZWFzb25MZW5ndGgpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVhc29uU3RyaW5nKVxyXG4gICAgICAgIC8vIE5lZWQgdG8gYmUgZml4ZWQuIENsb3NlIHRoZSBjb25uZWN0aW9uIHdoZW4gdGhpcyBoYXBwZW5zXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvci4gU3RvcHBpbmcuIFNlY3VyaXR5IHJlc3BvbnNlIG5vdCBOb25lLicpXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy53c1NvY2tldC5zZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMSkpIC8vIFNlbmQgc2hhcmUgZGVza3RvcCBmbGFnXHJcbiAgICAgIHRoaXMudXBkYXRlUkZCU3RhdGUoMylcclxuICAgICAgcmV0dXJuIGNtZFNpemVcclxuICAgIH1cclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTZWN1cml0eVJlc3BvbnNlIH1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgSUNvbW11bmljYXRvciB9IGZyb20gJy4uL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCB7IElTdGF0ZVByb2Nlc3NvciB9IGZyb20gJy4uL0lTdGF0ZVByb2Nlc3NvcidcclxuaW1wb3J0IHsgVHlwZUNvbnZlcnRlciB9IGZyb20gJy4uL0NvbnZlcnRlcidcclxuaW1wb3J0IHsgRGVza3RvcCB9IGZyb20gJy4uL0Rlc2t0b3AnXHJcbmltcG9ydCB7IENvbW1zSGVscGVyIH0gZnJvbSAnLi4vVXRpbGl0aWVzL0NvbW1zSGVscGVyJ1xyXG5cclxuLyoqXHJcbiAqIFNldCBzdXBwb3J0ZWQgZW5jb2RpbmdzIGZvciBSRkJcclxuICovXHJcbmNsYXNzIFNlcnZlckluaXQgaW1wbGVtZW50cyBJU3RhdGVQcm9jZXNzb3Ige1xyXG4gIHdzU29ja2V0OiBJQ29tbXVuaWNhdG9yXHJcbiAgbmV4dDogSVN0YXRlUHJvY2Vzc29yXHJcblxyXG4gIGJpbmFyeUVuY0RlYzogVHlwZUNvbnZlcnRlclxyXG4gIHBhcmVudDogRGVza3RvcFxyXG4gIHVwZGF0ZVJGQlN0YXRlOiBhbnlcclxuICBjb25zdHJ1Y3RvciAoY29tbTogSUNvbW11bmljYXRvciwgcGFyZW50OiBEZXNrdG9wLCB1cGRhdGVSRkJTdGF0ZTogKHN0YXRlOiBudW1iZXIpID0+IHZvaWQpIHtcclxuICAgIHRoaXMud3NTb2NrZXQgPSBjb21tXHJcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxyXG4gICAgdGhpcy51cGRhdGVSRkJTdGF0ZSA9IHVwZGF0ZVJGQlN0YXRlXHJcbiAgfVxyXG5cclxuICBwcm9jZXNzU3RhdGUgKGFjYzogc3RyaW5nKTogbnVtYmVyIHsgLy8gYWNjIGlzIHRoZSBhY2N1bXVsYXRlZCBieXRlIGVuY29kZWQgc3RyaW5nIHNvIGZhclxyXG4gICAgbGV0IGNtZFNpemU6IG51bWJlciA9IDBcclxuICAgIGlmIChhY2MubGVuZ3RoID49IDI0KSB7XHJcbiAgICAgIC8vIEdldHRpbmcgc2VydmVyIGluaXRcclxuXHJcbiAgICAgIHRoaXMucGFyZW50LnJvdGF0aW9uID0gMCAvLyBXZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydCBzY3JlZW4gaW5pdCB3aGlsZSByb3RhdGVkLlxyXG4gICAgICBjb25zdCBuYW1lbGVuID0gVHlwZUNvbnZlcnRlci5SZWFkSW50KGFjYywgMjApXHJcbiAgICAgIGlmIChhY2MubGVuZ3RoIDwgMjQgKyBuYW1lbGVuKSByZXR1cm4gMFxyXG4gICAgICBjbWRTaXplID0gMjQgKyBuYW1lbGVuXHJcblxyXG4gICAgICBpZiAodGhpcy5wYXJlbnQudXBkYXRlU2NyZWVuRGltZW5zaW9ucyAhPSBudWxsKSB7IHRoaXMucGFyZW50LnVwZGF0ZVNjcmVlbkRpbWVuc2lvbnMoVHlwZUNvbnZlcnRlci5SZWFkU2hvcnQoYWNjLCAwKSwgVHlwZUNvbnZlcnRlci5SZWFkU2hvcnQoYWNjLCAyKSkgfVxyXG4gICAgICB0aGlzLnBhcmVudC5jYW52YXNDdHguY2FudmFzLndpZHRoID0gdGhpcy5wYXJlbnQuU2NyZWVuV2lkdGggPSB0aGlzLnBhcmVudC5yd2lkdGggPSB0aGlzLnBhcmVudC53aWR0aCA9IFR5cGVDb252ZXJ0ZXIuUmVhZFNob3J0KGFjYywgMClcclxuICAgICAgdGhpcy5wYXJlbnQuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHQgPSB0aGlzLnBhcmVudC5TY3JlZW5IZWlnaHQgPSB0aGlzLnBhcmVudC5yaGVpZ2h0ID0gdGhpcy5wYXJlbnQuaGVpZ2h0ID0gVHlwZUNvbnZlcnRlci5SZWFkU2hvcnQoYWNjLCAyKVxyXG4gICAgICAvLyBvYmouY2FudmFzLmNhbnZhcy53aWR0aCA9IG9iai5yd2lkdGggPSBvYmoud2lkdGggPSBvYmouU2NyZWVuV2lkdGggPSBSZWFkU2hvcnQob2JqLmFjYywgMCk7XHJcbiAgICAgIC8vIG9iai5jYW52YXMuY2FudmFzLmhlaWdodCA9IG9iai5yaGVpZ2h0ID0gb2JqLmhlaWdodCA9IG9iai5TY3JlZW5IZWlnaHQgPSBSZWFkU2hvcnQob2JqLmFjYywgMik7XHJcblxyXG4gICAgICAvLyBTZXRFbmNvZGluZ3MsIHdpdGggQU1UIHdlIGNhbid0IG9taXQgUkFXLCBtdXN0IGJlIHNwZWNpZmllZC5cclxuICAgICAgLy8gSW50ZWwgQU1UIHN1cHBvcnRzIGVuY29kaW5nczogUkFXICgwKSwgWlJMRSAoMTYpLCBEZXNrdG9wIFNpemUgKDB4RkZGRkZGMjEsIC0yMjMpLCBLVk0gRGF0YSBDaGFubmVsICgxMDkyKVxyXG5cclxuICAgICAgbGV0IHN1cHBvcnRlZEVuY29kaW5nczogc3RyaW5nID0gJydcclxuICAgICAgaWYgKHRoaXMucGFyZW50LnVzZVpSTEUpIHN1cHBvcnRlZEVuY29kaW5ncyArPSBUeXBlQ29udmVydGVyLkludFRvU3RyKDE2KVxyXG4gICAgICBzdXBwb3J0ZWRFbmNvZGluZ3MgKz0gVHlwZUNvbnZlcnRlci5JbnRUb1N0cigwKVxyXG5cclxuICAgICAgc3VwcG9ydGVkRW5jb2RpbmdzICs9IFR5cGVDb252ZXJ0ZXIuSW50VG9TdHIoMTA5MilcclxuICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoJ1NlbmQgc3VwcG9ydGVkIGVuY29kaW5ncycpXHJcbiAgICAgIHRoaXMud3NTb2NrZXQuc2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDIsIDApICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKChzdXBwb3J0ZWRFbmNvZGluZ3MubGVuZ3RoIC8gNCkgKyAxKSArIHN1cHBvcnRlZEVuY29kaW5ncyArIFR5cGVDb252ZXJ0ZXIuSW50VG9TdHIoLTIyMykpIC8vIFN1cHBvcnRlZCBFbmNvZGluZ3MgKyBEZXNrdG9wIFNpemVcclxuXHJcbiAgICAgIC8vIFNldCB0aGUgcGl4ZWwgZW5jb2RpbmcgdG8gc29tZXRoaW5nIG11Y2ggc21hbGxlclxyXG4gICAgICAvLyBvYmouU2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDAsIDAsIDAsIDAsIDE2LCAxNiwgMCwgMSkgKyBTaG9ydFRvU3RyKDMxKSArIFNob3J0VG9TdHIoNjMpICsgU2hvcnRUb1N0cigzMSkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDExLCA1LCAwLCAwLCAwLCAwKSk7ICAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgMTYgYml0IGNvbG9yIFJHQjU2NSAoVGhpcyBpcyB0aGUgZGVmYXVsdCwgc28gd2UgZG9uJ3QgbmVlZCB0byBzZXQgaXQpXHJcbiAgICAgIGlmICh0aGlzLnBhcmVudC5icHAgPT09IDEpIHsgdGhpcy53c1NvY2tldC5zZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoMCwgMCwgMCwgMCwgOCwgOCwgMCwgMSkgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHIoNykgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHIoNykgKyBUeXBlQ29udmVydGVyLlNob3J0VG9TdHIoMykgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDUsIDIsIDAsIDAsIDAsIDApKSB9IC8vIFNldHVwIDggYml0IGNvbG9yIFJHQjMzMlxyXG5cclxuICAgICAgdGhpcy51cGRhdGVSRkJTdGF0ZSg0KVxyXG5cclxuICAgICAgdGhpcy5wYXJlbnQub25TdGF0ZUNoYW5nZSgzKVxyXG4gICAgICB0aGlzLnBhcmVudC5sb2dnZXIuaW5mbygnU3RhcnQgbmV3IGZyYW1lLicpXHJcbiAgICAgIENvbW1zSGVscGVyLnNlbmRSZWZyZXNoKHRoaXMucGFyZW50LCB0aGlzLndzU29ja2V0KVxyXG4gICAgICAvLyBvYmoudGltZXIgPSBzZXRJbnRlcnZhbChvYmoueHhPblRpbWVyLCA1MCk7XHJcbiAgICAgIHRoaXMucGFyZW50Lm9sZE1vdXNlWCA9IC0xIC8vIE9sZCBtb3VzZSB4IHBvc2l0aW9uXHJcblxyXG4gICAgICAvLyBpZiAodGhpcy5wYXJlbnQub25TY3JlZW5TaXplQ2hhbmdlICE9IG51bGwpXHJcbiAgICAgIC8vIHtcclxuICAgICAgLy8gICB0aGlzLnBhcmVudC5vblNjcmVlblNpemVDaGFuZ2Uob2JqLCBvYmouU2NyZWVuV2lkdGgsIG9iai5TY3JlZW5IZWlnaHQpO1xyXG4gICAgICAvLyB9XHJcblxyXG4gICAgICByZXR1cm4gY21kU2l6ZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFNlcnZlckluaXQgfVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBJU2VydmVyQ3V0VGV4dEhhbmRsZXIgfSBmcm9tICcuLi9JU2VydmVyQ3V0VGV4dEhhbmRsZXInXHJcbmltcG9ydCB7IElLdm1EYXRhQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi4vSUNvbW11bmljYXRvcidcclxuaW1wb3J0IHsgRGVza3RvcCB9IGZyb20gJy4uL0Rlc2t0b3AnXHJcbmltcG9ydCB7IFR5cGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9Db252ZXJ0ZXInXHJcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi4vVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzJ1xyXG5jbGFzcyBTZXJ2ZXJDdXRUZXh0SGFuZGxlciBpbXBsZW1lbnRzIElTZXJ2ZXJDdXRUZXh0SGFuZGxlciB7XHJcbiAgYmluYXJ5RW5jRGVjOiBUeXBlQ29udmVydGVyXHJcbiAgd3NTb2NrZXQ6IElLdm1EYXRhQ29tbXVuaWNhdG9yXHJcbiAgcGFyZW50OiBEZXNrdG9wXHJcbiAgY29uc3RydWN0b3IgKGNvbW06IElLdm1EYXRhQ29tbXVuaWNhdG9yLCBwYXJlbnQ6IERlc2t0b3ApIHtcclxuICAgIHRoaXMud3NTb2NrZXQgPSBjb21tXHJcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxyXG4gIH1cclxuXHJcbiAgaGFuZGxlU2VydmVyQ3V0VGV4dCAoYWNjOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgaWYgKGFjYy5sZW5ndGggPCA4KSByZXR1cm4gMFxyXG4gICAgY29uc3QgbGVuID0gVHlwZUNvbnZlcnRlci5SZWFkSW50KGFjYywgNCkgKyA4XHJcbiAgICBpZiAoYWNjLmxlbmd0aCA8IGxlbikgcmV0dXJuIDBcclxuXHJcbiAgICBpZiAodGhpcy5wYXJlbnQub25Ldm1EYXRhICE9IG51bGwpIHtcclxuICAgICAgY29uc3QgZCA9IGFjYy5zdWJzdHJpbmcoOCwgbGVuKVxyXG4gICAgICBpZiAoKGQubGVuZ3RoID49IDE2KSAmJiAoZC5zdWJzdHJpbmcoMCwgMTUpID09PSAnXFwwS3ZtRGF0YUNoYW5uZWwnKSkge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJlbnQua3ZtRGF0YVN1cHBvcnRlZCkgeyB0aGlzLnBhcmVudC5rdm1EYXRhU3VwcG9ydGVkID0gdHJ1ZTsgY29uc29sZS5sb2coJ0tWTSBEYXRhIENoYW5uZWwgU3VwcG9ydGVkLicpIH1cclxuICAgICAgICBpZiAoKCh0aGlzLnBhcmVudC5vbkt2bURhdGFBY2sgPT09IC0xKSAmJiAoZC5sZW5ndGggPT09IDE2KSkgfHwgKGQuY2hhckNvZGVBdCgxNSkgIT09IDApKSB7IHRoaXMucGFyZW50Lm9uS3ZtRGF0YUFjayA9IHRydWUgfVxyXG4gICAgICAgIGlmIChpc1RydXRoeSh0aGlzLnBhcmVudC51cmx2YXJzKSAmJiBpc1RydXRoeSh0aGlzLnBhcmVudC51cmx2YXJzLmt2bWRhdGF0cmFjZSkpIHsgY29uc29sZS5sb2coYEtWTS1SZWN2KCgke2QubGVuZ3RoIC0gMTZ9KSk6ICAke2Quc3Vic3RyaW5nKDE2KX1gKSB9XHJcbiAgICAgICAgaWYgKGQubGVuZ3RoID4gMTYpIHsgdGhpcy5wYXJlbnQub25Ldm1EYXRhKGQuc3Vic3RyaW5nKDE2KSkgfSAvLyBFdmVudCB0aGUgZGF0YSBhbmQgYWNrXHJcbiAgICAgICAgaWYgKCh0aGlzLnBhcmVudC5vbkt2bURhdGFBY2sgPT09IHRydWUpICYmICh0aGlzLnBhcmVudC5vbkt2bURhdGFQZW5kaW5nLmxlbmd0aCA+IDApKSB7IHRoaXMud3NTb2NrZXQub25TZW5kS3ZtRGF0YSh0aGlzLnBhcmVudC5vbkt2bURhdGFQZW5kaW5nLnNoaWZ0KCkpIH0gLy8gU2VuZCBwZW5kaW5nIGRhdGFcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlblxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgU2VydmVyQ3V0VGV4dEhhbmRsZXIgfVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBJUkxFRGVjb2RlciB9IGZyb20gJy4uL0lSTEVEZWNvZGVyJ1xyXG5pbXBvcnQgeyBEZXNrdG9wIH0gZnJvbSAnLi4vRGVza3RvcCdcclxuaW1wb3J0IHsgSW1hZ2VIZWxwZXIgfSBmcm9tICcuLi9VdGlsaXRpZXMvSW1hZ2VIZWxwZXInXHJcbmNsYXNzIFJMRURlY29kZXIgaW1wbGVtZW50cyBJUkxFRGVjb2RlciB7XHJcbiAgcGFyZW50OiBEZXNrdG9wXHJcbiAgY29uc3RydWN0b3IgKHBhcmVudDogRGVza3RvcCkge1xyXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRcclxuICB9XHJcblxyXG4gIERlY29kZSAoZGF0YTogc3RyaW5nLCBwdHI6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBzOiBudW1iZXIsIGRhdGFsZW46IG51bWJlcik6IGFueSB7XHJcbiAgICBjb25zdCBzdWJlbmNvZGluZyA9IGRhdGEuY2hhckNvZGVBdChwdHIrKylcclxuICAgIGxldCBpbmRleFxyXG4gICAgbGV0IHZcclxuICAgIGxldCBydW5sZW5ndGhkZWNvZGVcclxuICAgIGNvbnN0IHBhbGV0dGU6IGFueSA9IHt9XHJcbiAgICBsZXQgcmxlY291bnQgPSAwXHJcbiAgICBsZXQgcnVubGVuZ3RoID0gMFxyXG4gICAgbGV0IGlcclxuICAgIC8vIHRoaXMucGFyZW50LkRlYnVnKFwiUkVDVCBSTEUgKFwiICsgKGRhdGFsZW4gLSA1KSArIFwiLCBcIiArIHN1YmVuY29kaW5nICsgXCIpOlwiICsgcnN0cjJoZXgoZGF0YS5zdWJzdHJpbmcoMjEsIDIxICsgKGRhdGFsZW4gLSA1KSkpKTtcclxuICAgIGlmIChzdWJlbmNvZGluZyA9PT0gMCkge1xyXG4gICAgICAvLyBSQVcgZW5jb2RpbmdcclxuICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoJ1JhdyBlbmNvZGluZycpXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHsgSW1hZ2VIZWxwZXIuc2V0UGl4ZWwodGhpcy5wYXJlbnQsIGRhdGEuY2hhckNvZGVBdChwdHIrKykgKyAoKHRoaXMucGFyZW50LmJwcCA9PT0gMikgPyAoZGF0YS5jaGFyQ29kZUF0KHB0cisrKSA8PCA4KSA6IDApLCBpKSB9XHJcbiAgICAgIEltYWdlSGVscGVyLnB1dEltYWdlKHRoaXMucGFyZW50LCB4LCB5KVxyXG4gICAgfSBlbHNlIGlmIChzdWJlbmNvZGluZyA9PT0gMSkge1xyXG4gICAgICAvLyBTb2xpZCBjb2xvciB0aWxlXHJcbiAgICAgIHYgPSBkYXRhLmNoYXJDb2RlQXQocHRyKyspICsgKCh0aGlzLnBhcmVudC5icHAgPT09IDIpID8gKGRhdGEuY2hhckNvZGVBdChwdHIrKykgPDwgOCkgOiAwKVxyXG4gICAgICB0aGlzLnBhcmVudC5jYW52YXNDdHguZmlsbFN0eWxlID0gJ3JnYignICsgKCh0aGlzLnBhcmVudC5icHAgPT09IDEpID8gKGAkeyh2ICYgMjI0KX0sICR7KCh2ICYgMjgpIDw8IDMpfSwgJHtJbWFnZUhlbHBlci5maXhDb2xvcigodiAmIDMpIDw8IDYpfWApIDogKGAkeygodiA+PiA4KSAmIDI0OCl9LCAkeygodiA+PiAzKSAmIDI1Mil9LCR7KCh2ICYgMzEpIDw8IDMpfWApKSArICcpJ1xyXG5cclxuICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoJ2ZpbGxzdHlsZTogJyArIHRoaXMucGFyZW50LmNhbnZhc0N0eC5maWxsU3R5bGUpXHJcbiAgICAgIGNvbnN0IHh4ID0gSW1hZ2VIZWxwZXIucm90WCh0aGlzLnBhcmVudCwgeCwgeSlcclxuICAgICAgeSA9IEltYWdlSGVscGVyLnJvdFkodGhpcy5wYXJlbnQsIHgsIHkpXHJcbiAgICAgIHggPSB4eFxyXG5cclxuICAgICAgdGhpcy5wYXJlbnQuY2FudmFzQ3R4LmZpbGxSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpXHJcbiAgICB9IGVsc2UgaWYgKHN1YmVuY29kaW5nID4gMSAmJiBzdWJlbmNvZGluZyA8IDE3KSB7IC8vIFBhY2tlZCBwYWxldHRlIGVuY29kZWQgdGlsZVxyXG4gICAgICAvLyBSZWFkIHRoZSBwYWxldHRlXHJcbiAgICAgIHRoaXMucGFyZW50LmxvZ2dlci52ZXJib3NlKCdSZWFkIHRoZSBwYWNrZWQgcGFsZXR0ZScpXHJcbiAgICAgIGxldCBiciA9IDQ7IGxldCBibSA9IDE1IC8vIGJyIGlzIEJpdFJlYWQgYW5kIGJtIGlzIEJpdE1hc2suIEJ5IGFkanVzdGluZyB0aGVzZSB0d28gd2UgY2FuIHN1cHBvcnQgYWxsIHRoZSB2YXJpYXRpb25zIGluIHRoaXMgZW5jb2RpbmcuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzdWJlbmNvZGluZzsgaSsrKSB7IHBhbGV0dGVbaV0gPSBkYXRhLmNoYXJDb2RlQXQocHRyKyspICsgKCh0aGlzLnBhcmVudC5icHAgPT09IDIpID8gKGRhdGEuY2hhckNvZGVBdChwdHIrKykgPDwgOCkgOiAwKSB9XHJcblxyXG4gICAgICAvLyBDb21wdXRlIGJpdHMgdG8gcmVhZCAmIGJpdCBtYXJrXHJcbiAgICAgIGlmIChzdWJlbmNvZGluZyA9PT0gMikgeyBiciA9IDE7IGJtID0gMSB9IGVsc2UgaWYgKHN1YmVuY29kaW5nIDw9IDQpIHsgYnIgPSAyOyBibSA9IDMgfVxyXG5cclxuICAgICAgLy8gRGlzcGxheSBhbGwgdGhlIGJpdHNcclxuICAgICAgd2hpbGUgKHJsZWNvdW50IDwgcyAmJiBwdHIgPCBkYXRhLmxlbmd0aCkgeyB2ID0gZGF0YS5jaGFyQ29kZUF0KHB0cisrKTsgZm9yIChpID0gKDggLSBicik7IGkgPj0gMDsgaSAtPSBicikgeyBJbWFnZUhlbHBlci5zZXRQaXhlbCh0aGlzLnBhcmVudCwgcGFsZXR0ZVsodiA+PiBpKSAmIGJtXSwgcmxlY291bnQrKykgfSB9XHJcbiAgICAgIEltYWdlSGVscGVyLnB1dEltYWdlKHRoaXMucGFyZW50LCB4LCB5KVxyXG4gICAgfSBlbHNlIGlmIChzdWJlbmNvZGluZyA9PT0gMTI4KSB7IC8vIFJMRSBlbmNvZGVkIHRpbGVcclxuICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoJ1JMRSBlbmNvZGVkIHRpbGUnKVxyXG4gICAgICB3aGlsZSAocmxlY291bnQgPCBzICYmIHB0ciA8IGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBydW4gY29sb3JcclxuICAgICAgICB2ID0gZGF0YS5jaGFyQ29kZUF0KHB0cisrKSArICgodGhpcy5wYXJlbnQuYnBwID09PSAyKSA/IChkYXRhLmNoYXJDb2RlQXQocHRyKyspIDw8IDgpIDogMClcclxuXHJcbiAgICAgICAgLy8gRGVjb2RlIHRoZSBydW4gbGVuZ3RoLiBUaGlzIGlzIHRoZSBmYXN0ZXN0IGFuZCBtb3N0IGNvbXBhY3Qgd2F5IEkgZm91bmQgdG8gZG8gdGhpcy5cclxuICAgICAgICBydW5sZW5ndGggPSAxOyBkbyB7IHJ1bmxlbmd0aCArPSAocnVubGVuZ3RoZGVjb2RlID0gZGF0YS5jaGFyQ29kZUF0KHB0cisrKSkgfSB3aGlsZSAocnVubGVuZ3RoZGVjb2RlID09PSAyNTUpXHJcblxyXG4gICAgICAgIC8vIERyYXcgYSBydW5cclxuICAgICAgICB3aGlsZSAoLS1ydW5sZW5ndGggPj0gMCkgeyBJbWFnZUhlbHBlci5zZXRQaXhlbCh0aGlzLnBhcmVudCwgdiwgcmxlY291bnQrKykgfVxyXG4gICAgICB9XHJcbiAgICAgIEltYWdlSGVscGVyLnB1dEltYWdlKHRoaXMucGFyZW50LCB4LCB5KVxyXG4gICAgfSBlbHNlIGlmIChzdWJlbmNvZGluZyA+IDEyOSkgeyAvLyBQYWxldHRlIFJMRSBlbmNvZGVkIHRpbGVcclxuICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoJ1JlYWQgdGhlIFJMRSBwYWxldHRlJylcclxuICAgICAgLy8gUmVhZCB0aGUgcGFsZXR0ZVxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgKHN1YmVuY29kaW5nIC0gMTI4KTsgaSsrKSB7IHBhbGV0dGVbaV0gPSBkYXRhLmNoYXJDb2RlQXQocHRyKyspICsgKCh0aGlzLnBhcmVudC5icHAgPT09IDIpID8gKGRhdGEuY2hhckNvZGVBdChwdHIrKykgPDwgOCkgOiAwKSB9XHJcbiAgICAgIHRoaXMucGFyZW50LmxvZ2dlci52ZXJib3NlKCdEZWNvZGUgUkxFIG9uIHBhbGV0dGUnKVxyXG4gICAgICAvLyBEZWNvZGUgUkxFICBvbiBwYWxldHRlXHJcbiAgICAgIHdoaWxlIChybGVjb3VudCA8IHMgJiYgcHRyIDwgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAvLyBTZXR1cCB0aGUgcnVuLCBnZXQgdGhlIGNvbG9yIGluZGV4IGFuZCBnZXQgdGhlIGNvbG9yIGZyb20gdGhlIHBhbGV0dGUuXHJcbiAgICAgICAgcnVubGVuZ3RoID0gMTsgaW5kZXggPSBkYXRhLmNoYXJDb2RlQXQocHRyKyspOyB2ID0gcGFsZXR0ZVtpbmRleCAlIDEyOF1cclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGluZGV4IHN0YXJ0cyB3aXRoIGhpZ2ggb3JkZXIgYml0IDEsIHRoaXMgaXMgYSBydW4gYW5kIGRlY29kZSB0aGUgcnVuIGxlbmd0aC5cclxuICAgICAgICBpZiAoaW5kZXggPiAxMjcpIHsgZG8geyBydW5sZW5ndGggKz0gKHJ1bmxlbmd0aGRlY29kZSA9IGRhdGEuY2hhckNvZGVBdChwdHIrKykpIH0gd2hpbGUgKHJ1bmxlbmd0aGRlY29kZSA9PT0gMjU1KSB9XHJcblxyXG4gICAgICAgIC8vIERyYXcgYSBydW5cclxuICAgICAgICB3aGlsZSAoLS1ydW5sZW5ndGggPj0gMCkgeyBJbWFnZUhlbHBlci5zZXRQaXhlbCh0aGlzLnBhcmVudCwgdiwgcmxlY291bnQrKykgfVxyXG4gICAgICB9XHJcbiAgICAgIEltYWdlSGVscGVyLnB1dEltYWdlKHRoaXMucGFyZW50LCB4LCB5KVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUkxFRGVjb2RlciB9XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4vSUxvZ2dlcidcclxuaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICcuL0FNVFJlZGlyZWN0b3InXHJcbmltcG9ydCB7IElNb2R1bGUgfSBmcm9tICcuL0lNb2R1bGUnXHJcblxyXG4vKipcclxuICogRGVza3RvcCBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgaGFuZGxpbmcgUmVtb3RlIERlc2t0b3AgZnVuY3Rpb25hbGl0eVxyXG4gKi9cclxuY2xhc3MgRGVza3RvcCBpbXBsZW1lbnRzIElNb2R1bGUge1xyXG4gIHJvdGF0aW9uOiBudW1iZXJcclxuICB1c2VaUkxFOiBib29sZWFuXHJcbiAgb2xkTW91c2VYOiBudW1iZXJcclxuICBvbGRNb3VzZVk6IG51bWJlclxyXG4gIGxhc3RNb3VzZVg6IG51bWJlclxyXG4gIGxhc3RNb3VzZVk6IG51bWJlclxyXG4gIGJwcDogbnVtYmVyXHJcbiAga3ZtRGF0YVN1cHBvcnRlZDogYm9vbGVhblxyXG4gIG9uS3ZtRGF0YUFjazogYW55XHJcbiAgdXJsdmFyczogYW55XHJcbiAgb25Ldm1EYXRhUGVuZGluZzogYW55W11cclxuICBzcGFyZXc6IG51bWJlclxyXG4gIHNwYXJlaDogbnVtYmVyXHJcbiAgc3BhcmV3MjogbnVtYmVyXHJcbiAgc3BhcmVoMjogbnVtYmVyXHJcbiAgc3BhcmU6IGFueVxyXG4gIHNwYXJlY2FjaGU6IGFueVxyXG4gIGZyYW1lUmF0ZURlbGF5OiBudW1iZXJcclxuICBpbmZsYXRlOiBhbnlcclxuICBsb2dnZXI6IElMb2dnZXJcclxuICBob2xkaW5nOiBib29sZWFuXHJcbiAgY2FudmFzQ3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcclxuICB0Y2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudFxyXG4gIHdpZHRoOiBudW1iZXJcclxuICBoZWlnaHQ6IG51bWJlclxyXG4gIGNhbnZhc0lkOiBzdHJpbmdcclxuICBmb2N1c01vZGU6IG51bWJlclxyXG4gIHJ3aWR0aDogbnVtYmVyXHJcbiAgcmhlaWdodDogbnVtYmVyXHJcbiAgU2NyZWVuV2lkdGg6IG51bWJlclxyXG4gIFNjcmVlbkhlaWdodDogbnVtYmVyXHJcbiAgbGFzdEtlZXBBbGl2ZTogbnVtYmVyXHJcbiAgYnV0dG9ubWFzazogbnVtYmVyXHJcbiAgc3RhdGU6IG51bWJlclxyXG4gIGNhbnZhc0NvbnRyb2w6IEhUTUxDYW52YXNFbGVtZW50XHJcbiAgc2Nyb2xsZGl2OiBIVE1MRWxlbWVudFxyXG4gIGxhc3RNb3VzZVgyOiBudW1iZXJcclxuICBub01vdXNlUm90YXRlOiBib29sZWFuXHJcbiAgcHJvdG9jb2w6IFByb3RvY29sXHJcbiAgWkxJQjogYW55XHJcbiAgbGFzdE1vdXNlTW92ZVRpbWU6IG51bWJlclxyXG5cclxuICBwcm9jZXNzRGF0YSAoZGF0YTogc3RyaW5nKTogYW55IHt9XHJcbiAgdXBkYXRlU2NyZWVuRGltZW5zaW9uczogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkXHJcbiAgb25TdGF0ZUNoYW5nZSAoc3RhdGU6IG51bWJlcik6IGFueSB7fVxyXG4gIG9uS3ZtRGF0YTogKGRhdGE6IHN0cmluZykgPT4gdm9pZFxyXG4gIG9uU2NyZWVuUmVzaXplOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbnZhc0lkOiBzdHJpbmcpID0+IHZvaWRcclxuICBvblNjcmVlblNpemVDaGFuZ2U6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZFxyXG4gIHNldERlc2tGb2N1czogKGVsOiBzdHJpbmcsIGZvY3VzbW9kZTogbnVtYmVyKSA9PiB2b2lkXHJcbiAgZ2V0RGVza0ZvY3VzOiAoZWw6IHN0cmluZykgPT4gQ1NTU3R5bGVEZWNsYXJhdGlvblxyXG4gIHN0YXJ0ICgpOiBhbnkge31cclxuICBvblNlbmRLdm1EYXRhIChkYXRhOiBzdHJpbmcpOiBhbnkge31cclxuXHJcbiAgb25TZW5kOiAoZGF0YTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgb25Qcm9jZXNzRGF0YTogKGRhdGE6IHN0cmluZykgPT4gdm9pZFxyXG59XHJcblxyXG5leHBvcnQgeyBEZXNrdG9wIH1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgSUNvbW11bmljYXRvciwgSUt2bURhdGFDb21tdW5pY2F0b3IgfSBmcm9tICcuL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCB7IElTdGF0ZVByb2Nlc3NvciB9IGZyb20gJy4vSVN0YXRlUHJvY2Vzc29yJ1xyXG5pbXBvcnQgeyBIYW5kc2hha2VTdGF0ZSwgU2VjdXJpdHlPcHRpb25zLCBTZWN1cml0eVJlc3BvbnNlLCBTZXJ2ZXJJbml0LCBGcmFtZUJ1ZmZlckJlbGxTZXJ2ZXJDdXRUZXh0LCBFbmNvZGluZyB9IGZyb20gJy4vUkZCU3RhdGVQcm9jZXNzb3JzJ1xyXG5pbXBvcnQgeyBEZXNrdG9wIH0gZnJvbSAnLi9EZXNrdG9wJ1xyXG5pbXBvcnQgeyBTZXJ2ZXJDdXRUZXh0SGFuZGxlciB9IGZyb20gJy4vUkZCU3RhdGVQcm9jZXNzb3JzL1NlcnZlckN1dFRleHRIYW5kbGVyJ1xyXG5pbXBvcnQgeyBSTEVEZWNvZGVyIH0gZnJvbSAnLi9JbWFnZURhdGEvUkxFRGVjb2RlcidcclxuXHJcbi8qKlxyXG4gKiBTdGF0ZVByb2Nlc3NvckZhY3RvcnkgaXMgdGhlIGZhY3RvcnkgY2xhc3MgdG8gcmV0dXJuIHRoZSBwcm9jZXNzb3IgZm9yIGN1cnJlbnQgc3RhdGUuXHJcbiAqL1xyXG5jbGFzcyBTdGF0ZVByb2Nlc3NvckZhY3Rvcnkge1xyXG4gIHN0YXRlUHJvY2Vzc29yczogYW55XHJcbiAgY29uc3RydWN0b3IgKGNvbW06IElDb21tdW5pY2F0b3IsIHBhcmVudDogRGVza3RvcCwgdXBkYXRlUkZCU3RhdGU6IChzdGF0ZTogbnVtYmVyKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLnN0YXRlUHJvY2Vzc29ycyA9IHt9XHJcbiAgICB0aGlzLnN0YXRlUHJvY2Vzc29yc1swXSA9IG5ldyBIYW5kc2hha2VTdGF0ZShjb21tLCB1cGRhdGVSRkJTdGF0ZSkgLy8gR290IHNlcnZlciB2ZXJzaW9uLiBTZW5kIGNsaWVudCB2ZXJzaW9uXHJcbiAgICB0aGlzLnN0YXRlUHJvY2Vzc29yc1sxXSA9IG5ldyBTZWN1cml0eU9wdGlvbnMoY29tbSwgdXBkYXRlUkZCU3RhdGUpIC8vIEdvdCBzZWN1cml0eSBvcHRpb25zLCBzZW5kIE5vbmUgc2VjdXJpdHkgdHlwZVxyXG4gICAgdGhpcy5zdGF0ZVByb2Nlc3NvcnNbMl0gPSBuZXcgU2VjdXJpdHlSZXNwb25zZShjb21tLCB1cGRhdGVSRkJTdGF0ZSkgLy8gR290IHNlY3VyaXR5IHJlc3BvbnNlLiBTZW5kIHNoYXJlIGRlc2t0b3AgZmxhZ1xyXG4gICAgdGhpcy5zdGF0ZVByb2Nlc3NvcnNbM10gPSBuZXcgU2VydmVySW5pdChjb21tLCBwYXJlbnQsIHVwZGF0ZVJGQlN0YXRlKSAvLyBHb3Qgc2VydmVyIGluaXQuIFNlbmQgZW5jb2RpbmcgbGlzdFxyXG4gICAgY29uc3Qgc2VydmVyQ3V0VGV4dEhhbmRsZXIgPSBuZXcgU2VydmVyQ3V0VGV4dEhhbmRsZXIoY29tbSBhcyBJS3ZtRGF0YUNvbW11bmljYXRvciwgcGFyZW50KVxyXG4gICAgdGhpcy5zdGF0ZVByb2Nlc3NvcnNbNF0gPSBuZXcgRnJhbWVCdWZmZXJCZWxsU2VydmVyQ3V0VGV4dChjb21tLCBzZXJ2ZXJDdXRUZXh0SGFuZGxlciwgdXBkYXRlUkZCU3RhdGUpIC8vIGhhbmRsZXMgMyBkaWZmZXJlbnQgc3RhdGVzLCBGcmFtZWJ1ZmZlcnVwZGF0ZSwgYmVsbCBhbmQgU2VydmVyQ3V0VGV4dFxyXG4gICAgdGhpcy5zdGF0ZVByb2Nlc3NvcnNbJzEwMHBsdXMnXSA9IG5ldyBFbmNvZGluZyhjb21tLCBwYXJlbnQsIG5ldyBSTEVEZWNvZGVyKHBhcmVudCksIHVwZGF0ZVJGQlN0YXRlKSAvLyBoYW5kbGVzIHRpbGUgY291bnQgYW5kIGVuY29kaW5nXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBnZXRQcm9jZXNzb3IgcmV0dXJucyB0aGUgU3RhdGVQcm9jZXNzb3IgdG8gaGFuZGxlIHRoZSBuZXh0IFJGQiBzdGF0ZVxyXG4gICAqIEBwYXJhbSBzdGF0ZSBSRkIgc3RhdGUgdG8gcHJvY2VzcyBuZXh0XHJcbiAgICovXHJcbiAgZ2V0UHJvY2Vzc29yIChzdGF0ZTogbnVtYmVyKTogSVN0YXRlUHJvY2Vzc29yIHtcclxuICAgIGlmIChzdGF0ZSA8PSAxMDApIHsgLy8gcmVndWxhciBzdGF0ZXMgYmVmb3JlIGVuY29kaW5nIGluZm9ybWF0aW9uXHJcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlUHJvY2Vzc29yc1tzdGF0ZV1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlUHJvY2Vzc29yc1snMTAwcGx1cyddIC8vIHdoZW4gaXQgcmVhY2hlcyB0aGUgZW5jb2Rpbmcgc3RhZ2UgMTAwIGlzIGFkZGVkIHRvIG51bWJlciBvZiB0aWxlcyBpbiB0aGUgaW1hZ2UgYW5kIHByb2Nlc3NlZCBieSB0aGUgRW5jb2RpbmcgcHJvY2Vzc29yXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTdGF0ZVByb2Nlc3NvckZhY3RvcnkgfVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogS2V5IGNvZGUgdGFibGUgdXNlZCBmb3Igc3BlY2lhbCBrZXkgaGFuZGxpbmdcclxuICovXHJcbmNvbnN0IEFNVEtleUNvZGVUYWJsZTogYW55ID0ge1xyXG4gIFBhdXNlOiAxOSxcclxuICBDYXBzTG9jazogMjAsXHJcbiAgU3BhY2U6IDMyLFxyXG4gIFF1b3RlOiAzOSxcclxuICBNaW51czogNDUsXHJcbiAgTnVtcGFkTXVsdGlwbHk6IDQyLFxyXG4gIE51bXBhZEFkZDogNDMsXHJcbiAgUHJpbnRTY3JlZW46IDQ0LFxyXG4gIENvbW1hOiA0NCxcclxuICBOdW1wYWRTdWJ0cmFjdDogNDUsXHJcbiAgTnVtcGFkRGVjaW1hbDogNDYsXHJcbiAgUGVyaW9kOiA0NixcclxuICBTbGFzaDogNDcsXHJcbiAgTnVtcGFkRGl2aWRlOiA0NyxcclxuICBTZW1pY29sb246IDU5LFxyXG4gIEVxdWFsOiA2MSxcclxuICBPU0xlZnQ6IDkxLFxyXG4gIEJyYWNrZXRMZWZ0OiA5MSxcclxuICBPU1JpZ2h0OiA5MSxcclxuICBCYWNrc2xhc2g6IDkyLFxyXG4gIEJyYWNrZXRSaWdodDogOTMsXHJcbiAgQ29udGV4dE1lbnU6IDkzLFxyXG4gIEJhY2txdW90ZTogOTYsXHJcbiAgTnVtTG9jazogMTQ0LFxyXG4gIFNjcm9sbExvY2s6IDE0NSxcclxuICBCYWNrc3BhY2U6IDB4ZmYwOCxcclxuICBUYWI6IDB4ZmYwOSxcclxuICBFbnRlcjogMHhmZjBkLFxyXG4gIE51bXBhZEVudGVyOiAweGZmMGQsXHJcbiAgRXNjYXBlOiAweGZmMWIsXHJcbiAgRGVsZXRlOiAweGZmZmYsXHJcbiAgSG9tZTogMHhmZjUwLFxyXG4gIFBhZ2VVcDogMHhmZjU1LFxyXG4gIFBhZ2VEb3duOiAweGZmNTYsXHJcbiAgQXJyb3dMZWZ0OiAweGZmNTEsXHJcbiAgQXJyb3dVcDogMHhmZjUyLFxyXG4gIEFycm93UmlnaHQ6IDB4ZmY1MyxcclxuICBBcnJvd0Rvd246IDB4ZmY1NCxcclxuICBFbmQ6IDB4ZmY1NyxcclxuICBJbnNlcnQ6IDB4ZmY2MyxcclxuICBGMTogMHhmZmJlLFxyXG4gIEYyOiAweGZmYmYsXHJcbiAgRjM6IDB4ZmZjMCxcclxuICBGNDogMHhmZmMxLFxyXG4gIEY1OiAweGZmYzIsXHJcbiAgRjY6IDB4ZmZjMyxcclxuICBGNzogMHhmZmM0LFxyXG4gIEY4OiAweGZmYzUsXHJcbiAgRjk6IDB4ZmZjNixcclxuICBGMTA6IDB4ZmZjNyxcclxuICBGMTE6IDB4ZmZjOCxcclxuICBGMTI6IDB4ZmZjOSxcclxuICBTaGlmdExlZnQ6IDB4ZmZlMSxcclxuICBTaGlmdFJpZ2h0OiAweGZmZTIsXHJcbiAgQ29udHJvbExlZnQ6IDB4ZmZlMyxcclxuICBDb250cm9sUmlnaHQ6IDB4ZmZlNCxcclxuICBBbHRMZWZ0OiAweGZmZTksXHJcbiAgQWx0UmlnaHQ6IDB4ZmZlYSxcclxuICBNZXRhTGVmdDogMHhmZmU3LFxyXG4gIE1ldGFSaWdodDogMHhmZmU4XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFNVEtleUNvZGVUYWJsZVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBBdXRob3IgOiBSYW11IEJhY2hhbGFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCBBTVRLZXlDb2RlVGFibGUgZnJvbSAnLi9BTVRLZXlDb2RlVGFibGUnXHJcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi9VdGlsaXR5TWV0aG9kcydcclxuLyoqXHJcbiAqIFByb3ZpZGVzIGNvZGUgbG9va3VwIGZ1bmN0aW9ucyBmb3IgZGlmZmVyZW50IHNwZWNpYWwga2V5cyB0byBzZW5kIG92ZXIgdGhlIHNvY2tldC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBTVRLZXlDb2RlQ29udmVydGVyIHtcclxuICBzdGF0aWMgY29udmVydEFNVEtleUNvZGUgKGU6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoaXNUcnV0aHkoZS5jb2RlLnN0YXJ0c1dpdGgoJ0tleScpKSAmJiBlLmNvZGUubGVuZ3RoID09PSA0KSB7IHJldHVybiBlLmNvZGUuY2hhckNvZGVBdCgzKSArICgoZS5zaGlmdEtleSA9PT0gZmFsc2UpID8gMzIgOiAwKSB9XHJcbiAgICBpZiAoaXNUcnV0aHkoZS5jb2RlLnN0YXJ0c1dpdGgoJ0RpZ2l0JykpICYmIGUuY29kZS5sZW5ndGggPT09IDYpIHsgcmV0dXJuIGUuY29kZS5jaGFyQ29kZUF0KDUpIH1cclxuICAgIGlmIChpc1RydXRoeShlLmNvZGUuc3RhcnRzV2l0aCgnTnVtcGFkJykpICYmIGUuY29kZS5sZW5ndGggPT09IDcpIHsgcmV0dXJuIGUuY29kZS5jaGFyQ29kZUF0KDYpIH1cclxuICAgIHJldHVybiBBTVRLZXlDb2RlVGFibGVbZS5jb2RlIGFzIHN0cmluZ11cclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvd2VyT3B0aW9uUHJvcHMge1xyXG4gIGF2YWlsYWJsZU9wdGlvbnM6IGFueVxyXG4gIG9uQ2hhbmdlOiBhbnlcclxuICBpc1NlbGVjdGVkOiBib29sZWFuXHJcbiAgb25CbHVyPzogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUG93ZXJPcHRpb25zOiBSZWFjdC5TRkM8UG93ZXJPcHRpb25Qcm9wcz4gPSBwcm9wcyA9PiA8c2VsZWN0IG9uQ2xpY2s9e3Byb3BzLm9uQ2hhbmdlfSBuYW1lPSdQb3dlck9wdGlvbnMnPlxyXG4gIDxvcHRpb24gdmFsdWU9Jycgc2VsZWN0ZWQ9eyFwcm9wcy5pc1NlbGVjdGVkfT5DaG9vc2U8L29wdGlvbj5cclxuICB7cHJvcHMuYXZhaWxhYmxlT3B0aW9ucy5tYXAoKHsgdmFsdWUsIGxhYmVsIH0pID0+IChcclxuICAgIDxvcHRpb24ga2V5PXt2YWx1ZX0gdmFsdWU9e3ZhbHVlfT5cclxuICAgICAge2xhYmVsfVxyXG4gICAgPC9vcHRpb24+XHJcbiAgKSl9XHJcbjwvc2VsZWN0PlxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgZ2V0UG93ZXJTdGF0ZSB9IGZyb20gJy4uL3NlcnZpY2VzL1Bvd2VyQWN0aW9uU2VydmljZXMnXHJcbmltcG9ydCB7IERvbWFpbkNvbnRleHQgfSBmcm9tICcuL2NvbnRleHQvQmFzaWNDb250ZXh0UHJvdmlkZXInXHJcbmltcG9ydCB7IGlzRmFsc3kgfSBmcm9tICcuL1V0aWxpdGllcydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG93ZXJTdGF0ZVByb3BzIHtcclxuICBkZXZpY2VJZDogc3RyaW5nIHwgbnVsbFxyXG4gIHNlcnZlcjogc3RyaW5nIHwgbnVsbFxyXG4gIGhhbmRsZVBvd2VyU3RhdHVzOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZFxyXG4gIHVwZGF0ZVBhcmVudDogKCkgPT4gdm9pZFxyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJpYyBjbGFzcyB0byBmZXRjaCB0aGUgQU1UIERldmljZSBQb3dlciBzdGF0ZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBvd2VyU3RhdGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UG93ZXJTdGF0ZVByb3BzLCB7IHBvd2VyU3RhdGU6IG51bWJlciB9PiB7XHJcbiAgdGltZUludGVydmFsOiBhbnlcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgcG93ZXJTdGF0ZTogMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCk6IHZvaWQge1xyXG4gICAgdGhpcy5nZXRBbXRQb3dlclN0YXRlKClcclxuICAgIHRoaXMudGltZUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5nZXRBbXRQb3dlclN0YXRlKCksIDE1MDAwKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCk6IHZvaWQge1xyXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVJbnRlcnZhbClcclxuICB9XHJcblxyXG4gIC8qKiBGZXRjaCB0aGUgUG93ZXIgc3RhdGUgZnJvbSBBTVQgRGV2aWNlICovXHJcbiAgZ2V0QW10UG93ZXJTdGF0ZSA9ICgpOiBhbnkgPT4ge1xyXG4gICAgZ2V0UG93ZXJTdGF0ZSh0aGlzLnByb3BzLmRldmljZUlkLCB0aGlzLnByb3BzLnNlcnZlciwgdGhpcy5jb250ZXh0LmRhdGEubXBzS2V5KVxyXG4gICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZVBhcmVudCgpXHJcbiAgICAgICAgaWYgKGlzRmFsc3koZGF0YS5wb3dlcnN0YXRlKSkge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHBvd2VyU3RhdGU6IGRhdGEucG93ZXJzdGF0ZVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHBvd2VyU3RhdGU6IDEwMFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YS5wb3dlcnN0YXRlID09PSAyID8gdGhpcy5wcm9wcy5oYW5kbGVQb3dlclN0YXR1cygncG93ZXJvbicpIDogdGhpcy5zdGF0ZS5wb3dlclN0YXRlICE9PSAxMDAgPyB0aGlzLnByb3BzLmhhbmRsZVBvd2VyU3RhdHVzKCdzbGVlcCcpIDogdGhpcy5wcm9wcy5oYW5kbGVQb3dlclN0YXR1cygnZmFpbGVkJylcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ2Vycm9yJywgZXJyb3IpXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXJQb3dlclN0YXRlID0gKHBhcmFtKTogYW55ID0+IHtcclxuICAgIHN3aXRjaCAocGFyYW0pIHtcclxuICAgICAgY2FzZSAxOlxyXG4gICAgICBjYXNlIDEwOlxyXG4gICAgICBjYXNlIDExOlxyXG4gICAgICBjYXNlIDE0OlxyXG4gICAgICBjYXNlIDE3OlxyXG4gICAgICAgIHJldHVybiA8c3BhbiBzdHlsZT17eyBjb2xvcjogJ3JlZCcgfX0+T3RoZXI8L3NwYW4+XHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgICByZXR1cm4gPHNwYW4gc3R5bGU9e3sgY29sb3I6ICdncmVlbicgfX0+UG93ZXIgb248L3NwYW4+XHJcbiAgICAgIGNhc2UgMzpcclxuICAgICAgY2FzZSA0OlxyXG4gICAgICAgIHJldHVybiA8c3BhbiBzdHlsZT17eyBjb2xvcjogJ3JlZCcgfX0+ZGVlcCBzbGVlcDwvc3Bhbj5cclxuICAgICAgY2FzZSA1OlxyXG4gICAgICBjYXNlIDY6XHJcbiAgICAgIGNhc2UgODpcclxuICAgICAgY2FzZSA5OlxyXG4gICAgICBjYXNlIDEyOlxyXG4gICAgICBjYXNlIDEzOlxyXG4gICAgICBjYXNlIDE1OlxyXG4gICAgICBjYXNlIDE2OlxyXG4gICAgICAgIHJldHVybiA8c3BhbiBzdHlsZT17eyBjb2xvcjogJ3JlZCcgfX0+UG93ZXIgT2ZmPC9zcGFuPlxyXG4gICAgICBjYXNlIDc6XHJcbiAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT5IaWJlcm5hdGU8L3NwYW4+XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT5Vbmtub3duPC9zcGFuPlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpOiBSZWFjdC5SZWFjdE5vZGUge1xyXG4gICAgY29uc3QgeyBwb3dlclN0YXRlIH0gPSB0aGlzLnN0YXRlXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLnJlbmRlclBvd2VyU3RhdGUocG93ZXJTdGF0ZSlcclxuICAgIC8vIHBvd2VyU3RhdGUgPT09IDQgPyAoPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwicmVkXCIgfX0+ZGVlcCBzbGVlcCA8L3NwYW4+KSA6IHBvd2VyU3RhdGUgPT09IDIgPyAoPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiZ3JlZW5cIiB9fT5Qb3dlciBvbiA8L3NwYW4+KSA6ICg8c3Bhbj51bmtub3duPC9zcGFuPilcclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcblBvd2VyU3RhdGUuY29udGV4dFR5cGUgPSBEb21haW5Db250ZXh0XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMjBcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgU3R5bGUgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcbmltcG9ydCB7IGlzRmFsc3kgfSBmcm9tICcuL1V0aWxpdGllcydcclxuXHJcbmNvbnN0IENoZWNrYm94Q29udGFpbmVyID0gU3R5bGUuZGl2YFxyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG5gXHJcblxyXG5jb25zdCBJY29uID0gU3R5bGUuc3ZnYFxyXG4gIGZpbGw6IG5vbmU7XHJcbiAgc3Ryb2tlOiBncmVlbjtcclxuICBzdHJva2Utd2lkdGg6IDJweDtcclxuYFxyXG5cclxuY29uc3QgSGlkZGVuQ2hlY2tib3ggPSBTdHlsZS5pbnB1dC5hdHRycyh7IHR5cGU6ICdjaGVja2JveCcgfSlgXHJcbiAgYm9yZGVyOiAwO1xyXG4gIGNsaXA6IHJlY3QoMCAwIDAgMCk7XHJcbiAgY2xpcHBhdGg6IGluc2V0KDUwJSk7XHJcbiAgaGVpZ2h0OiAxcHg7XHJcbiAgbWFyZ2luOiAtMXB4O1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgcGFkZGluZzogMDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICB3aWR0aDogMXB4O1xyXG5gXHJcblxyXG5jb25zdCBTdHlsZWRDaGVja2JveCA9IFN0eWxlLmRpdmBcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgd2lkdGg6IDE2cHg7XHJcbiAgaGVpZ2h0OiAxNnB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgZGlzYWJsZUNoZWNrYm94IH0pID0+IGdldENvbG9yKGRpc2FibGVDaGVja2JveCl9O1xyXG4gIGJvcmRlci1yYWRpdXM6IDFweCBzb2xpZCBibGFjaztcclxuICB0cmFuc2l0aW9uOiBhbGwgMTUwbXM7XHJcblxyXG4gICR7SGlkZGVuQ2hlY2tib3h9OmZvY3VzICsgJiB7XHJcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggd2hpdGU7XHJcbiAgfVxyXG5cclxuICAke0ljb259IHtcclxuICAgIHZpc2liaWxpdHk6ICR7cHJvcHMgPT4gKGlzRmFsc3kocHJvcHMuY2hlY2tlZCkgPyAndmlzaWJsZScgOiAnaGlkZGVuJyl9XHJcbiAgfVxyXG5gXHJcblxyXG5jb25zdCBnZXRDb2xvciA9IChkaXNhYmxlQ2hlY2tib3gpOiBzdHJpbmcgPT4gZGlzYWJsZUNoZWNrYm94ID09PSB0cnVlID8gJyNjY2MnIDogJ3doaXRlJ1xyXG4vKiogR2VuZXJpYyBwcmVzZW50YXRpb25hbCBmdW5jdGlvbiBmb3IgQ2hlY2tib3ggKi9cclxuZXhwb3J0IGNvbnN0IENoZWNrYm94ID0gKHsgY2xhc3NOYW1lLCBjaGVja2VkLCBkaXNhYmxlQ2hlY2tib3gsIC4uLnByb3BzIH0pOiBKU1guRWxlbWVudCA9PiAoXHJcbiAgPENoZWNrYm94Q29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cclxuICAgIDxIaWRkZW5DaGVja2JveCBjaGVja2VkPXtjaGVja2VkfSB7Li4ucHJvcHN9IGRpc2FibGVkPXtkaXNhYmxlQ2hlY2tib3h9Lz5cclxuICAgIDxTdHlsZWRDaGVja2JveCBjaGVja2VkPXtjaGVja2VkfSBkaXNhYmxlQ2hlY2tib3g9e2Rpc2FibGVDaGVja2JveH0+XHJcbiAgICAgIDxJY29uIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cclxuICAgICAgICA8cG9seWxpbmUgcG9pbnRzPVwiMjAgNiA5IDE3IDQgMTJcIiAvPlxyXG4gICAgICA8L0ljb24+XHJcbiAgICA8L1N0eWxlZENoZWNrYm94PlxyXG4gIDwvQ2hlY2tib3hDb250YWluZXI+XHJcbilcclxuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYW10ZmVhdHVyZXMuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDIwXHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IGdldEFtdEZlYXR1cmVzLCBzZXRBbXRGZWF0dXJlcyB9IGZyb20gJy4uL3NlcnZpY2VzL0FtdEZlYXR1cmVzU2VydmljZXMnXHJcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnLi4vc2hhcmVkL0NoZWNrYm94J1xyXG5pbXBvcnQgU25hY2tCYXIgZnJvbSAnLi4vc2hhcmVkL1NuYWNrQmFyJ1xyXG5pbXBvcnQgeyB0cmFuc2xhdGVUZXh0LCB0cmFuc2xhdGVEeW5hbWljVGV4dCB9IGZyb20gJy4vTWV0aG9kcydcclxuXHJcbmltcG9ydCAnLi9hbXRmZWF0dXJlcy5zY3NzJ1xyXG5pbXBvcnQgeyBEb21haW5Db250ZXh0IH0gZnJvbSAnLi9jb250ZXh0L0Jhc2ljQ29udGV4dFByb3ZpZGVyJ1xyXG5cclxuLyoqXHJcbiAqIGludGVyZmFjZSBmb3IgaW5wdXQgcHJvcHMgdG8gQU1URmVhdHVyZXMgY2xhc3NcclxuICogZGV2aWNlSWQgLS0gZ3VpZCBvZiB0aGUgQU1UIGRldmljZVxyXG4gKiBzZXJ2ZXIgLS0gTVBTIHNlcnZlciBhZGRyZXNzKElQOnBvcnQpXHJcbiAqIGZlYXR1cmUgLS0gSW5kaWNhdGVzIHdoaWNoIGNvbnRyb2wgaXMgYmVpbmcgYWNjZXNzZWQoS1ZNLCBTT0wpXHJcbiAqIGhhbmRsZUZlYXR1cmVTdGF0dXMgLS0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBTbmFja0JhciBtZXNzYWdlc1xyXG4gKiBnZXRDb25uZWN0U3RhdGUgLS0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZ2V0IHRoZSBLVk0gb3IgU09MIGNvbm5lY3Rpb24gc3RhdGVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQW10RmVhdHVyZVByb3BzIHtcclxuICBkZXZpY2VJZDogc3RyaW5nIHwgbnVsbFxyXG4gIHNlcnZlcjogc3RyaW5nIHwgbnVsbFxyXG4gIGZlYXR1cmU6IHN0cmluZ1xyXG4gIGhhbmRsZUZlYXR1cmVTdGF0dXM6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgZ2V0Q29ubmVjdFN0YXRlOiAoKSA9PiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBbXRGZWF0dXJlU3RhdGUge1xyXG4gIGNoZWNrZWQ6IGJvb2xlYW5cclxuICB1c2VyQ29uc2VudDogc3RyaW5nXHJcbiAgdXNlS1ZNOiBib29sZWFuXHJcbiAgdXNlU09MOiBib29sZWFuXHJcbiAgdXNlSURFUjogYm9vbGVhblxyXG4gIHJlZGlyZWN0aW9uOiBib29sZWFuXHJcbiAgc2hvd01lc3NhZ2U6IGJvb2xlYW5cclxuICBtZXNzYWdlOiBzdHJpbmdcclxuICB0eXBlOiBzdHJpbmdcclxufVxyXG5cclxuLyoqIEdlbmVyaWMgY2xhc3MgdG8gZ2V0IGFuZCBzZXQgdGhlIEFNVCBmZWF0dXJlcyBsaWtlIEtWTSwgU09MXHJcbiAqIGZlYXR1cmUgcHJvcCBmb3IgdGhpcyBjbGFzcyBkZXRlcm1pbmVzIHdoZXRoZXIgd2UgYXJlIG9uIEtWTSBvciBTT0wgcGFnZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFtdEZlYXR1cmVzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEFtdEZlYXR1cmVQcm9wcywgQW10RmVhdHVyZVN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGNoZWNrZWQ6IGZhbHNlLFxyXG4gICAgICB1c2VyQ29uc2VudDogJycsXHJcbiAgICAgIHVzZUtWTTogZmFsc2UsXHJcbiAgICAgIHVzZVNPTDogZmFsc2UsXHJcbiAgICAgIHVzZUlERVI6IGZhbHNlLFxyXG4gICAgICByZWRpcmVjdGlvbjogZmFsc2UsXHJcbiAgICAgIHNob3dNZXNzYWdlOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgIHR5cGU6ICcnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmZldGNoQW10RmVhdHVyZXMoKVxyXG4gIH1cclxuXHJcbiAgLyoqIEdldCB0aGUgQU1UIERldmljZSBmZWF0dXJlcyAgKi9cclxuICBmZXRjaEFtdEZlYXR1cmVzID0gKCk6IGFueSA9PiB7XHJcbiAgICBjb25zdCBtcHNTZXJ2ZXI6IHN0cmluZyA9IHRoaXMucHJvcHMuc2VydmVyICE9IG51bGwgPyB0aGlzLnByb3BzLnNlcnZlciA6ICcnXHJcbiAgICBnZXRBbXRGZWF0dXJlcyh0aGlzLnByb3BzLmRldmljZUlkLCBtcHNTZXJ2ZXIsIHRoaXMuY29udGV4dC5kYXRhLm1wc0tleSlcclxuICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgdXNlckNvbnNlbnQ6IGRhdGEucGF5bG9hZC51c2VyQ29uc2VudCxcclxuICAgICAgICAgICAgdXNlS1ZNOiBkYXRhLnBheWxvYWQuS1ZNLFxyXG4gICAgICAgICAgICB1c2VTT0w6IGRhdGEucGF5bG9hZC5TT0wsXHJcbiAgICAgICAgICAgIHVzZUlERVI6IGRhdGEucGF5bG9hZC5JREVSLFxyXG4gICAgICAgICAgICByZWRpcmVjdGlvbjogZGF0YS5wYXlsb2FkLnJlZGlyZWN0aW9uXHJcbiAgICAgICAgICB9LCAoKSA9PiB0aGlzLnVwZGF0ZUNoZWNrYm94U3RhdHVzKCkpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRmVhdHVyZVN0YXR1cygnZmFpbGVkJylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICAuY2F0Y2goKCkgPT4gY29uc29sZS5pbmZvKCdlcnJvcicpKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAgKiBCaW5kIHRoZSBjaGVja2JveCBzdGF0dXMgYmFzZWQgb24gdGhlIGZlYXR1cmUgYW5kIHRoZSBmZWF0dXJlIHJlc3BvbnNlIGZyb20gdGhlIEFNVCBkZXZpY2VcclxuICAgICAqL1xyXG4gIHVwZGF0ZUNoZWNrYm94U3RhdHVzID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgeyBmZWF0dXJlIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCB7IHVzZUtWTSwgdXNlU09MLCB1c2VJREVSLCByZWRpcmVjdGlvbiB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgaWYgKHJlZGlyZWN0aW9uICYmICgoZmVhdHVyZSA9PT0gdHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMuZmVhdHVyZXMua3ZtJykgJiYgdXNlS1ZNKSB8fCAoZmVhdHVyZSA9PT0gdHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMuZmVhdHVyZXMuc29sJykgJiYgdXNlU09MKSB8fCAoZmVhdHVyZSA9PT0gJ0lERVInICYmIHVzZUlERVIpKSkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBjaGVja2VkOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICAgIHRoaXMucHJvcHMuaGFuZGxlRmVhdHVyZVN0YXR1cygnZW5hYmxlZCcpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnByb3BzLmhhbmRsZUZlYXR1cmVTdGF0dXMoJ25vdEVuYWJsZWQnKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIFNldCBBTVQgZmVhdHVyZXMgb24gY2xpY2sgb2YgY2hlY2tib3ggKi9cclxuICBzZXRBbXRGZWF0dXJlID0gKCk6IGFueSA9PiB7XHJcbiAgICBjb25zdCB7IGRldmljZUlkLCBmZWF0dXJlLCBzZXJ2ZXIsIGhhbmRsZUZlYXR1cmVTdGF0dXMgfSA9IHRoaXMucHJvcHNcclxuICAgIGNvbnN0IHsgdXNlS1ZNLCB1c2VJREVSLCB1c2VTT0wsIGNoZWNrZWQgfSA9IHRoaXMuc3RhdGVcclxuICAgIGNvbnN0IGZlYXR1cmVTdGF0dXNUZXh0ID0gY2hlY2tlZCA/IHRyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLmVuYWJsZWQnKSA6IHRyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLmRpc2FibGVkJylcclxuICAgIGNvbnN0IG1wc1NlcnZlcjogc3RyaW5nID0gc2VydmVyICE9IG51bGwgPyBzZXJ2ZXIgOiAnJ1xyXG4gICAgaGFuZGxlRmVhdHVyZVN0YXR1cygnZW5hYmxlZCcpXHJcbiAgICBjb25zdCB0cmFuc2xhdGUgPSB7XHJcbiAgICAgIGZlYXR1cmU6IGZlYXR1cmUsXHJcbiAgICAgIGZlYXR1cmVUZXh0OiBmZWF0dXJlU3RhdHVzVGV4dFxyXG4gICAgfVxyXG4gICAgc2V0QW10RmVhdHVyZXMoZGV2aWNlSWQsICdub25lJywgdXNlS1ZNLCB1c2VTT0wsIHVzZUlERVIsIG1wc1NlcnZlciwgdGhpcy5jb250ZXh0LmRhdGEubXBzS2V5KVxyXG4gICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICBpZiAoZGF0YS5zdGF0dXNjb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93TWVzc2FnZTogdHJ1ZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRlRHluYW1pY1RleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZlYXR1cmVTdWNjZXNzJywgdHJhbnNsYXRlKSxcclxuICAgICAgICAgICAgdHlwZTogdHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZVR5cGVzLnN1Y2Nlc3MnKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNob3dNZXNzYWdlOiB0cnVlLFxyXG4gICAgICAgICAgICBjaGVja2VkOiAhY2hlY2tlZCxcclxuICAgICAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRlRHluYW1pY1RleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLnVwZGF0ZUZhaWxlZCcsIHRyYW5zbGF0ZSksXHJcbiAgICAgICAgICAgIHR5cGU6IHRyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VUeXBlcy5lcnJvcicpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZXRUaW1lb3V0KFxyXG4gICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICBzaG93TWVzc2FnZTogZmFsc2VcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gc2hvd3MgZmVhdHVyZSBub3QgZW5hYmxlZCBtZXNzYWdlIGlmIGNoZWNrYm94IHZhbHVlIGlzIG5vdCB0cnVlXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5jaGVja2VkKSB0aGlzLnByb3BzLmhhbmRsZUZlYXR1cmVTdGF0dXMoJ25vdEVuYWJsZWQnKVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIDQwMDBcclxuICAgICAgICApXHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmluZm8oJ2Vycm9yJywgZXJyb3IpKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGNoZWNrYm94IHN0YXR1cyBhbmQgdGhlIGZlYXR1cmUoS1ZNLCBTT0wpIG9uIGNsaWNrIG9mIGNoZWNrYm94IGJlZm9yZSBtYWtpbmcgdGhlIFJlc3QgQVBJXHJcbiAgICAgKiByZXF1ZXN0IHRvIFNldCB0aGUgQU1UIGZlYXR1cmVzXHJcbiAgICAgKi9cclxuICBoYW5kbGVDaGVja2JveENoYW5nZSA9IChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgc3dpdGNoICh0aGlzLnByb3BzLmZlYXR1cmUpIHtcclxuICAgICAgY2FzZSAnS1ZNJzpcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGNoZWNrZWQ6IGV2ZW50LnRhcmdldC5jaGVja2VkLFxyXG4gICAgICAgICAgdXNlS1ZNOiBldmVudC50YXJnZXQuY2hlY2tlZFxyXG4gICAgICAgIH0sICgpID0+IHRoaXMuc2V0QW10RmVhdHVyZSgpKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1NPTCc6XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBjaGVja2VkOiBldmVudC50YXJnZXQuY2hlY2tlZCxcclxuICAgICAgICAgIHVzZVNPTDogZXZlbnQudGFyZ2V0LmNoZWNrZWRcclxuICAgICAgICB9LCAoKSA9PiB0aGlzLnNldEFtdEZlYXR1cmUoKSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdJREVSJzpcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGNoZWNrZWQ6IGV2ZW50LnRhcmdldC5jaGVja2VkLFxyXG4gICAgICAgICAgdXNlSURFUjogZXZlbnQudGFyZ2V0LmNoZWNrZWRcclxuICAgICAgICB9LCAoKSA9PiB0aGlzLnNldEFtdEZlYXR1cmUoKSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgY2hlY2tlZDogZXZlbnQudGFyZ2V0LmNoZWNrZWRcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpOiBSZWFjdC5SZWFjdE5vZGUge1xyXG4gICAgY29uc3QgeyBmZWF0dXJlIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCB7IHNob3dNZXNzYWdlLCBtZXNzYWdlLCB0eXBlIH0gPSB0aGlzLnN0YXRlXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIHtzaG93TWVzc2FnZSAmJiA8U25hY2tCYXJcclxuICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XHJcbiAgICAgICAgICB0eXBlPXt0eXBlfVxyXG4gICAgICAgIC8+fVxyXG4gICAgICAgIDxsYWJlbD5cclxuICAgICAgICAgIDxDaGVja2JveFxyXG4gICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmNoZWNrZWR9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoZWNrYm94Q2hhbmdlfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2NoZWNrYm94LWNsYXNzJ1xyXG4gICAgICAgICAgICBkaXNhYmxlQ2hlY2tib3g9e3RoaXMucHJvcHMuZ2V0Q29ubmVjdFN0YXRlKCkgPT09IDJ9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgbGFiZWwtdGV4dCAke3RoaXMucHJvcHMuZ2V0Q29ubmVjdFN0YXRlKCkgPT09IDIgPyAnZ3JleS1sYWJlbCcgOiAnJ31gfT57ZmVhdHVyZX0ge3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLmVuYWJsZWQnKX08L3NwYW4+XHJcbiAgICAgICAgPC9sYWJlbD5cclxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbkFtdEZlYXR1cmVzLmNvbnRleHRUeXBlID0gRG9tYWluQ29udGV4dFxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDIwXHJcbiogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICcuL0h0dHBDbGllbnQnXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QW10RmVhdHVyZXMgPSBhc3luYyAoZ3VpZCwgbXBzU2VydmVyOiBzdHJpbmcsIGFwaUtleSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcclxuICAgIGFwaWtleTogJ3h4eHh4JyxcclxuICAgIG1ldGhvZDogJ0dldEFNVEZlYXR1cmVzJyxcclxuICAgIHBheWxvYWQ6IHsgZ3VpZCB9XHJcbiAgfSlcclxuXHJcbiAgcmV0dXJuIGF3YWl0IEh0dHBDbGllbnQucG9zdChgaHR0cHM6Ly8ke21wc1NlcnZlcn0vYW10YCwgYm9keSwgYXBpS2V5LCB0cnVlKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0QW10RmVhdHVyZXMgPSBhc3luYyAoZ3VpZCwgdXNlckNvbnNlbnQsIGVuYWJsZUtWTSwgZW5hYmxlU09MLCBlbmFibGVJREVSLCBtcHNTZXJ2ZXI6IHN0cmluZywgYXBpS2V5KTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgYXBpa2V5OiAneHh4eHgnLFxyXG4gICAgbWV0aG9kOiAnU2V0QU1URmVhdHVyZXMnLFxyXG4gICAgcGF5bG9hZDoge1xyXG4gICAgICBndWlkLCB1c2VyQ29uc2VudCwgZW5hYmxlS1ZNLCBlbmFibGVTT0wsIGVuYWJsZUlERVJcclxuICAgIH1cclxuICB9KVxyXG5cclxuICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5wb3N0KGBodHRwczovLyR7bXBzU2VydmVyfS9hbXRgLCBib2R5LCBhcGlLZXksIHRydWUpXHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgSVN0YXRlUHJvY2Vzc29yIH0gZnJvbSAnLi4vSVN0YXRlUHJvY2Vzc29yJ1xyXG5pbXBvcnQgeyBJRGF0YVByb2Nlc3NvciB9IGZyb20gJy4uL0lEYXRhUHJvY2Vzc29yJ1xyXG5pbXBvcnQgeyBTdGF0ZVByb2Nlc3NvckZhY3RvcnkgfSBmcm9tICcuLi9TdGF0ZVByb2Nlc3NvckZhY3RvcnknXHJcbmltcG9ydCB7IElDb21tdW5pY2F0b3IgfSBmcm9tICcuLi9JQ29tbXVuaWNhdG9yJ1xyXG5pbXBvcnQgeyBEZXNrdG9wIH0gZnJvbSAnLi4vRGVza3RvcCdcclxuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4uL0lMb2dnZXInXHJcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi4vVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzJ1xyXG5cclxuLyoqXHJcbiAqIERhdGFQcm9jZXNzb3IgcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHkgZm9yIHByb2Nlc3NpbmcgZGlmZmVyZW50IHN0YXRlcyBvZiBSRkIgbGV2ZXJhZ2luZ1xyXG4gKiB0aGUgZGlmZmVyZW50IFN0YXRlUHJvY2Vzc29yc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhdGFQcm9jZXNzb3IgaW1wbGVtZW50cyBJRGF0YVByb2Nlc3NvciB7XHJcbiAgYWNjOiBzdHJpbmdcclxuICByZW1vdGVGcmFtZUJ1ZmZlclN0YXRlTWFuYWdlcjogSVN0YXRlUHJvY2Vzc29yXHJcbiAgc3RhdGVQcm9jZXNzb3JGYWM6IFN0YXRlUHJvY2Vzc29yRmFjdG9yeVxyXG4gIHBhcmVudDogRGVza3RvcFxyXG4gIGxvZ2dlcjogSUxvZ2dlclxyXG4gIGNvbnN0cnVjdG9yIChsb2dnZXI6IElMb2dnZXIsIGNvbW06IElDb21tdW5pY2F0b3IsIHBhcmVudDogRGVza3RvcCkge1xyXG4gICAgdGhpcy5hY2MgPSAnJ1xyXG4gICAgdGhpcy5zdGF0ZVByb2Nlc3NvckZhYyA9IG5ldyBTdGF0ZVByb2Nlc3NvckZhY3RvcnkoY29tbSwgcGFyZW50LCB0aGlzLnVwZGF0ZVJGQlN0YXRlLmJpbmQodGhpcykpXHJcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxyXG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXJcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHByb2Nlc3NEYXRhIGlzIGNhbGxlZCBmcm9tIElDb21tdW5pY2F0b3Igb24gbmV3IGRhdGEgY29taW5nIG92ZXIgdGhlIHdpcmVcclxuICAgKiBAcGFyYW0gZGF0YSBpcyB0aGUgY3VycmVudCBkYXRhIGJsb2NrIHJlY2VpdmVkIG9uIHRoZSB3ZWIgc29ja2V0XHJcbiAgICovXHJcbiAgcHJvY2Vzc0RhdGEgKGRhdGE6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoIWlzVHJ1dGh5KGRhdGEpKSByZXR1cm5cclxuICAgIHRoaXMuYWNjICs9IGRhdGFcclxuICAgIGxldCBjbWRTaXplID0gMFxyXG4gICAgdGhpcy5sb2dnZXIudmVyYm9zZShgUHJvY2VzcyBEYXRhIEFDQyBsZW5ndGg6ICAke3RoaXMuYWNjLmxlbmd0aH1gKVxyXG4gICAgd2hpbGUgKHRoaXMuYWNjLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3Qgc3RhdGVQcm9jZXNzb3I6IElTdGF0ZVByb2Nlc3NvciA9IHRoaXMuc3RhdGVQcm9jZXNzb3JGYWMuZ2V0UHJvY2Vzc29yKHRoaXMucGFyZW50LnN0YXRlKVxyXG4gICAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnBhcmVudC5zdGF0ZVxyXG4gICAgICBjbWRTaXplID0gc3RhdGVQcm9jZXNzb3IucHJvY2Vzc1N0YXRlKHRoaXMuYWNjKVxyXG4gICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKGBTdGF0ZSAgJHtwcmV2U3RhdGV9ICBQcm9jZXNzZWQuIGNtZFNpemUgcmV0dXJuZWQgJHtjbWRTaXplfWApXHJcbiAgICAgIGlmIChjbWRTaXplID09PSAwKSByZXR1cm5cclxuICAgICAgLy8gY29uc29sZS5sb2coJ2JlZm9yZSBhY2MgJywgdGhpcy5hY2MpXHJcbiAgICAgIHRoaXMuYWNjID0gdGhpcy5hY2Muc3Vic3RyaW5nKGNtZFNpemUpXHJcbiAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYHJlbWFpbmluZyBhY2MgICR7dGhpcy5hY2MubGVuZ3RofSBjb21tYW5kIHNpemU6ICR7Y21kU2l6ZX0gbmV3IHBhcmVudCBzdGF0ZTogJHt0aGlzLnBhcmVudC5zdGF0ZX1gKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUkZCU3RhdGUgKHN0YXRlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMucGFyZW50LnN0YXRlID0gc3RhdGVcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBBTVRSZWRpcmVjdG9yIH0gZnJvbSAnLi9BTVRSZWRpcmVjdG9yJ1xyXG5pbXBvcnQgeyBJS3ZtRGF0YUNvbW11bmljYXRvciB9IGZyb20gJy4vSUNvbW11bmljYXRvcidcclxuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4vSUxvZ2dlcidcclxuXHJcbmV4cG9ydCBjbGFzcyBBTVRLdm1EYXRhUmVkaXJlY3RvciBleHRlbmRzIEFNVFJlZGlyZWN0b3IgaW1wbGVtZW50cyBJS3ZtRGF0YUNvbW11bmljYXRvciB7XHJcbiAgb25TZW5kS3ZtRGF0YTogKGRhdGE6IHN0cmluZykgPT4gdm9pZFxyXG4gIGNvbnN0cnVjdG9yIChsb2dnZXI6IElMb2dnZXIsIHByb3RvY29sOiBudW1iZXIsIGZyOiBGaWxlUmVhZGVyLCBob3N0OiBzdHJpbmcsIHBvcnQ6IG51bWJlciwgdXNlcjogc3RyaW5nLCBwYXNzOiBzdHJpbmcsIHRsczogbnVtYmVyLCB0bHMxb25seTogbnVtYmVyLCBzZXJ2ZXI/OiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKGxvZ2dlciwgcHJvdG9jb2wsIGZyLCBob3N0LCBwb3J0LCB1c2VyLCBwYXNzLCB0bHMsIHRsczFvbmx5LCBzZXJ2ZXIpXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgRGVza3RvcCB9IGZyb20gJy4vRGVza3RvcCdcclxuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4vSUxvZ2dlcidcclxuaW1wb3J0IHsgVHlwZUNvbnZlcnRlciB9IGZyb20gJy4uL2NvcmUvQ29udmVydGVyJ1xyXG5pbXBvcnQgeyBpc1RydXRoeSB9IGZyb20gJy4vVXRpbGl0aWVzL1V0aWxpdHlNZXRob2RzJ1xyXG5pbXBvcnQgWkxJQiBmcm9tICcuLi9jb3JlL3psaWIvemxpYidcclxuXHJcbi8qKlxyXG4gKiBBTVREZXNrdG9wIHJlcHJlc2VudHMgdGhlIERlc2t0b3Agb24gdGhlIGJyb3dzZXIuIENvbnN0cnVjdGVkIHVzaW5nIHRoZSBjYW52YXMgY29udGV4dC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBTVREZXNrdG9wIGV4dGVuZHMgRGVza3RvcCB7XHJcbiAgcm90YXRpb246IG51bWJlclxyXG4gIHVzZVpSTEU6IGJvb2xlYW5cclxuICBvbGRNb3VzZVg6IG51bWJlclxyXG4gIG9sZE1vdXNlWTogbnVtYmVyXHJcbiAgbGFzdE1vdXNlWDogbnVtYmVyXHJcbiAgbGFzdE1vdXNlWTogbnVtYmVyXHJcbiAgYnBwOiBudW1iZXIgLy8gQnl0ZXMgcGVyIHBpeGVsXHJcbiAga3ZtRGF0YVN1cHBvcnRlZDogYm9vbGVhblxyXG4gIG9uS3ZtRGF0YUFjazogYW55XHJcbiAgdXJsdmFyczogYW55XHJcbiAgb25Ldm1EYXRhUGVuZGluZzogYW55W11cclxuICBzcGFyZXc6IG51bWJlclxyXG4gIHNwYXJlaDogbnVtYmVyXHJcbiAgc3BhcmV3MjogbnVtYmVyXHJcbiAgc3BhcmVoMjogbnVtYmVyXHJcbiAgc3BhcmU6IGFueVxyXG4gIHNwYXJlY2FjaGU6IGFueVxyXG4gIGZyYW1lUmF0ZURlbGF5OiBudW1iZXJcclxuICBpbmZsYXRlOiBhbnlcclxuICBsb2dnZXI6IElMb2dnZXJcclxuICBob2xkaW5nOiBib29sZWFuXHJcbiAgY2FudmFzQ3R4OiBhbnlcclxuICB0Y2FudmFzOiBhbnlcclxuICB3aWR0aDogbnVtYmVyXHJcbiAgaGVpZ2h0OiBudW1iZXJcclxuICBjYW52YXNJZDogc3RyaW5nXHJcbiAgZm9jdXNNb2RlOiBudW1iZXJcclxuICByd2lkdGg6IG51bWJlclxyXG4gIHJoZWlnaHQ6IG51bWJlclxyXG4gIFNjcmVlbldpZHRoOiBudW1iZXJcclxuICBTY3JlZW5IZWlnaHQ6IG51bWJlclxyXG4gIGxhc3RLZWVwQWxpdmU6IG51bWJlclxyXG4gIGJ1dHRvbm1hc2s6IG51bWJlclxyXG4gIHN0YXRlOiBudW1iZXJcclxuICBjYW52YXNDb250cm9sOiBhbnlcclxuICBzY3JvbGxkaXY6IGFueVxyXG4gIGxhc3RNb3VzZVgyOiBudW1iZXJcclxuICBub01vdXNlUm90YXRlOiBib29sZWFuXHJcbiAgdXBkYXRlU2NyZWVuRGltZW5zaW9uczogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkXHJcbiAgb25Ldm1EYXRhOiAoZGF0YTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgb25TY3JlZW5SZXNpemU6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgY2FudmFzSWQ6IHN0cmluZykgPT4gdm9pZFxyXG4gIG9uU2NyZWVuU2l6ZUNoYW5nZTogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkXHJcbiAgc2V0RGVza0ZvY3VzOiAoZWw6IHN0cmluZywgZm9jdXNtb2RlOiBudW1iZXIpID0+IHZvaWRcclxuICBnZXREZXNrRm9jdXM6IChlbDogc3RyaW5nKSA9PiBhbnlcclxuXHJcbiAgcHJvdG9jb2w6IG51bWJlciA9IDJcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0cyB0aGUgQU1UIERlc2t0b3BcclxuICAgKiBAcGFyYW0gbG9nZ2VyIGxvZ2dlciB0byB1c2UgZm9yIGludGVybmFsIGxvZ2dpbmdcclxuICAgKiBAcGFyYW0gY3R4IENhbnZhcyBDb250ZXh0IHRvIGRyYXcgaW1hZ2VzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IgKGxvZ2dlcjogSUxvZ2dlciwgY3R4OiBhbnkpIHtcclxuICAgIHN1cGVyKClcclxuICAgIHRoaXMuaW5mbGF0ZSA9IFpMSUIuaW5mbGF0ZUluaXQoMTUpXHJcbiAgICB0aGlzLmJwcCA9IDFcclxuICAgIHRoaXMuc3RhdGUgPSAwXHJcbiAgICB0aGlzLmZvY3VzTW9kZSA9IDBcclxuICAgIHRoaXMudXNlWlJMRSA9IHRydWVcclxuICAgIHRoaXMuZnJhbWVSYXRlRGVsYXkgPSAyXHJcbiAgICB0aGlzLmNhbnZhc0N0eCA9IGN0eFxyXG4gICAgdGhpcy5zcGFyZWNhY2hlID0ge31cclxuICAgIHRoaXMuYnV0dG9ubWFzayA9IDBcclxuICAgIHRoaXMuY2FudmFzQ29udHJvbCA9IHRoaXMuY2FudmFzQ3R4LmNhbnZhc1xyXG4gICAgdGhpcy5sYXN0TW91c2VNb3ZlVGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcclxuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyXHJcbiAgICB0aGlzLnNldERlc2tGb2N1cyA9IChlbCwgbW9kZSkgPT4ge1xyXG5cclxuICAgIH1cclxuICAgIHRoaXMuZ2V0RGVza0ZvY3VzID0gKGVsKSA9PiB7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW5cclxuICAgKiBAcGFyYW0gZGF0YSBkYXRhIHRvIGZvcndhcmQgdG8gRGF0YVByb2Nlc3NvclxyXG4gICAqL1xyXG4gIHByb2Nlc3NEYXRhIChkYXRhOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMub25Qcm9jZXNzRGF0YShkYXRhKVxyXG4gIH1cclxuXHJcbiAgb25TdGF0ZUNoYW5nZSAoc3RhdGU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5sb2dnZXIudmVyYm9zZShgc3RhdGUgY2hhbmdlIGluIEFNVERlc2t0b3A6ICR7c3RhdGV9YClcclxuICAgIGlmIChzdGF0ZSA9PT0gMCkge1xyXG4gICAgICAvLyBDbGVhciBDYW52YXNcclxuICAgICAgdGhpcy5jYW52YXNDdHguZmlsbFN0eWxlID0gJyNGRkZGRkYnXHJcbiAgICAgIHRoaXMuY2FudmFzQ3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMuY2FudmFzQ3R4LmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXNDdHguY2FudmFzLndpZHRoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnQgKCk6IHZvaWQge1xyXG4gICAgdGhpcy5sb2dnZXIudmVyYm9zZSgnU3RhcnRpbmcgZGVza3RvcCBoZXJlJylcclxuICAgIHRoaXMuc3RhdGUgPSAwXHJcbiAgICB0aGlzLmluZmxhdGUuaW5mbGF0ZVJlc2V0KClcclxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuaW5mbGF0ZSlcclxuICAgIC8vIHRoaXMuWlJMRWZpcnN0ID0gMTtcclxuICAgIC8vIG9iai5pbmJ5dGVzID0gMDtcclxuICAgIC8vIG9iai5vdXRieXRlcyA9IDA7XHJcbiAgICB0aGlzLm9uS3ZtRGF0YVBlbmRpbmcgPSBbXVxyXG4gICAgdGhpcy5vbkt2bURhdGFBY2sgPSAtMVxyXG4gICAgdGhpcy5rdm1EYXRhU3VwcG9ydGVkID0gZmFsc2VcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcclxuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLnNwYXJlY2FjaGUpIHsgZGVsZXRlIHRoaXMuc3BhcmVjYWNoZVtpXSB9XHJcbiAgfVxyXG5cclxuICBvblNlbmRLdm1EYXRhIChkYXRhOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm9uS3ZtRGF0YUFjayAhPT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLm9uS3ZtRGF0YVBlbmRpbmcucHVzaChkYXRhKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGlzVHJ1dGh5KHRoaXMudXJsdmFycykgJiYgaXNUcnV0aHkodGhpcy51cmx2YXJzLmt2bWRhdGF0cmFjZSkpIHsgY29uc29sZS5sb2coYEtWTS1TZW5kICgke2RhdGEubGVuZ3RofSkgZGF0YWApIH1cclxuICAgICAgZGF0YSA9ICdcXDBLdm1EYXRhQ2hhbm5lbFxcMCcgKyBkYXRhXHJcbiAgICAgIHRoaXMub25TZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUoNiwgMCwgMCwgMCkgKyBUeXBlQ29udmVydGVyLkludFRvU3RyKGRhdGEubGVuZ3RoKSArIGRhdGEpXHJcbiAgICAgIHRoaXMub25Ldm1EYXRhQWNrID0gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uU2VuZDogKGRhdGE6IHN0cmluZykgPT4gdm9pZFxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgSUNvbW11bmljYXRvciB9IGZyb20gJy4uL0lDb21tdW5pY2F0b3InXHJcbmltcG9ydCB7IERlc2t0b3AgfSBmcm9tICcuLi9EZXNrdG9wJ1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnLi4vQ29udmVydGVyJ1xyXG5pbXBvcnQgeyBJbWFnZUhlbHBlciB9IGZyb20gJy4vSW1hZ2VIZWxwZXInXHJcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnLi9VdGlsaXR5TWV0aG9kcydcclxuXHJcbi8qKlxyXG4gKiBNb3VzZWhlbHBlciBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBtb3VzZSBldmVudHMuIG1vdXNldXAsIG1vdXNlZG93biwgbW91c2Vtb3ZlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW91c2VIZWxwZXIge1xyXG4gIHBhcmVudDogRGVza3RvcCB8IGFueVxyXG4gIGNvbW06IElDb21tdW5pY2F0b3JcclxuICBNb3VzZUlucHV0R3JhYjogYm9vbGVhblxyXG4gIGxhc3RFdmVudDogYW55XHJcbiAgZGVib3VuY2VUaW1lOiBudW1iZXJcclxuICBtb3VzZUNsaWNrQ29tcGxldGVkOiBib29sZWFuXHJcbiAgY29uc3RydWN0b3IgKHBhcmVudDogRGVza3RvcCwgY29tbTogSUNvbW11bmljYXRvciwgZGVib3VuY2VUaW1lOiBudW1iZXIpIHtcclxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50XHJcbiAgICB0aGlzLmNvbW0gPSBjb21tXHJcbiAgICB0aGlzLmRlYm91bmNlVGltZSA9IGRlYm91bmNlVGltZVxyXG4gICAgdGhpcy5tb3VzZUNsaWNrQ29tcGxldGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5sYXN0RXZlbnQgPSBudWxsXHJcbiAgfVxyXG5cclxuICBHcmFiTW91c2VJbnB1dCAoKTogYW55IHtcclxuICAgIGlmICh0aGlzLk1vdXNlSW5wdXRHcmFiKSByZXR1cm5cclxuICAgIHRoaXMuTW91c2VJbnB1dEdyYWIgPSB0cnVlXHJcbiAgfVxyXG5cclxuICBVbkdyYWJNb3VzZUlucHV0ICgpOiBhbnkge1xyXG4gICAgaWYgKCF0aGlzLk1vdXNlSW5wdXRHcmFiKSByZXR1cm5cclxuICAgIGNvbnN0IGMgPSB0aGlzLnBhcmVudC5jYW52YXNDdHguY2FudmFzXHJcbiAgICBjLm9ubW91c2Vtb3ZlID0gbnVsbFxyXG4gICAgYy5vbm1vdXNldXAgPSBudWxsXHJcbiAgICBjLm9ubW91c2Vkb3duID0gbnVsbFxyXG4gICAgLy8gaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL21vemlsbGEvaSkpIGMuRE9NTW91c2VTY3JvbGwgPSBudWxsOyBlbHNlIGMub25tb3VzZXdoZWVsID0gbnVsbDtcclxuICAgIHRoaXMuTW91c2VJbnB1dEdyYWIgPSBmYWxzZVxyXG4gIH1cclxuXHJcbiAgbW91c2Vkb3duIChlOiBNb3VzZUV2ZW50KTogYW55IHtcclxuICAgIHRoaXMucGFyZW50LmJ1dHRvbm1hc2sgfD0gKDEgPDwgZS5idXR0b24pXHJcbiAgICByZXR1cm4gdGhpcy5tb3VzZW1vdmUoZSlcclxuICB9XHJcblxyXG4gIG1vdXNldXAgKGU6IE1vdXNlRXZlbnQpOiBhbnkge1xyXG4gICAgdGhpcy5wYXJlbnQuYnV0dG9ubWFzayAmPSAoMHhGRkZGIC0gKDEgPDwgZS5idXR0b24pKVxyXG4gICAgcmV0dXJuIHRoaXMubW91c2Vtb3ZlKGUpXHJcbiAgfVxyXG5cclxuICBtb3VzZW1vdmUgKGU6IE1vdXNlRXZlbnQpOiBib29sZWFuIHtcclxuICAgIGlmICh0aGlzLnBhcmVudC5zdGF0ZSAhPT0gNCkgcmV0dXJuIHRydWVcclxuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0UG9zaXRpb25PZkNvbnRyb2wodGhpcy5wYXJlbnQuY2FudmFzQ29udHJvbClcclxuICAgIHRoaXMucGFyZW50Lmxhc3RNb3VzZVggPSAoZS5wYWdlWCAtIHBvc1swXSkgKiAodGhpcy5wYXJlbnQuY2FudmFzQ29udHJvbC5oZWlnaHQgLyB0aGlzLnBhcmVudC5jYW52YXNDb250cm9sLm9mZnNldEhlaWdodClcclxuICAgIHRoaXMucGFyZW50Lmxhc3RNb3VzZVkgPSAoKGUucGFnZVkgLSBwb3NbMV0gKyAoaXNUcnV0aHkodGhpcy5wYXJlbnQuc2Nyb2xsZGl2KSA/IHRoaXMucGFyZW50LnNjcm9sbGRpdi5zY3JvbGxUb3AgOiAwKSkgKiAodGhpcy5wYXJlbnQuY2FudmFzQ29udHJvbC53aWR0aCAvIHRoaXMucGFyZW50LmNhbnZhc0NvbnRyb2wub2Zmc2V0V2lkdGgpKVxyXG5cclxuICAgIGlmICghaXNUcnV0aHkodGhpcy5wYXJlbnQubm9Nb3VzZVJvdGF0ZSkpIHtcclxuICAgICAgdGhpcy5wYXJlbnQubGFzdE1vdXNlWDIgPSBJbWFnZUhlbHBlci5jcm90WCh0aGlzLnBhcmVudCwgdGhpcy5wYXJlbnQubGFzdE1vdXNlWCwgdGhpcy5wYXJlbnQubGFzdE1vdXNlWSlcclxuICAgICAgdGhpcy5wYXJlbnQubGFzdE1vdXNlWSA9IEltYWdlSGVscGVyLmNyb3RZKHRoaXMucGFyZW50LCB0aGlzLnBhcmVudC5sYXN0TW91c2VYLCB0aGlzLnBhcmVudC5sYXN0TW91c2VZKVxyXG4gICAgICB0aGlzLnBhcmVudC5sYXN0TW91c2VYID0gdGhpcy5wYXJlbnQubGFzdE1vdXNlWDJcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbW0uc2VuZChTdHJpbmcuZnJvbUNoYXJDb2RlKDUsIHRoaXMucGFyZW50LmJ1dHRvbm1hc2spICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKHRoaXMucGFyZW50Lmxhc3RNb3VzZVgpICsgVHlwZUNvbnZlcnRlci5TaG9ydFRvU3RyKHRoaXMucGFyZW50Lmxhc3RNb3VzZVkpKVxyXG5cclxuICAgIC8vIFVwZGF0ZSBmb2N1cyBhcmVhIGlmIHdlIGFyZSBpbiBmb2N1cyBtb2RlXHJcbiAgICB0aGlzLnBhcmVudC5zZXREZXNrRm9jdXMoJ0Rlc2tGb2N1cycsIHRoaXMucGFyZW50LmZvY3VzTW9kZSlcclxuICAgIGlmICh0aGlzLnBhcmVudC5mb2N1c01vZGUgIT09IDApIHtcclxuICAgICAgY29uc3QgeCA9IE1hdGgubWluKHRoaXMucGFyZW50Lmxhc3RNb3VzZVgsIHRoaXMucGFyZW50LmNhbnZhc0NvbnRyb2wud2lkdGggLSB0aGlzLnBhcmVudC5mb2N1c01vZGUpXHJcbiAgICAgIGNvbnN0IHkgPSBNYXRoLm1pbih0aGlzLnBhcmVudC5sYXN0TW91c2VZLCB0aGlzLnBhcmVudC5jYW52YXNDb250cm9sLmhlaWdodCAtIHRoaXMucGFyZW50LmZvY3VzTW9kZSlcclxuICAgICAgY29uc3QgZGYgPSB0aGlzLnBhcmVudC5mb2N1c01vZGUgKiAyXHJcbiAgICAgIGNvbnN0IGMgPSB0aGlzLnBhcmVudC5jYW52YXNDb250cm9sXHJcbiAgICAgIGNvbnN0IHF4ID0gYy5vZmZzZXRIZWlnaHQgLyB0aGlzLnBhcmVudC5jYW52YXNDb250cm9sLmhlaWdodFxyXG4gICAgICBjb25zdCBxeSA9IGMub2Zmc2V0V2lkdGggLyB0aGlzLnBhcmVudC5jYW52YXNDb250cm9sLndpZHRoXHJcbiAgICAgIGNvbnN0IHEgPSB0aGlzLnBhcmVudC5nZXREZXNrRm9jdXMoJ0Rlc2tGb2N1cycpXHJcbiAgICAgIGNvbnN0IHBwb3MgPSB0aGlzLmdldFBvc2l0aW9uT2ZDb250cm9sKHRoaXMucGFyZW50LmNhbnZhc0NvbnRyb2wucGFyZW50RWxlbWVudClcclxuICAgICAgcS5sZWZ0ID0gYCR7KE1hdGgubWF4KCgoeCAtIHRoaXMucGFyZW50LmZvY3VzTW9kZSkgKiBxeCksIDApICsgKHBvc1swXSAtIHBwb3NbMF0pKX1weGBcclxuICAgICAgcS50b3AgPSBgJHsoTWF0aC5tYXgoKCh5IC0gdGhpcy5wYXJlbnQuZm9jdXNNb2RlKSAqIHF5KSwgMCkgKyAocG9zWzFdIC0gcHBvc1sxXSkpfXB4YFxyXG4gICAgICBxLndpZHRoID0gYCR7KChkZiAqIHF4KSAtIDYpfXB4YFxyXG4gICAgICBxLmhlaWdodCA9IGAkeygoZGYgKiBxeCkgLSA2KX1weGBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5oYWx0RXZlbnQoZSlcclxuICB9XHJcblxyXG4gIGhhbHRFdmVudCAoZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBpZiAoaXNUcnV0aHkoZS5wcmV2ZW50RGVmYXVsdCkpIHsgZS5wcmV2ZW50RGVmYXVsdCgpIH1cclxuICAgIGlmIChpc1RydXRoeShlLnN0b3BQcm9wYWdhdGlvbikpIHsgZS5zdG9wUHJvcGFnYXRpb24oKSB9XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGdldFBvc2l0aW9uT2ZDb250cm9sIChjOiBIVE1MRWxlbWVudCk6IGFueSB7XHJcbiAgICBjb25zdCBQb3NpdGlvbiA9IEFycmF5KDIpXHJcbiAgICBQb3NpdGlvblswXSA9IFBvc2l0aW9uWzFdID0gMFxyXG4gICAgbGV0IGNvbnRyb2w6IEhUTUxFbGVtZW50ID0gY1xyXG4gICAgd2hpbGUgKGNvbnRyb2wgIT0gbnVsbCkge1xyXG4gICAgICBQb3NpdGlvblswXSArPSBjb250cm9sLm9mZnNldExlZnRcclxuICAgICAgUG9zaXRpb25bMV0gKz0gY29udHJvbC5vZmZzZXRUb3BcclxuICAgICAgY29udHJvbCA9IGNvbnRyb2wub2Zmc2V0UGFyZW50IGFzIEhUTUxFbGVtZW50XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUG9zaXRpb25cclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBBTVRLZXlDb2RlQ29udmVydGVyIH0gZnJvbSAnLi9BTVRLZXlDb2RlQ29udmVydGVyJ1xyXG5pbXBvcnQgeyBJQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi4vSUNvbW11bmljYXRvcidcclxuaW1wb3J0IHsgQ29tbXNIZWxwZXIgfSBmcm9tICcuL0NvbW1zSGVscGVyJ1xyXG5pbXBvcnQgeyBEZXNrdG9wIH0gZnJvbSAnLi4vRGVza3RvcCdcclxuaW1wb3J0IHsgaXNUcnV0aHkgfSBmcm9tICcuL1V0aWxpdHlNZXRob2RzJ1xyXG5cclxuZXhwb3J0IGVudW0gVXBEb3duIHtcclxuICBVcCA9IDAsXHJcbiAgRG93biA9IDFcclxufVxyXG4vKipcclxuICogUHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byBoYW5kbGUga2V5Ym9hcmRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBLZXlCb2FyZEhlbHBlciB7XHJcbiAgS2V5SW5wdXRHcmFiOiBib29sZWFuXHJcbiAgQ29tbXM6IElDb21tdW5pY2F0b3JcclxuICBwYXJlbnQ6IERlc2t0b3BcclxuICBjb25zdHJ1Y3RvciAocGFyZW50OiBEZXNrdG9wLCBjb21tczogSUNvbW11bmljYXRvcikge1xyXG4gICAgdGhpcy5Db21tcyA9IGNvbW1zXHJcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIGdyYWJiaW5nIGtleWJvYXJkIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0XHJcbiAgICovXHJcbiAgR3JhYktleUlucHV0ICgpOiBhbnkge1xyXG4gICAgaWYgKHRoaXMuS2V5SW5wdXRHcmFiKSB7IHJldHVybiB9XHJcbiAgICBkb2N1bWVudC5vbmtleXVwID0gdGhpcy5oYW5kbGVLZXlVcC5iaW5kKHRoaXMpXHJcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKVxyXG4gICAgZG9jdW1lbnQub25rZXlwcmVzcyA9IHRoaXMuaGFuZGxlS2V5cy5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLktleUlucHV0R3JhYiA9IHRydWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlbGVhc2VzIGV2ZW50IGhhbmRsZXJzIHVzZWQgZm9yIGtleWJvYXJkIGV2ZW50IGhhbmRsaW5nXHJcbiAgICovXHJcbiAgVW5HcmFiS2V5SW5wdXQgKCk6IGFueSB7XHJcbiAgICBpZiAoIXRoaXMuS2V5SW5wdXRHcmFiKSB7IHJldHVybiB9XHJcbiAgICBkb2N1bWVudC5vbmtleXVwID0gbnVsbFxyXG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gbnVsbFxyXG4gICAgZG9jdW1lbnQub25rZXlwcmVzcyA9IG51bGxcclxuICAgIHRoaXMuS2V5SW5wdXRHcmFiID0gZmFsc2VcclxuICB9XHJcblxyXG4gIGhhbmRsZUtleXMgKGU6IEV2ZW50KTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmhhbHRFdmVudChlKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogaGFsdHMgZGVmYXVsdCBrZXlib2FyZCBldmVudCAgaGFuZGxpbmcuIFNpbmNlIHRoZSBzb2xlIHB1cnBvc2Ugb2YgdGhpcyBldmVudCBpcyB0byBzZW5kIGl0IHRvIHRoZSByZW1vdGUgZGVza3RvcFxyXG4gICAqIEBwYXJhbSBlIGtleWJvYXJkIGV2ZW50XHJcbiAgICovXHJcbiAgaGFsdEV2ZW50IChlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIGlmIChpc1RydXRoeShlLnByZXZlbnREZWZhdWx0KSkgeyBlLnByZXZlbnREZWZhdWx0KCkgfVxyXG4gICAgaWYgKGlzVHJ1dGh5KGUuc3RvcFByb3BhZ2F0aW9uKSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH1cclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlS2V5VXAgKGU6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZUtleUV2ZW50KFVwRG93bi5VcCwgZSlcclxuICB9XHJcblxyXG4gIGhhbmRsZUtleURvd24gKGU6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZUtleUV2ZW50KFVwRG93bi5Eb3duLCBlKVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlS2V5RXZlbnQgKGQ6IFVwRG93biwga2U6IEtleWJvYXJkRXZlbnQpOiBib29sZWFuIHtcclxuICAgIGxldCBlOiBhbnkgPSBrZVxyXG4gICAgaWYgKCFpc1RydXRoeShlKSkgeyBlID0gd2luZG93LmV2ZW50IH1cclxuXHJcbiAgICBpZiAoaXNUcnV0aHkoZS5jb2RlKSkge1xyXG4gICAgICAvLyBGb3IgbmV3IGJyb3dzZXJzLCB0aGlzIG1hcHBpbmcgaXMga2V5Ym9hcmQgbGFuZ3VhZ2UgaW5kZXBlbmRlbnRcclxuICAgICAgY29uc3QgayA9IEFNVEtleUNvZGVDb252ZXJ0ZXIuY29udmVydEFNVEtleUNvZGUoZSlcclxuICAgICAgdGhpcy5wYXJlbnQubG9nZ2VyLnZlcmJvc2UoYEtleSAke2R9IDogJHtTdHJpbmcoayl9YClcclxuICAgICAgaWYgKGsgIT0gbnVsbCkgeyBDb21tc0hlbHBlci5zZW5kS2V5KHRoaXMuQ29tbXMsIGssIGQpIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBrOiBudW1iZXIgPSBlLmtleUNvZGVcclxuICAgICAgaWYgKGsgPT09IDE3MykgayA9IDE4OSAvLyAnLScga2V5IChGaXJlZm94KVxyXG4gICAgICBpZiAoayA9PT0gNjEpIGsgPSAxODcgLy8gJz0nIGtleSAoRmlyZWZveClcclxuICAgICAgbGV0IGtrID0ga1xyXG4gICAgICBpZiAoZS5zaGlmdEtleSA9PT0gZmFsc2UgJiYgayA+PSA2NSAmJiBrIDw9IDkwKSBrayA9IGsgKyAzMlxyXG4gICAgICBpZiAoayA+PSAxMTIgJiYgayA8PSAxMjQpIGtrID0gayArIDB4RkY0RVxyXG4gICAgICBpZiAoayA9PT0gOCkga2sgPSAweGZmMDggLy8gQmFja3NwYWNlXHJcbiAgICAgIGlmIChrID09PSA5KSBrayA9IDB4ZmYwOSAvLyBUYWJcclxuICAgICAgaWYgKGsgPT09IDEzKSBrayA9IDB4ZmYwZCAvLyBSZXR1cm5cclxuICAgICAgaWYgKGsgPT09IDE2KSBrayA9IDB4ZmZlMSAvLyBTaGlmdCAoTGVmdClcclxuICAgICAgaWYgKGsgPT09IDE3KSBrayA9IDB4ZmZlMyAvLyBDdHJsIChMZWZ0KVxyXG4gICAgICBpZiAoayA9PT0gMTgpIGtrID0gMHhmZmU5IC8vIEFsdCAoTGVmdClcclxuICAgICAgaWYgKGsgPT09IDI3KSBrayA9IDB4ZmYxYiAvLyBFU0NcclxuICAgICAgaWYgKGsgPT09IDMzKSBrayA9IDB4ZmY1NSAvLyBQYWdlVXBcclxuICAgICAgaWYgKGsgPT09IDM0KSBrayA9IDB4ZmY1NiAvLyBQYWdlRG93blxyXG4gICAgICBpZiAoayA9PT0gMzUpIGtrID0gMHhmZjU3IC8vIEVuZFxyXG4gICAgICBpZiAoayA9PT0gMzYpIGtrID0gMHhmZjUwIC8vIEhvbWVcclxuICAgICAgaWYgKGsgPT09IDM3KSBrayA9IDB4ZmY1MSAvLyBMZWZ0XHJcbiAgICAgIGlmIChrID09PSAzOCkga2sgPSAweGZmNTIgLy8gVXBcclxuICAgICAgaWYgKGsgPT09IDM5KSBrayA9IDB4ZmY1MyAvLyBSaWdodFxyXG4gICAgICBpZiAoayA9PT0gNDApIGtrID0gMHhmZjU0IC8vIERvd25cclxuICAgICAgaWYgKGsgPT09IDQ1KSBrayA9IDB4ZmY2MyAvLyBJbnNlcnRcclxuICAgICAgaWYgKGsgPT09IDQ2KSBrayA9IDB4ZmZmZiAvLyBEZWxldGVcclxuICAgICAgaWYgKGsgPj0gOTYgJiYgayA8PSAxMDUpIGtrID0gayAtIDQ4IC8vIEtleSBwYWQgbnVtYmVyc1xyXG4gICAgICBpZiAoayA9PT0gMTA2KSBrayA9IDQyIC8vIFBhZCAqXHJcbiAgICAgIGlmIChrID09PSAxMDcpIGtrID0gNDMgLy8gUGFkICtcclxuICAgICAgaWYgKGsgPT09IDEwOSkga2sgPSA0NSAvLyBQYWQgLVxyXG4gICAgICBpZiAoayA9PT0gMTEwKSBrayA9IDQ2IC8vIFBhZCAuXHJcbiAgICAgIGlmIChrID09PSAxMTEpIGtrID0gNDcgLy8gUGFkIC9cclxuICAgICAgaWYgKGsgPT09IDE4Nikga2sgPSA1OSAvLyA7XHJcbiAgICAgIGlmIChrID09PSAxODcpIGtrID0gNjEgLy8gPVxyXG4gICAgICBpZiAoayA9PT0gMTg4KSBrayA9IDQ0IC8vICxcclxuICAgICAgaWYgKGsgPT09IDE4OSkga2sgPSA0NSAvLyAtXHJcbiAgICAgIGlmIChrID09PSAxOTApIGtrID0gNDYgLy8gLlxyXG4gICAgICBpZiAoayA9PT0gMTkxKSBrayA9IDQ3IC8vIC9cclxuICAgICAgaWYgKGsgPT09IDE5Mikga2sgPSA5NiAvLyBgXHJcbiAgICAgIGlmIChrID09PSAyMTkpIGtrID0gOTEgLy8gW1xyXG4gICAgICBpZiAoayA9PT0gMjIwKSBrayA9IDkyIC8vIFxcXHJcbiAgICAgIGlmIChrID09PSAyMjEpIGtrID0gOTMgLy8gXXRcclxuICAgICAgaWYgKGsgPT09IDIyMikga2sgPSAzOSAvLyAnXHJcbiAgICAgIHRoaXMucGFyZW50LmxvZ2dlci52ZXJib3NlKGBLZXkgJHtkfTogJHtrfSAgPSAke2trfWApXHJcbiAgICAgIENvbW1zSGVscGVyLnNlbmRLZXkodGhpcy5Db21tcywga2ssIGQpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5oYWx0RXZlbnQoZSlcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5leHBvcnQgY2xhc3MgQW10VGVybWluYWwge1xyXG4gIHRlcm1pbmFsRW11bGF0aW9uID0gMVxyXG4gIGZ4RW11bGF0aW9uID0gMFxyXG4gIGZ4TGluZUJyZWFrID0gMCAvLyAwID0gQ1IrTEYsIDEgPSBMRlxyXG5cclxuICAvKiogdXNlZCB0byBtYXAgQXNjaWkgdmFsdWVzIHJlY2VpdmVkIGZyb20gc2VyaWFsIHBvcnQgdG8gdW5pY29kZSBjaGFyYWN0ZXJzICovXHJcbiAgQXNjaWlUb1VuaWNvZGUgPSBbXHJcbiAgICAweDAwYzcsXHJcbiAgICAweDAwZmMsXHJcbiAgICAweDAwZTksXHJcbiAgICAweDAwZTIsXHJcbiAgICAweDAwZTQsXHJcbiAgICAweDAwZTAsXHJcbiAgICAweDAwZTUsXHJcbiAgICAweDAwZTcsXHJcbiAgICAweDAwZWEsXHJcbiAgICAweDAwZWIsXHJcbiAgICAweDAwZTgsXHJcbiAgICAweDAwZWYsXHJcbiAgICAweDAwZWUsXHJcbiAgICAweDAwZWMsXHJcbiAgICAweDAwYzQsXHJcbiAgICAweDAwYzUsXHJcbiAgICAweDAwYzksXHJcbiAgICAweDAwZTYsXHJcbiAgICAweDAwYzYsXHJcbiAgICAweDAwZjQsXHJcbiAgICAweDAwZjYsXHJcbiAgICAweDAwZjIsXHJcbiAgICAweDAwZmIsXHJcbiAgICAweDAwZjksXHJcbiAgICAweDAwZmYsXHJcbiAgICAweDAwZDYsXHJcbiAgICAweDAwZGMsXHJcbiAgICAweDAwYTIsXHJcbiAgICAweDAwYTMsXHJcbiAgICAweDAwYTUsXHJcbiAgICAweDIwYTcsXHJcbiAgICAweDAxOTIsXHJcbiAgICAweDAwZTEsXHJcbiAgICAweDAwZWQsXHJcbiAgICAweDAwZjMsXHJcbiAgICAweDAwZmEsXHJcbiAgICAweDAwZjEsXHJcbiAgICAweDAwZDEsXHJcbiAgICAweDAwYWEsXHJcbiAgICAweDAwZGEsXHJcbiAgICAweDAwYmYsXHJcbiAgICAweDIzMTAsXHJcbiAgICAweDAwYWMsXHJcbiAgICAweDAwYmQsXHJcbiAgICAweDAwYmMsXHJcbiAgICAweDAwYTEsXHJcbiAgICAweDAwYWIsXHJcbiAgICAweDAwYmIsXHJcbiAgICAweDI1OTMsXHJcbiAgICAweDI1OTIsXHJcbiAgICAweDI1OTEsXHJcbiAgICAweDI1MDIsXHJcbiAgICAweDI1MjQsXHJcbiAgICAweDI1NjEsXHJcbiAgICAweDI1NjIsXHJcbiAgICAweDI1NTYsXHJcbiAgICAweDI1NTUsXHJcbiAgICAweDI1NjMsXHJcbiAgICAweDI1NTEsXHJcbiAgICAweDI1NTcsXHJcbiAgICAweDI1NWQsXHJcbiAgICAweDI1NWMsXHJcbiAgICAweDI1NWIsXHJcbiAgICAweDI1MTAsXHJcbiAgICAweDI1MTQsXHJcbiAgICAweDI1MzQsXHJcbiAgICAweDI1MmMsXHJcbiAgICAweDI1MWMsXHJcbiAgICAweDI1MDAsXHJcbiAgICAweDI1M2MsXHJcbiAgICAweDI1NWUsXHJcbiAgICAweDI1NWYsXHJcbiAgICAweDI1NWEsXHJcbiAgICAweDI1NTQsXHJcbiAgICAweDI1NjksXHJcbiAgICAweDI1NjYsXHJcbiAgICAweDI1NjAsXHJcbiAgICAweDI1NTAsXHJcbiAgICAweDI1NmMsXHJcbiAgICAweDI1NjcsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NjQsXHJcbiAgICAweDI1NjUsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NTgsXHJcbiAgICAweDI1NTIsXHJcbiAgICAweDI1NTMsXHJcbiAgICAweDI1NmIsXHJcbiAgICAweDI1NmEsXHJcbiAgICAweDI1MTgsXHJcbiAgICAweDI1MGMsXHJcbiAgICAweDI1ODgsXHJcbiAgICAweDI1ODQsXHJcbiAgICAweDI1OGIsXHJcbiAgICAweDI1OTAsXHJcbiAgICAweDI1ODAsXHJcbiAgICAweDAzYjEsXHJcbiAgICAweDAwZGYsXHJcbiAgICAweDAzOTMsXHJcbiAgICAweDAzYzAsXHJcbiAgICAweDAzYTMsXHJcbiAgICAweDAzYzMsXHJcbiAgICAweDAwYjUsXHJcbiAgICAweDAzYzQsXHJcbiAgICAweDAzYzYsXHJcbiAgICAweDAzYjgsXHJcbiAgICAweDIxMjYsXHJcbiAgICAweDAzYjQsXHJcbiAgICAweDIyMWUsXHJcbiAgICAweDAwZjgsXHJcbiAgICAweDAzYjUsXHJcbiAgICAweDIyMGYsXHJcbiAgICAweDIyNjEsXHJcbiAgICAweDAwYjEsXHJcbiAgICAweDIyNjUsXHJcbiAgICAweDIyNjYsXHJcbiAgICAweDIzMjAsXHJcbiAgICAweDIzMjEsXHJcbiAgICAweDAwZjcsXHJcbiAgICAweDIyNDgsXHJcbiAgICAweDAwYjAsXHJcbiAgICAweDIwMjIsXHJcbiAgICAweDAwYjcsXHJcbiAgICAweDIyMWEsXHJcbiAgICAweDIwN2YsXHJcbiAgICAweDAwYjIsXHJcbiAgICAweDIyMGUsXHJcbiAgICAweDAwYTBcclxuICBdXHJcblxyXG4gIEFzY2lpVG9Vbmljb2RlSW50ZWwgPSBbXHJcbiAgICAweDAwYzcsXHJcbiAgICAweDAwZmMsXHJcbiAgICAweDAwZTksXHJcbiAgICAweDAwZTIsXHJcbiAgICAweDAwZTQsXHJcbiAgICAweDAwZTAsXHJcbiAgICAweDAwZTUsXHJcbiAgICAweDAwZTcsXHJcbiAgICAweDAwZWEsXHJcbiAgICAweDAwZWIsXHJcbiAgICAweDAwZTgsXHJcbiAgICAweDAwZWYsXHJcbiAgICAweDAwZWUsXHJcbiAgICAweDAwZWMsXHJcbiAgICAweDAwYzQsXHJcbiAgICAweDAwYzUsXHJcbiAgICAweDAwYzksXHJcbiAgICAweDAwZTYsXHJcbiAgICAweDAwYzYsXHJcbiAgICAweDAwZjQsXHJcbiAgICAweDAwZjYsXHJcbiAgICAweDAwZjIsXHJcbiAgICAweDAwZmIsXHJcbiAgICAweDAwZjksXHJcbiAgICAweDAwZmYsXHJcbiAgICAweDAwZDYsXHJcbiAgICAweDAwZGMsXHJcbiAgICAweDAwYTIsXHJcbiAgICAweDAwYTMsXHJcbiAgICAweDAwYTUsXHJcbiAgICAweDIwYTcsXHJcbiAgICAweDAxOTIsXHJcbiAgICAweDAwZTEsXHJcbiAgICAweDAwZWQsXHJcbiAgICAweDAwZjMsXHJcbiAgICAweDAwZmEsXHJcbiAgICAweDAwZjEsXHJcbiAgICAweDAwZDEsXHJcbiAgICAweDAwYWEsXHJcbiAgICAweDAwZGEsXHJcbiAgICAweDAwYmYsXHJcbiAgICAweDIzMTAsXHJcbiAgICAweDAwYWMsXHJcbiAgICAweDAwYmQsXHJcbiAgICAweDAwYmMsXHJcbiAgICAweDAwYTEsXHJcbiAgICAweDAwYWUsXHJcbiAgICAweDAwYmIsXHJcbiAgICAweDI1OTMsXHJcbiAgICAweDI1OTIsXHJcbiAgICAweDI1OTEsXHJcbiAgICAweDI1MDIsXHJcbiAgICAweDI1MjQsXHJcbiAgICAweDI1NjEsXHJcbiAgICAweDI1NjIsXHJcbiAgICAweDI1NTYsXHJcbiAgICAweDI1NTUsXHJcbiAgICAweDI1NjMsXHJcbiAgICAweDI1NTEsXHJcbiAgICAweDI1NTcsXHJcbiAgICAweDI1NWQsXHJcbiAgICAweDI1NWMsXHJcbiAgICAweDI1NWIsXHJcbiAgICAweDI1MTAsXHJcbiAgICAweDI1MTQsXHJcbiAgICAweDI1MzQsXHJcbiAgICAweDI1MmMsXHJcbiAgICAweDI1MWMsXHJcbiAgICAweDI1MDAsXHJcbiAgICAweDI1M2MsXHJcbiAgICAweDI1NWUsXHJcbiAgICAweDI1NWYsXHJcbiAgICAweDI1NWEsXHJcbiAgICAweDI1NTQsXHJcbiAgICAweDI1NjksXHJcbiAgICAweDI1NjYsXHJcbiAgICAweDI1NjAsXHJcbiAgICAweDI1NTAsXHJcbiAgICAweDI1NmMsXHJcbiAgICAweDI1NjcsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NjQsXHJcbiAgICAweDI1NjUsXHJcbiAgICAweDI1NjgsXHJcbiAgICAweDI1NTgsXHJcbiAgICAweDI1NTIsXHJcbiAgICAweDI1NTMsXHJcbiAgICAweDI1NmIsXHJcbiAgICAweDI1NmEsXHJcbiAgICAweDI1MTgsXHJcbiAgICAweDI1MGMsXHJcbiAgICAweDI1ODgsXHJcbiAgICAweDI1ODQsXHJcbiAgICAweDI1OGIsXHJcbiAgICAweDI1OTAsXHJcbiAgICAweDI1ODAsXHJcbiAgICAweDAzYjEsXHJcbiAgICAweDAwZGYsXHJcbiAgICAweDAzOTMsXHJcbiAgICAweDAzYzAsXHJcbiAgICAweDAzYTMsXHJcbiAgICAweDAzYzMsXHJcbiAgICAweDAwYjUsXHJcbiAgICAweDAzYzQsXHJcbiAgICAweDAzYzYsXHJcbiAgICAweDAzYjgsXHJcbiAgICAweDIxMjYsXHJcbiAgICAweDAzYjQsXHJcbiAgICAweDIyMWUsXHJcbiAgICAweDAwZjgsXHJcbiAgICAweDAzYjUsXHJcbiAgICAweDIyMGYsXHJcbiAgICAweDIyNjEsXHJcbiAgICAweDAwYjEsXHJcbiAgICAweDIyNjUsXHJcbiAgICAweDIyNjYsXHJcbiAgICAweDIzMjAsXHJcbiAgICAweDIzMjEsXHJcbiAgICAweDAwZjcsXHJcbiAgICAweDIyNDgsXHJcbiAgICAweDAwYjAsXHJcbiAgICAweDIwMjIsXHJcbiAgICAweDAwYjcsXHJcbiAgICAweDIyMWEsXHJcbiAgICAweDIwN2YsXHJcbiAgICAweDAwYjIsXHJcbiAgICAweDIyMGUsXHJcbiAgICAweDAwYTBcclxuICBdXHJcblxyXG4gIFN0YXRlQ2hhbmdlID0gKG5ld1N0YXRlKTogYW55ID0+IHsgfVxyXG5cclxuICAvKiogc2VuZGluZyAgbXVsdGlwbGUgdW5pY29kZSB2YWx1ZXMgdG8gc29ja2V0ICovXHJcbiAgVGVybVNlbmRLZXlzID0gKGtleXMpOiBhbnkgPT4gdGhpcy5vblNlbmQoa2V5cylcclxuXHJcbiAgb25TZW5kOiAoZGF0YTogYW55KSA9PiB2b2lkXHJcblxyXG4gIFByb2Nlc3NEYXRhOiAoc3RyOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IElEYXRhUHJvY2Vzc29yIH0gZnJvbSAnLi9JRGF0YVByb2Nlc3NvcidcclxuXHJcbi8qKiBjbGFzcyB0byBwcm9jZXNzIHNlcmlhbCBvdmVyIGxhbiBkYXRhICoqL1xyXG5leHBvcnQgY2xhc3MgVGVybWluYWxEYXRhUHJvY2Vzc29yIGltcGxlbWVudHMgSURhdGFQcm9jZXNzb3Ige1xyXG4gIHRlcm1pbmFsOiBhbnlcclxuICBjb25zdHJ1Y3RvciAodGVybWluYWwpIHtcclxuICAgIHRoaXMudGVybWluYWwgPSB0ZXJtaW5hbFxyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc0RhdGFUb1h0ZXJtOiAoc3RyOiBhbnkpID0+IHZvaWRcclxuICBjbGVhclRlcm1pbmFsOiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKiBwcm9jZXNzaW5nIGRhdGEgcmVjZWl2ZWQgZnJvbSBzZXJpYWwgcG9ydCoqL1xyXG4gIHByb2Nlc3NEYXRhID0gKHN0cjogc3RyaW5nKTogYW55ID0+IHtcclxuICAgIGlmICh0aGlzLnRlcm1pbmFsLmNhcHR1cmUgIT0gbnVsbCkgdGhpcy50ZXJtaW5hbC5jYXB0dXJlICs9IHN0clxyXG4gICAgbGV0IGM6IHN0cmluZyA9ICcnXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBjaCA9IHN0ci5jaGFyQ29kZUF0KGkpXHJcbiAgICAgIGlmIChzdHJbaV0gPT09ICdKJykge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUZXJtaW5hbCgpXHJcbiAgICAgIH0gZWxzZSBpZiAoKGNoICYgMHg4MCkgIT09IDApIHtcclxuICAgICAgICBjICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy50ZXJtaW5hbC5Bc2NpaVRvVW5pY29kZVtjaCAmIDB4N2ZdKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGMgKz0gYCR7c3RyW2ldfWBcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5wcm9jZXNzRGF0YVRvWHRlcm0oYylcclxuICB9XHJcbn1cclxuIiwiLyogemxpYi5qcyAtLSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIGZvciB0aGUgemxpYi5cclxuICBWZXJzaW9uOiAwLjIuMFxyXG4gIExhc3RNb2RpZmllZDogQXByIDEyIDIwMTJcclxuICBDb3B5cmlnaHQgKEMpIDIwMTIgTWFzYW5hbyBJenVtbyA8aXpAb25pY29zLmNvLmpwPlxyXG5cclxuICBUaGUgb3JpZ2luYWwgY29weXJpZ2h0IG5vdGljZSAoemxpYiAxLjIuNik6XHJcblxyXG4gIENvcHlyaWdodCAoQykgMTk5NS0yMDEyIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcclxuXHJcbiAgVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcclxuICB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXHJcbiAgYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuXHJcbiAgUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXHJcbiAgaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxyXG4gIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcclxuXHJcbiAgMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcclxuICAgICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxyXG4gICAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxyXG4gICAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXHJcbiAgMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcclxuICAgICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbiAgMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cclxuXHJcbiAgSmVhbi1sb3VwIEdhaWxseSAgICAgICAgTWFyayBBZGxlclxyXG4gIGpsb3VwQGd6aXAub3JnICAgICAgICAgIG1hZGxlckBhbHVtbmkuY2FsdGVjaC5lZHVcclxuXHJcblxyXG4gIFRoZSBkYXRhIGZvcm1hdCB1c2VkIGJ5IHRoZSB6bGliIGxpYnJhcnkgaXMgZGVzY3JpYmVkIGJ5IFJGQ3MgKFJlcXVlc3QgZm9yXHJcbiAgQ29tbWVudHMpIDE5NTAgdG8gMTk1MiBpbiB0aGUgZmlsZXMgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTk1MFxyXG4gICh6bGliIGZvcm1hdCksIHJmYzE5NTEgKGRlZmxhdGUgZm9ybWF0KSBhbmQgcmZjMTk1MiAoZ3ppcCBmb3JtYXQpLlxyXG4qL1xyXG5cclxudmFyIFpMSUIgPSAoIFpMSUIgfHwge30gKTsgLy8gWkxJQiBuYW1lc3BhY2UgaW5pdGlhbGl6YXRpb25cclxuXHJcbi8vIGNvbW1vbiBkZWZpbml0aW9uc1xyXG5pZih0eXBlb2YgWkxJQi5jb21tb25faW5pdGlhbGl6ZWQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBaTElCLlpfTk9fRkxVU0ggICAgICA9IDA7XHJcbiAgICBaTElCLlpfUEFSVElBTF9GTFVTSCA9IDE7XHJcbiAgICBaTElCLlpfU1lOQ19GTFVTSCAgICA9IDI7XHJcbiAgICBaTElCLlpfRlVMTF9GTFVTSCAgICA9IDM7XHJcbiAgICBaTElCLlpfRklOSVNIICAgICAgICA9IDQ7XHJcbiAgICBaTElCLlpfQkxPQ0sgICAgICAgICA9IDU7XHJcbiAgICBaTElCLlpfVFJFRVMgICAgICAgICA9IDY7XHJcbiAgICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXHJcblxyXG4gICAgWkxJQi5aX09LICAgICAgICAgICA9ICAwO1xyXG4gICAgWkxJQi5aX1NUUkVBTV9FTkQgICA9ICAxO1xyXG4gICAgWkxJQi5aX05FRURfRElDVCAgICA9ICAyO1xyXG4gICAgWkxJQi5aX0VSUk5PICAgICAgICA9ICgtMSk7XHJcbiAgICBaTElCLlpfU1RSRUFNX0VSUk9SID0gKC0yKTtcclxuICAgIFpMSUIuWl9EQVRBX0VSUk9SICAgPSAoLTMpO1xyXG4gICAgWkxJQi5aX01FTV9FUlJPUiAgICA9ICgtNCk7XHJcbiAgICBaTElCLlpfQlVGX0VSUk9SICAgID0gKC01KTtcclxuICAgIFpMSUIuWl9WRVJTSU9OX0VSUk9SID0gKC02KTtcclxuICAgIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcclxuICAgICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cclxuICAgICAqL1xyXG5cclxuICAgIFpMSUIuWl9ERUZMQVRFRCA9IDg7IC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAodGhlIG9ubHkgb25lIHN1cHBvcnRlZCBpbiB0aGlzIHZlcnNpb24pICovXHJcblxyXG4gICAgLyoqXHJcblx0ICogel9zdHJlYW0gY29uc3RydWN0b3JcclxuXHQgKiBAY29uc3RydWN0b3JcclxuXHQgKi9cclxuXHRaTElCLnpfc3RyZWFtID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMubmV4dF9pbiA9IDA7ICAgICAgICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cclxuXHRcdFx0dGhpcy5hdmFpbF9pbiA9IDA7ICAgICAgIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgaW4gaW5wdXRfZGF0YSAqL1xyXG5cdFx0XHR0aGlzLnRvdGFsX2luID0gMDsgICAgICAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXHJcblxyXG5cdFx0XHR0aGlzLm5leHRfb3V0ID0gMDsgICAgICAgLyogbmV4dCBvdXRwdXQgYnl0ZSAqL1xyXG5cdFx0XHR0aGlzLmF2YWlsX291dCA9IDA7ICAgICAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgbmV4dF9vdXQgKi9cclxuXHRcdFx0dGhpcy50b3RhbF9vdXQgPSAwOyAgICAgIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXHJcblxyXG5cdFx0XHR0aGlzLm1zZyA9IG51bGw7ICAgICAgICAgLyogbGFzdCBlcnJvciBtZXNzYWdlLCBudWxsIGlmIG5vIGVycm9yICovXHJcblx0XHRcdHRoaXMuc3RhdGUgPSBudWxsOyAgICAgICAvKiBub3QgdmlzaWJsZSBieSBhcHBsaWNhdGlvbnMgKi9cclxuXHJcblx0XHRcdHRoaXMuZGF0YV90eXBlID0gMDsgICAgICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXHJcblx0XHRcdHRoaXMuYWRsZXIgPSAwOyAgICAgICAgICAvKiBUT0RPOiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xyXG5cclxuXHRcdFx0Ly8gemxpYi5qc1xyXG5cdFx0XHR0aGlzLmlucHV0X2RhdGEgPSAnJzsgICAgLyogaW5wdXQgZGF0YSAqL1xyXG5cdFx0XHR0aGlzLm91dHB1dF9kYXRhID0gJyc7ICAgLyogb3V0cHV0IGRhdGEgKi9cclxuXHRcdFx0dGhpcy5lcnJvciA9IDA7ICAgICAgICAgIC8qIGVycm9yIGNvZGUgKi9cclxuXHRcdFx0dGhpcy5jaGVja3N1bV9mdW5jdGlvbiA9IG51bGw7IC8qIGNyYzMyKGZvciBnemlwKSBvciBhZGxlcjMyKGZvciB6bGliKSAqL1xyXG5cdH07XHJcblxyXG4gICAgLyoqXHJcblx0ICogVE9ET1xyXG5cdCAqIEBjb25zdHJ1Y3RvclxyXG5cdCAqL1xyXG5cdFpMSUIuZ3pfaGVhZGVyID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLnRleHQgPSAwOyAgICAgIC8qIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHQgKi9cclxuXHQgICAgdGhpcy50aW1lID0gMDsgICAgICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xyXG5cdFx0dGhpcy54ZmxhZ3MgPSAwOyAgICAvKiBleHRyYSBmbGFncyAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xyXG5cdFx0dGhpcy5vcyA9IDB4ZmY7ICAgICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXHJcblx0XHR0aGlzLmV4dHJhID0gbnVsbDsgIC8qIGV4dHJhIGZpZWxkIHN0cmluZyBvciBudWxsIGlmIG5vbmUgKi9cclxuXHRcdHRoaXMuZXh0cmFfbGVuID0gMDsgLyogdGhpcy5leHRyYS5sZW5ndGggKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cclxuXHRcdHRoaXMuZXh0cmFfbWF4ID0gMDsgLyogc3BhY2UgYXQgZXh0cmEgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cclxuXHRcdHRoaXMubmFtZSA9IG51bGw7ICAgLyogZmlsZSBuYW1lIHN0cmluZyBvciBudWxsIGlmIG5vbmUgKi9cclxuXHRcdHRoaXMubmFtZV9tYXggPSAwOyAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xyXG5cdFx0dGhpcy5jb21tZW50ID0gbnVsbDsgLyogY29tbWVudCBzdHJpbmcgb3IgbnVsbCBpZiBub25lICovXHJcblx0XHR0aGlzLmNvbW1fbWF4ID0gMDsgIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cclxuXHRcdHRoaXMuaGNyYyA9IDA7ICAgICAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cclxuXHRcdHRoaXMuZG9uZSA9IDA7ICAgICAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWRcclxuXHRcdFx0XHRcdFx0XHQgICB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXHJcblx0fTtcclxuXHJcblx0WkxJQi5jb21tb25faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG59IC8vIGNvbW1vbiBkZWZpbml0aW9uc1xyXG4vKiB6bGliLWluZmxhdGUuanMgLS0gSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHpsaWIgaW5mbGF0ZS5cclxuICBWZXJzaW9uOiAwLjIuMFxyXG4gIExhc3RNb2RpZmllZDogQXByIDEyIDIwMTJcclxuICBDb3B5cmlnaHQgKEMpIDIwMTIgTWFzYW5hbyBJenVtbyA8aXpAb25pY29zLmNvLmpwPlxyXG5cclxuICBUaGlzIGxpYnJhcnkgaXMgb25lIG9mIHRoZSBKYXZhU2NyaXB0IHpsaWIgaW1wbGVtZW50YXRpb24uXHJcbiAgU29tZSBBUEkncyBhcmUgbW9kaWZpZWQgZnJvbSB0aGUgb3JpZ2luYWwuXHJcbiAgT25seSBpbmZsYXRlIEFQSSBpcyBpbXBsZW1lbnRlZC5cclxuXHJcbiAgVGhlIG9yaWdpbmFsIGNvcHlyaWdodCBub3RpY2UgKHpsaWIgMS4yLjYpOlxyXG5cclxuICBDb3B5cmlnaHQgKEMpIDE5OTUtMjAxMiBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXHJcblxyXG4gIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXHJcbiAgd2FycmFudHkuICBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xyXG4gIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXHJcblxyXG4gIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxyXG4gIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcclxuICBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XHJcblxyXG4gIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XHJcbiAgICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcclxuICAgICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcclxuICAgICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxyXG4gIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXHJcbiAgICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxyXG4gIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcblxyXG4gIEplYW4tbG91cCBHYWlsbHkgICAgICAgIE1hcmsgQWRsZXJcclxuICBqbG91cEBnemlwLm9yZyAgICAgICAgICBtYWRsZXJAYWx1bW5pLmNhbHRlY2guZWR1XHJcblxyXG5cclxuICBUaGUgZGF0YSBmb3JtYXQgdXNlZCBieSB0aGUgemxpYiBsaWJyYXJ5IGlzIGRlc2NyaWJlZCBieSBSRkNzIChSZXF1ZXN0IGZvclxyXG4gIENvbW1lbnRzKSAxOTUwIHRvIDE5NTIgaW4gdGhlIGZpbGVzIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE5NTBcclxuICAoemxpYiBmb3JtYXQpLCByZmMxOTUxIChkZWZsYXRlIGZvcm1hdCkgYW5kIHJmYzE5NTIgKGd6aXAgZm9ybWF0KS5cclxuKi9cclxuXHJcbi8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgQVBJIGRvY3VtZW50YXRpb25cclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblVzYWdlOiB6X3N0cmVhbSA9IFpMSUIuaW5mbGF0ZUluaXQoW3dpbmRvd0JpdHNdKTtcclxuXHJcbiAgICAgQ3JlYXRlIHRoZSBzdHJlYW0gb2JqZWN0IGZvciBkZWNvbXByZXNzaW9uLlxyXG4gICAgIFNlZSB6bGliLmggZm9yIHdpbmRvd0JpdHMgaW5mb3JtYXRpb24uXHJcblxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuVXNhZ2U6IGRlY29kZWRfc3RyaW5nID0gel9zdHJlYW0uaW5mbGF0ZShlbmNvZGVkX3N0cmluZyBbLCB7T1BUSU9OUy4uLn1dKTtcclxuXHJcbk9QVElPTlM6XHJcbiAgICBuZXh0X2luOiBkZWNvZGUgc3RhcnQgb2Zmc2V0IGZvciBlbmNvZGVkX3N0cmluZy5cclxuXHJcbiAgICBhdmFpbF9pbjogLy8gVE9ETyBkb2N1bWVudC4gIFNlZSB6bGliLmggZm9yIHRoZSBpbmZvcm1hdGlvbi5cclxuXHJcbiAgICBhdmFpbF9vdXQ6IC8vIFRPRE8gZG9jdW1lbnQuICBTZWUgemxpYi5oIGZvciB0aGUgaW5mb3JtYXRpb24uXHJcblxyXG4gICAgZmx1c2g6IC8vIFRPRE8gZG9jdW1lbnQuICBTZWUgemxpYi5oIGZvciB0aGUgaW5mb3JtYXRpb24uXHJcblxyXG5FeDogZGVjb2RlZF9zdHJpbmcgPSB6X3N0cmVhbS5pbmZsYXRlKGVuY29kZWRfc3RyaW5nKTtcclxuICAgIGRlY29kZWRfc3RyaW5nID0gel9zdHJlYW0uaW5mbGF0ZShlbmNvZGVkX3N0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHtuZXh0X2luOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsX2luOiBlbmNvZGVkX3N0cmluZy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxfb3V0OiAxMDI0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZsdXNoOiBaTElCLlpfTk9fRkxVU0h9KTtcclxuXHJcbiAgICAgU2VlIHpsaWIuaCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5Vc2FnZTogel9zdHJlYW0uaW5mbGF0ZVJlc2V0KCk7XHJcbiAgICBUT0RPIGRvY3VtZW50XHJcblxyXG4qL1xyXG5cclxuaWYoIHR5cGVvZiBaTElCID09PSAndW5kZWZpbmVkJyApIHtcclxuICAgIGFsZXJ0KCdaTElCIGlzIG5vdCBkZWZpbmVkLiAgU1JDIHpsaWIuanMgYmVmb3JlIHpsaWItaW5mbGF0ZS5qcycpXHJcbn1cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHJcbi8qIGluZmxhdGUuYyAtLSB6bGliIGRlY29tcHJlc3Npb25cclxuICogQ29weXJpZ2h0IChDKSAxOTk1LTIwMTEgTWFyayBBZGxlclxyXG4gKiBGb3IgY29uZGl0aW9ucyBvZiBkaXN0cmlidXRpb24gYW5kIHVzZSwgc2VlIGNvcHlyaWdodCBub3RpY2UgaW4gemxpYi5oXHJcbiAqL1xyXG5cclxudmFyIERFRl9XQklUUyA9IDE1O1xyXG5cclxuLy8gaW5mbGF0ZV9tb2RlXHJcbnZhciBIRUFEICAgICA9ICAwOyAvKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi9cclxudmFyIEZMQUdTICAgID0gIDE7IC8qIGk6IHdhaXRpbmcgZm9yIG1ldGhvZCBhbmQgZmxhZ3MgKGd6aXApICovXHJcbnZhciBUSU1FICAgICA9ICAyOyAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cclxudmFyIE9TICAgICAgID0gIDM7IC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGZsYWdzIGFuZCBvcGVyYXRpbmcgc3lzdGVtIChnemlwKSAqL1xyXG52YXIgRVhMRU4gICAgPSAgNDsgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgbGVuZ3RoIChnemlwKSAqL1xyXG52YXIgRVhUUkEgICAgPSAgNTsgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXHJcbnZhciBOQU1FICAgICA9ICA2OyAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgZmlsZSBuYW1lIChnemlwKSAqL1xyXG52YXIgQ09NTUVOVCAgPSAgNzsgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGNvbW1lbnQgKGd6aXApICovXHJcbnZhciBIQ1JDICAgICA9ICA4OyAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xyXG52YXIgRElDVElEICAgPSAgOTsgLyogaTogd2FpdGluZyBmb3IgZGljdGlvbmFyeSBjaGVjayB2YWx1ZSAqL1xyXG52YXIgRElDVCAgICAgPSAxMDsgLyogd2FpdGluZyBmb3IgaW5mbGF0ZVNldERpY3Rpb25hcnkoKSBjYWxsICovXHJcbnZhciBUWVBFICAgICA9IDExOyAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXHJcbnZhciBUWVBFRE8gICA9IDEyOyAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXHJcbnZhciBTVE9SRUQgICA9IDEzOyAvKiBpOiB3YWl0aW5nIGZvciBzdG9yZWQgc2l6ZSAobGVuZ3RoIGFuZCBjb21wbGVtZW50KSAqL1xyXG52YXIgQ09QWV8gICAgPSAxNDsgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cclxudmFyIENPUFkgICAgID0gMTU7IC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXHJcbnZhciBUQUJMRSAgICA9IDE2OyAvKiBpOiB3YWl0aW5nIGZvciBkeW5hbWljIGJsb2NrIHRhYmxlIGxlbmd0aHMgKi9cclxudmFyIExFTkxFTlMgID0gMTc7IC8qIGk6IHdhaXRpbmcgZm9yIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xyXG52YXIgQ09ERUxFTlMgPSAxODsgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdCBhbmQgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXHJcbnZhciBMRU5fICAgICA9IDE5OyAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xyXG52YXIgTEVOICAgICAgPSAyMDsgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdC9lb2IgY29kZSAqL1xyXG52YXIgTEVORVhUICAgPSAyMTsgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cclxudmFyIERJU1QgICAgID0gMjI7IC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cclxudmFyIERJU1RFWFQgID0gMjM7IC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cclxudmFyIE1BVENIICAgID0gMjQ7IC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqL1xyXG52YXIgTElUICAgICAgPSAyNTsgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cclxudmFyIENIRUNLICAgID0gMjY7IC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBjaGVjayB2YWx1ZSAqL1xyXG52YXIgTEVOR1RIICAgPSAyNzsgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi9cclxudmFyIERPTkUgICAgID0gMjg7IC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXHJcbnZhciBCQUQgICAgICA9IDI5OyAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXHJcbnZhciBNRU0gICAgICA9IDMwOyAvKiBnb3QgYW4gaW5mbGF0ZSgpIG1lbW9yeSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xyXG52YXIgU1lOQyAgICAgPSAzMTsgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXHJcblxyXG4vKiBNYXhpbXVtIHNpemUgb2YgdGhlIGR5bmFtaWMgdGFibGUuICBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29kZSBzdHJ1Y3R1cmVzIGlzXHJcbiAgIDE0NDQsIHdoaWNoIGlzIHRoZSBzdW0gb2YgODUyIGZvciBsaXRlcmFsL2xlbmd0aCBjb2RlcyBhbmQgNTkyIGZvciBkaXN0YW5jZVxyXG4gICBjb2Rlcy4gIFRoZXNlIHZhbHVlcyB3ZXJlIGZvdW5kIGJ5IGV4aGF1c3RpdmUgc2VhcmNoZXMgdXNpbmcgdGhlIHByb2dyYW1cclxuICAgZXhhbXBsZXMvZW5vdWdoLmMgZm91bmQgaW4gdGhlIHpsaWIgZGlzdHJpYnR1dGlvbi4gIFRoZSBhcmd1bWVudHMgdG8gdGhhdFxyXG4gICBwcm9ncmFtIGFyZSB0aGUgbnVtYmVyIG9mIHN5bWJvbHMsIHRoZSBpbml0aWFsIHJvb3QgdGFibGUgc2l6ZSwgYW5kIHRoZVxyXG4gICBtYXhpbXVtIGJpdCBsZW5ndGggb2YgYSBjb2RlLiAgXCJlbm91Z2ggMjg2IDkgMTVcIiBmb3IgbGl0ZXJhbC9sZW5ndGggY29kZXNcclxuICAgcmV0dXJucyByZXR1cm5zIDg1MiwgYW5kIFwiZW5vdWdoIDMwIDYgMTVcIiBmb3IgZGlzdGFuY2UgY29kZXMgcmV0dXJucyA1OTIuXHJcbiAgIFRoZSBpbml0aWFsIHJvb3QgdGFibGUgc2l6ZSAoOSBvciA2KSBpcyBmb3VuZCBpbiB0aGUgZmlmdGggYXJndW1lbnQgb2YgdGhlXHJcbiAgIGluZmxhdGVfdGFibGUoKSBjYWxscyBpbiBpbmZsYXRlLmMgYW5kIGluZmJhY2suYy4gIElmIHRoZSByb290IHRhYmxlIHNpemUgaXNcclxuICAgY2hhbmdlZCwgdGhlbiB0aGVzZSBtYXhpbXVtIHNpemVzIHdvdWxkIGJlIG5lZWQgdG8gYmUgcmVjYWxjdWxhdGVkIGFuZFxyXG4gICB1cGRhdGVkLiAqL1xyXG52YXIgRU5PVUdIX0xFTlMgPSA4NTI7XHJcbnZhciBFTk9VR0hfRElTVFMgPSA1OTI7XHJcbnZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMgKyBFTk9VR0hfRElTVFMpO1xyXG5cclxuLyogVHlwZSBvZiBjb2RlIHRvIGJ1aWxkIGZvciBpbmZsYXRlX3RhYmxlKCkgKi9cclxudmFyIENPREVTID0gMDtcclxudmFyIExFTlMgPSAxO1xyXG52YXIgRElTVFMgPSAyO1xyXG5cclxuXHJcblxyXG52YXIgaW5mbGF0ZV90YWJsZV9sYmFzZSA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGJhc2UgKi9cclxuICAgIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXHJcbiAgICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMF07XHJcbnZhciBpbmZsYXRlX3RhYmxlX2xleHQgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqL1xyXG4gICAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXHJcbiAgICAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgMjAzLCA2OV07XHJcbnZhciBpbmZsYXRlX3RhYmxlX2RiYXNlID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBiYXNlICovXHJcbiAgICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXHJcbiAgICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXHJcbiAgICA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwXTtcclxudmFyIGluZmxhdGVfdGFibGVfZGV4dCA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgZXh0cmEgKi9cclxuICAgIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxyXG4gICAgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsXHJcbiAgICAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XTtcclxuXHJcbi8qIGluZnRyZWVzLmMgLS0gZ2VuZXJhdGUgSHVmZm1hbiB0cmVlcyBmb3IgZWZmaWNpZW50IGRlY29kaW5nXHJcbiAqIENvcHlyaWdodCAoQykgMTk5NS0yMDEyIE1hcmsgQWRsZXJcclxuICogRm9yIGNvbmRpdGlvbnMgb2YgZGlzdHJpYnV0aW9uIGFuZCB1c2UsIHNlZSBjb3B5cmlnaHQgbm90aWNlIGluIHpsaWIuaFxyXG4gKi9cclxuXHJcblpMSUIuaW5mbGF0ZV9jb3B5cmlnaHQgPVxyXG4gICAnIGluZmxhdGUgMS4yLjYgQ29weXJpZ2h0IDE5OTUtMjAxMiBNYXJrIEFkbGVyICc7XHJcbi8qXHJcbiAgSWYgeW91IHVzZSB0aGUgemxpYiBsaWJyYXJ5IGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaXMgd2VsY29tZVxyXG4gIGluIHRoZSBkb2N1bWVudGF0aW9uIG9mIHlvdXIgcHJvZHVjdC4gSWYgZm9yIHNvbWUgcmVhc29uIHlvdSBjYW5ub3RcclxuICBpbmNsdWRlIHN1Y2ggYW4gYWNrbm93bGVkZ21lbnQsIEkgd291bGQgYXBwcmVjaWF0ZSB0aGF0IHlvdSBrZWVwIHRoaXNcclxuICBjb3B5cmlnaHQgc3RyaW5nIGluIHRoZSBleGVjdXRhYmxlIG9mIHlvdXIgcHJvZHVjdC5cclxuICovXHJcblxyXG4vKlxyXG4gIEJ1aWxkIGEgc2V0IG9mIHRhYmxlcyB0byBkZWNvZGUgdGhlIHByb3ZpZGVkIGNhbm9uaWNhbCBIdWZmbWFuIGNvZGUuXHJcbiAgVGhlIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIFRoZSByZXN1bHQgc3RhcnRzIGF0ICp0YWJsZSxcclxuICB3aG9zZSBpbmRpY2VzIGFyZSAwLi4yXmJpdHMtMS4gIHdvcmsgaXMgYSB3cml0YWJsZSBhcnJheSBvZiBhdCBsZWFzdFxyXG4gIGxlbnMgc2hvcnRzLCB3aGljaCBpcyB1c2VkIGFzIGEgd29yayBhcmVhLiAgdHlwZSBpcyB0aGUgdHlwZSBvZiBjb2RlXHJcbiAgdG8gYmUgZ2VuZXJhdGVkLCBDT0RFUywgTEVOUywgb3IgRElTVFMuICBPbiByZXR1cm4sIHplcm8gaXMgc3VjY2VzcyxcclxuICAtMSBpcyBhbiBpbnZhbGlkIGNvZGUsIGFuZCArMSBtZWFucyB0aGF0IEVOT1VHSCBpc24ndCBlbm91Z2guICB0YWJsZVxyXG4gIG9uIHJldHVybiBwb2ludHMgdG8gdGhlIG5leHQgYXZhaWxhYmxlIGVudHJ5J3MgYWRkcmVzcy4gIGJpdHMgaXMgdGhlXHJcbiAgcmVxdWVzdGVkIHJvb3QgdGFibGUgaW5kZXggYml0cywgYW5kIG9uIHJldHVybiBpdCBpcyB0aGUgYWN0dWFsIHJvb3RcclxuICB0YWJsZSBpbmRleCBiaXRzLiAgSXQgd2lsbCBkaWZmZXIgaWYgdGhlIHJlcXVlc3QgaXMgZ3JlYXRlciB0aGFuIHRoZVxyXG4gIGxvbmdlc3QgY29kZSBvciBpZiBpdCBpcyBsZXNzIHRoYW4gdGhlIHNob3J0ZXN0IGNvZGUuXHJcbiovXHJcbmZ1bmN0aW9uIGluZmxhdGVfdGFibGUoc3RhdGUsIHR5cGUpXHJcbntcclxuICAgIHZhciBNQVhCSVRTID0gMTU7XHJcbiAgICB2YXIgdGFibGUgPSBzdGF0ZS5uZXh0O1xyXG4gICAgdmFyIGJpdHMgPSAodHlwZSA9PSBESVNUUyA/IHN0YXRlLmRpc3RiaXRzIDogc3RhdGUubGVuYml0cyk7XHJcbiAgICB2YXIgd29yayA9IHN0YXRlLndvcms7XHJcbiAgICB2YXIgbGVucyA9IHN0YXRlLmxlbnM7XHJcbiAgICB2YXIgbGVuc19vZmZzZXQgPSAodHlwZSA9PSBESVNUUyA/IHN0YXRlLm5sZW4gOiAwKTtcclxuICAgIHZhciBzdGF0ZV9jb2RlcyA9IHN0YXRlLmNvZGVzO1xyXG4gICAgdmFyIGNvZGVzO1xyXG4gICAgaWYodHlwZSA9PSBMRU5TKVxyXG4gICAgICAgIGNvZGVzID0gc3RhdGUubmxlbjtcclxuICAgIGVsc2UgaWYodHlwZSA9PSBESVNUUylcclxuICAgICAgICBjb2RlcyA9IHN0YXRlLm5kaXN0O1xyXG4gICAgZWxzZSAvLyBDT0RFU1xyXG4gICAgICAgIGNvZGVzID0gMTk7XHJcblxyXG4gICAgdmFyIGxlbjsgICAgICAgICAgICAgICAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqL1xyXG4gICAgdmFyIHN5bTsgICAgICAgICAgICAgICAvKiBpbmRleCBvZiBjb2RlIHN5bWJvbHMgKi9cclxuICAgIHZhciBtaW4sIG1heDsgICAgICAgICAgLyogbWluaW11bSBhbmQgbWF4aW11bSBjb2RlIGxlbmd0aHMgKi9cclxuICAgIHZhciByb290OyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHJvb3QgdGFibGUgKi9cclxuICAgIHZhciBjdXJyOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIGN1cnJlbnQgdGFibGUgKi9cclxuICAgIHZhciBkcm9wOyAgICAgICAgICAgICAgLyogY29kZSBiaXRzIHRvIGRyb3AgZm9yIHN1Yi10YWJsZSAqL1xyXG4gICAgdmFyIGxlZnQ7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqL1xyXG4gICAgdmFyIHVzZWQ7ICAgICAgICAgICAgICAvKiBjb2RlIGVudHJpZXMgaW4gdGFibGUgdXNlZCAqL1xyXG4gICAgdmFyIGh1ZmY7ICAgICAgICAgICAgICAvKiBIdWZmbWFuIGNvZGUgKi9cclxuICAgIHZhciBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xyXG4gICAgdmFyIGZpbGw7ICAgICAgICAgICAgICAvKiBpbmRleCBmb3IgcmVwbGljYXRpbmcgZW50cmllcyAqL1xyXG4gICAgdmFyIGxvdzsgICAgICAgICAgICAgICAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovXHJcbiAgICB2YXIgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cclxuICAgIHZhciBoZXJlOyAgICAgICAgICAgICAgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXHJcbiAgICB2YXIgbmV4dDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovXHJcbiAgICB2YXIgYmFzZTsgICAgICAgICAgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXHJcbiAgICB2YXIgYmFzZV9vZmZzZXQ7XHJcbiAgICB2YXIgZXh0cmE7ICAgICAgICAgICAgIC8qIGV4dHJhIGJpdHMgdGFibGUgdG8gdXNlICovXHJcbiAgICB2YXIgZXh0cmFfb2Zmc2V0O1xyXG4gICAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHVzZSBiYXNlIGFuZCBleHRyYSBmb3Igc3ltYm9sID4gZW5kICovXHJcbiAgICB2YXIgY291bnQgPSBuZXcgQXJyYXkoTUFYQklUUysxKTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXHJcbiAgICB2YXIgb2ZmcyA9IG5ldyBBcnJheShNQVhCSVRTKzEpOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi9cclxuXHJcbiAgICAvKlxyXG4gICAgICBQcm9jZXNzIGEgc2V0IG9mIGNvZGUgbGVuZ3RocyB0byBjcmVhdGUgYSBjYW5vbmljYWwgSHVmZm1hbiBjb2RlLiAgVGhlXHJcbiAgICAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZVxyXG4gICAgICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxyXG4gICAgICBzeW1ib2xzIGJ5IGxlbmd0aCBmcm9tIHNob3J0IHRvIGxvbmcsIGFuZCByZXRhaW5pbmcgdGhlIHN5bWJvbCBvcmRlclxyXG4gICAgICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzXHJcbiAgICAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXHJcbiAgICAgIGluY3JlbWVudHMgZm9yIHRoZSBzYW1lIGxlbmd0aCwgYW5kIHplcm9zIGFyZSBhcHBlbmRlZCBhcyB0aGUgbGVuZ3RoXHJcbiAgICAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHNcclxuICAgICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxyXG4gICAgICBkZWNvZGluZyB0YWJsZXMgYXJlIGJ1aWx0IGluIHRoZSBsYXJnZSBsb29wIGJlbG93LCB0aGUgaW50ZWdlciBjb2Rlc1xyXG4gICAgICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLlxyXG5cclxuICAgICAgVGhpcyByb3V0aW5lIGFzc3VtZXMsIGJ1dCBkb2VzIG5vdCBjaGVjaywgdGhhdCBhbGwgb2YgdGhlIGVudHJpZXMgaW5cclxuICAgICAgbGVuc1tdIGFyZSBpbiB0aGUgcmFuZ2UgMC4uTUFYQklUUy4gIFRoZSBjYWxsZXIgbXVzdCBhc3N1cmUgdGhpcy5cclxuICAgICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXRcclxuICAgICAgc3ltYm9sIGRvZXMgbm90IG9jY3VyIGluIHRoaXMgY29kZS5cclxuXHJcbiAgICAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcclxuICAgICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGggaW4gdGhlXHJcbiAgICAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZFxyXG4gICAgICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcclxuICAgICAgdGhlIGNhbGxlci5cclxuXHJcbiAgICAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcclxuICAgICAgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoIGNvZGVzLCBkZXRlcm1pbmluZyBpZiB0aGVyZSBhcmUgYW55XHJcbiAgICAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkXHJcbiAgICAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxyXG4gICAgICBkZWNvZGluZyB0YWJsZXMuXHJcbiAgICAqL1xyXG5cclxuICAgIC8qIGFjY3VtdWxhdGUgbGVuZ3RocyBmb3IgY29kZXMgKGFzc3VtZXMgbGVuc1tdIGFsbCBpbiAwLi5NQVhCSVRTKSAqL1xyXG4gICAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspXHJcbiAgICAgICAgY291bnRbbGVuXSA9IDA7XHJcbiAgICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKylcclxuICAgICAgICBjb3VudFtsZW5zW2xlbnNfb2Zmc2V0ICsgc3ltXV0rKztcclxuXHJcbiAgICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xyXG4gICAgcm9vdCA9IGJpdHM7XHJcblxyXG4gICAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pXHJcbiAgICAgICAgaWYgKGNvdW50W21heF0gIT0gMCkgYnJlYWs7XHJcbiAgICBpZiAocm9vdCA+IG1heCkgcm9vdCA9IG1heDtcclxuICAgIGlmIChtYXggPT0gMCkge1xyXG4gICAgICAgIC8qIG5vIHN5bWJvbHMgdG8gY29kZSBhdCBhbGwgKi9cclxuICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXHJcbiAgICAgICAgaGVyZSA9IHtvcDo2NCwgYml0czoxLCB2YWw6MH07XHJcbiAgICAgICAgc3RhdGVfY29kZXNbdGFibGUrK10gPSBoZXJlOyAvKiBtYWtlIGEgdGFibGUgdG8gZm9yY2UgYW4gZXJyb3IgKi9cclxuICAgICAgICBzdGF0ZV9jb2Rlc1t0YWJsZSsrXSA9IGhlcmU7XHJcbiAgICAgICAgaWYodHlwZSA9PSBESVNUUykgc3RhdGUuZGlzdGJpdHMgPSAxOyBlbHNlIHN0YXRlLmxlbmJpdHMgPSAxOyAvLyAqYml0cyA9IDE7XHJcbiAgICAgICAgc3RhdGUubmV4dCA9IHRhYmxlO1xyXG4gICAgICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xyXG4gICAgfVxyXG4gICAgZm9yIChtaW4gPSAxOyBtaW4gPCBtYXg7IG1pbisrKVxyXG4gICAgICAgIGlmIChjb3VudFttaW5dICE9IDApIGJyZWFrO1xyXG4gICAgaWYgKHJvb3QgPCBtaW4pIHJvb3QgPSBtaW47XHJcblxyXG4gICAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXHJcbiAgICBsZWZ0ID0gMTtcclxuICAgIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XHJcbiAgICAgICAgbGVmdCA8PD0gMTtcclxuICAgICAgICBsZWZ0IC09IGNvdW50W2xlbl07XHJcbiAgICAgICAgaWYgKGxlZnQgPCAwKSByZXR1cm4gLTE7ICAgICAgICAvKiBvdmVyLXN1YnNjcmliZWQgKi9cclxuICAgIH1cclxuICAgIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PSBDT0RFUyB8fCBtYXggIT0gMSkpIHtcclxuICAgICAgICBzdGF0ZS5uZXh0ID0gdGFibGU7XHJcbiAgICAgICAgcmV0dXJuIC0xOyAgICAgICAgICAgICAgICAgICAgICAvKiBpbmNvbXBsZXRlIHNldCAqL1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXHJcbiAgICBvZmZzWzFdID0gMDtcclxuICAgIGZvciAobGVuID0gMTsgbGVuIDwgTUFYQklUUzsgbGVuKyspXHJcbiAgICAgICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XHJcblxyXG4gICAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xyXG4gICAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspXHJcbiAgICAgICAgaWYgKGxlbnNbbGVuc19vZmZzZXQgKyBzeW1dICE9IDApIHdvcmtbb2Zmc1tsZW5zW2xlbnNfb2Zmc2V0ICsgc3ltXV0rK10gPSBzeW07XHJcblxyXG4gICAgLypcclxuICAgICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXHJcbiAgICAgIGZpbGxlZCBpcyBhdCBuZXh0IGFuZCBoYXMgY3VyciBpbmRleCBiaXRzLiAgVGhlIGNvZGUgYmVpbmcgdXNlZCBpcyBodWZmXHJcbiAgICAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcFxyXG4gICAgICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXHJcbiAgICAgIHRob3NlIHRvcCBkcm9wICsgY3VyciAtIGxlbiBiaXRzIGFyZSBpbmNyZW1lbnRlZCB0aHJvdWdoIGFsbCB2YWx1ZXMgdG9cclxuICAgICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuXHJcblxyXG4gICAgICByb290IGlzIHRoZSBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgdGhlIHJvb3QgdGFibGUuICBXaGVuIGxlbiBleGNlZWRzXHJcbiAgICAgIHJvb3QsIHN1Yi10YWJsZXMgYXJlIGNyZWF0ZWQgcG9pbnRlZCB0byBieSB0aGUgcm9vdCBlbnRyeSB3aXRoIGFuIGluZGV4XHJcbiAgICAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXHJcbiAgICAgIG5ldyBzdWItdGFibGUgc2hvdWxkIGJlIHN0YXJ0ZWQuICBkcm9wIGlzIHplcm8gd2hlbiB0aGUgcm9vdCB0YWJsZSBpc1xyXG4gICAgICBiZWluZyBmaWxsZWQsIGFuZCBkcm9wIGlzIHJvb3Qgd2hlbiBzdWItdGFibGVzIGFyZSBiZWluZyBmaWxsZWQuXHJcblxyXG4gICAgICBXaGVuIGEgbmV3IHN1Yi10YWJsZSBpcyBuZWVkZWQsIGl0IGlzIG5lY2Vzc2FyeSB0byBsb29rIGFoZWFkIGluIHRoZVxyXG4gICAgICBjb2RlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHdoYXQgc2l6ZSBzdWItdGFibGUgaXMgbmVlZGVkLiAgVGhlIGxlbmd0aFxyXG4gICAgICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxyXG4gICAgICBlbnRlcmVkIGluIHRoZSB0YWJsZXMuXHJcblxyXG4gICAgICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxyXG4gICAgICBwcm92aWRlZCAqdGFibGUgc3BhY2UuICBJdCBpcyBjaGVja2VkIGZvciBMRU5TIGFuZCBESVNUIHRhYmxlcyBhZ2FpbnN0XHJcbiAgICAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW5cclxuICAgICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxyXG4gICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuXHJcbiAgICAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cclxuICAgICAgYWxsIGNvZGVzIG9mIGxlbmd0aCBtYXgsIGkuZS4gYWxsIGNvZGVzLCBoYXZlIGJlZW4gcHJvY2Vzc2VkLiAgVGhpc1xyXG4gICAgICByb3V0aW5lIHBlcm1pdHMgaW5jb21wbGV0ZSBjb2Rlcywgc28gYW5vdGhlciBsb29wIGFmdGVyIHRoaXMgb25lIGZpbGxzXHJcbiAgICAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cclxuICAgICovXHJcblxyXG4gICAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSBDT0RFUzpcclxuICAgICAgICBiYXNlID0gZXh0cmEgPSB3b3JrOyAgICAvKiBkdW1teSB2YWx1ZS0tbm90IHVzZWQgKi9cclxuICAgICAgICBiYXNlX29mZnNldCA9IDA7XHJcbiAgICAgICAgZXh0cmFfb2Zmc2V0ID0gMDtcclxuICAgICAgICBlbmQgPSAxOTtcclxuICAgICAgICBicmVhaztcclxuICAgIGNhc2UgTEVOUzpcclxuICAgICAgICBiYXNlID0gaW5mbGF0ZV90YWJsZV9sYmFzZTtcclxuICAgICAgICBiYXNlX29mZnNldCA9IC0yNTc7IC8vIGJhc2UgLT0gMjU3O1xyXG4gICAgICAgIGV4dHJhID0gaW5mbGF0ZV90YWJsZV9sZXh0O1xyXG4gICAgICAgIGV4dHJhX29mZnNldCA9IC0yNTc7IC8vIGV4dHJhIC09IDI1NztcclxuICAgICAgICBlbmQgPSAyNTY7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OiAgICAgICAgICAgIC8qIERJU1RTICovXHJcbiAgICAgICAgYmFzZSA9IGluZmxhdGVfdGFibGVfZGJhc2U7XHJcbiAgICAgICAgZXh0cmEgPSBpbmZsYXRlX3RhYmxlX2RleHQ7XHJcbiAgICAgICAgYmFzZV9vZmZzZXQgPSAwO1xyXG4gICAgICAgIGV4dHJhX29mZnNldCA9IDA7XHJcbiAgICAgICAgZW5kID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyogaW5pdGlhbGl6ZSBzdGF0ZSBmb3IgbG9vcCAqL1xyXG4gICAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cclxuICAgIHN5bSA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xyXG4gICAgbGVuID0gbWluOyAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgbGVuZ3RoICovXHJcbiAgICBuZXh0ID0gdGFibGU7ICAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovXHJcbiAgICBjdXJyID0gcm9vdDsgICAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSBpbmRleCBiaXRzICovXHJcbiAgICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xyXG4gICAgbG93ID0gLTE7ICAgICAgICAgICAgICAgICAgIC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi9cclxuICAgIHVzZWQgPSAxIDw8IHJvb3Q7ICAgICAgICAgICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovXHJcbiAgICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xyXG5cclxuICAgIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqL1xyXG4gICAgaWYgKCh0eXBlID09IExFTlMgJiYgdXNlZCA+PSBFTk9VR0hfTEVOUykgfHxcclxuICAgICAgICAodHlwZSA9PSBESVNUUyAmJiB1c2VkID49IEVOT1VHSF9ESVNUUykpIHtcclxuICAgICAgICBzdGF0ZS5uZXh0ID0gdGFibGU7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyogcHJvY2VzcyBhbGwgY29kZXMgYW5kIG1ha2UgdGFibGUgZW50cmllcyAqL1xyXG4gICAgZm9yICg7Oykge1xyXG4gICAgICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqL1xyXG4gICAgICAgIGhlcmUgPSB7b3A6MCwgYml0czpsZW4gLSBkcm9wLCB2YWw6MH07XHJcbiAgICAgICAgaWYgKHdvcmtbc3ltXSA8IGVuZCkge1xyXG4gICAgICAgICAgICBoZXJlLnZhbCA9IHdvcmtbc3ltXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAod29ya1tzeW1dID4gZW5kKSB7XHJcbiAgICAgICAgICAgIGhlcmUub3AgPSBleHRyYVtleHRyYV9vZmZzZXQgKyB3b3JrW3N5bV1dO1xyXG4gICAgICAgICAgICBoZXJlLnZhbCA9IGJhc2VbYmFzZV9vZmZzZXQgKyB3b3JrW3N5bV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGVyZS5vcCA9IDMyICsgNjQ7ICAgICAgICAgLyogZW5kIG9mIGJsb2NrICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xyXG4gICAgICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcclxuICAgICAgICBmaWxsID0gMSA8PCBjdXJyO1xyXG4gICAgICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBmaWxsIC09IGluY3I7XHJcbiAgICAgICAgICAgIHN0YXRlX2NvZGVzW25leHQgKyAoaHVmZiA+Pj4gZHJvcCkgKyBmaWxsXSA9IGhlcmU7XHJcbiAgICAgICAgfSB3aGlsZSAoZmlsbCAhPSAwKTtcclxuXHJcbiAgICAgICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cclxuICAgICAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XHJcbiAgICAgICAgd2hpbGUgKGh1ZmYgJiBpbmNyKVxyXG4gICAgICAgICAgICBpbmNyID4+Pj0gMTtcclxuICAgICAgICBpZiAoaW5jciAhPSAwKSB7XHJcbiAgICAgICAgICAgIGh1ZmYgJj0gaW5jciAtIDE7XHJcbiAgICAgICAgICAgIGh1ZmYgKz0gaW5jcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBodWZmID0gMDtcclxuXHJcbiAgICAgICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXHJcbiAgICAgICAgc3ltKys7XHJcbiAgICAgICAgaWYgKC0tKGNvdW50W2xlbl0pID09IDApIHtcclxuICAgICAgICAgICAgaWYgKGxlbiA9PSBtYXgpIGJyZWFrO1xyXG4gICAgICAgICAgICBsZW4gPSBsZW5zW2xlbnNfb2Zmc2V0ICsgd29ya1tzeW1dXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xyXG4gICAgICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT0gbG93KSB7XHJcbiAgICAgICAgICAgIC8qIGlmIGZpcnN0IHRpbWUsIHRyYW5zaXRpb24gdG8gc3ViLXRhYmxlcyAqL1xyXG4gICAgICAgICAgICBpZiAoZHJvcCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgZHJvcCA9IHJvb3Q7XHJcblxyXG4gICAgICAgICAgICAvKiBpbmNyZW1lbnQgcGFzdCBsYXN0IHRhYmxlICovXHJcbiAgICAgICAgICAgIG5leHQgKz0gbWluOyAgICAgICAgICAgIC8qIGhlcmUgbWluIGlzIDEgPDwgY3VyciAqL1xyXG5cclxuICAgICAgICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovXHJcbiAgICAgICAgICAgIGN1cnIgPSBsZW4gLSBkcm9wO1xyXG4gICAgICAgICAgICBsZWZ0ID0gKDEgPDwgY3Vycik7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJyICsgZHJvcCA8IG1heCkge1xyXG4gICAgICAgICAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdCA8PSAwKSBicmVhaztcclxuICAgICAgICAgICAgICAgIGN1cnIrKztcclxuICAgICAgICAgICAgICAgIGxlZnQgPDw9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qIGNoZWNrIGZvciBlbm91Z2ggc3BhY2UgKi9cclxuICAgICAgICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XHJcbiAgICAgICAgICAgIGlmICgodHlwZSA9PSBMRU5TICYmIHVzZWQgPj0gRU5PVUdIX0xFTlMpIHx8XHJcbiAgICAgICAgICAgICAgICAodHlwZSA9PSBESVNUUyAmJiB1c2VkID49IEVOT1VHSF9ESVNUUykpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLm5leHQgPSB0YWJsZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqL1xyXG4gICAgICAgICAgICBsb3cgPSBodWZmICYgbWFzaztcclxuICAgICAgICAgICAgc3RhdGVfY29kZXNbdGFibGUgKyBsb3ddID0ge29wOmN1cnIsIGJpdHM6cm9vdCwgdmFsOm5leHQgLSB0YWJsZX07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlXHJcbiAgICAgICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZVxyXG4gICAgICAgbWF4aW11bSBjb2RlIGxlbmd0aCB0aGF0IHdhcyBhbGxvd2VkIHRvIGdldCB0aGlzIGZhciBpcyBvbmUgYml0KSAqL1xyXG4gICAgaWYgKGh1ZmYgIT0gMCkge1xyXG4gICAgICAgIHN0YXRlX2NvZGVzW25leHQgKyBodWZmXSA9IHtvcDo2NCwgYml0czpsZW4gLSBkcm9wLCB2YWw6MH07XHJcbiAgICB9XHJcblxyXG4gICAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXHJcbiAgICBzdGF0ZS5uZXh0ID0gdGFibGUgKyB1c2VkO1xyXG4gICAgaWYodHlwZSA9PSBESVNUUykgc3RhdGUuZGlzdGJpdHMgPSByb290OyBlbHNlIHN0YXRlLmxlbmJpdHMgPSByb290OyAvLypiaXRzID0gcm9vdDtcclxuICAgIHJldHVybiAwO1xyXG59XHJcblxyXG4vKiBpbmZmYXN0LmMgLS0gZmFzdCBkZWNvZGluZ1xyXG4gKiBDb3B5cmlnaHQgKEMpIDE5OTUtMjAwOCwgMjAxMCBNYXJrIEFkbGVyXHJcbiAqIEZvciBjb25kaXRpb25zIG9mIGRpc3RyaWJ1dGlvbiBhbmQgdXNlLCBzZWUgY29weXJpZ2h0IG5vdGljZSBpbiB6bGliLmhcclxuICovXHJcblxyXG4vKlxyXG4gICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nXHJcbiAgIGxpdGVyYWwgYW5kIG1hdGNoIGJ5dGVzIHVudGlsIGVpdGhlciBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBpc1xyXG4gICBhdmFpbGFibGUsIGFuIGVuZC1vZi1ibG9jayBpcyBlbmNvdW50ZXJlZCwgb3IgYSBkYXRhIGVycm9yIGlzIGVuY291bnRlcmVkLlxyXG4gICBXaGVuIGxhcmdlIGVub3VnaCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yXHJcbiAgIGV4YW1wbGUsIGEgMTZLIGlucHV0IGJ1ZmZlciBhbmQgYSA2NEsgb3V0cHV0IGJ1ZmZlciwgbW9yZSB0aGFuIDk1JSBvZiB0aGVcclxuICAgaW5mbGF0ZSBleGVjdXRpb24gdGltZSBpcyBzcGVudCBpbiB0aGlzIHJvdXRpbmUuXHJcblxyXG4gICBFbnRyeSBhc3N1bXB0aW9uczpcclxuXHJcbiAgICAgICAgc3RhdGUtPm1vZGUgPT0gTEVOXHJcbiAgICAgICAgc3RybS0+YXZhaWxfaW4gPj0gNlxyXG4gICAgICAgIHN0cm0tPmF2YWlsX291dCA+PSAyNThcclxuICAgICAgICBzdGFydCA+PSBzdHJtLT5hdmFpbF9vdXRcclxuICAgICAgICBzdGF0ZS0+Yml0cyA8IDhcclxuXHJcbiAgIE9uIHJldHVybiwgc3RhdGUtPm1vZGUgaXMgb25lIG9mOlxyXG5cclxuICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcclxuICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xyXG4gICAgICAgIEJBRCAtLSBlcnJvciBpbiBibG9jayBkYXRhXHJcblxyXG4gICBOb3RlczpcclxuXHJcbiAgICAtIFRoZSBtYXhpbXVtIGlucHV0IGJpdHMgdXNlZCBieSBhIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGlzIDE1IGJpdHMgZm9yIHRoZVxyXG4gICAgICBsZW5ndGggY29kZSwgNSBiaXRzIGZvciB0aGUgbGVuZ3RoIGV4dHJhLCAxNSBiaXRzIGZvciB0aGUgZGlzdGFuY2UgY29kZSxcclxuICAgICAgYW5kIDEzIGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBleHRyYS4gIFRoaXMgdG90YWxzIDQ4IGJpdHMsIG9yIHNpeCBieXRlcy5cclxuICAgICAgVGhlcmVmb3JlIGlmIHN0cm0tPmF2YWlsX2luID49IDYsIHRoZW4gdGhlcmUgaXMgZW5vdWdoIGlucHV0IHRvIGF2b2lkXHJcbiAgICAgIGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuXHJcblxyXG4gICAgLSBUaGUgbWF4aW11bSBieXRlcyB0aGF0IGEgc2luZ2xlIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGNhbiBvdXRwdXQgaXMgMjU4XHJcbiAgICAgIGJ5dGVzLCB3aGljaCBpcyB0aGUgbWF4aW11bSBsZW5ndGggdGhhdCBjYW4gYmUgY29kZWQuICBpbmZsYXRlX2Zhc3QoKVxyXG4gICAgICByZXF1aXJlcyBzdHJtLT5hdmFpbF9vdXQgPj0gMjU4IGZvciBlYWNoIGxvb3AgdG8gYXZvaWQgY2hlY2tpbmcgZm9yXHJcbiAgICAgIG91dHB1dCBzcGFjZS5cclxuICovXHJcbmZ1bmN0aW9uIGluZmxhdGVfZmFzdChzdHJtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQpIC8qIGluZmxhdGUoKSdzIHN0YXJ0aW5nIHZhbHVlIGZvciBzdHJtLT5hdmFpbF9vdXQgKi9cclxue1xyXG4gICAgdmFyIHN0YXRlO1xyXG4gICAgdmFyIGlucHV0X2RhdGE7ICAgICAgLyogbG9jYWwgc3RybS0+aW5wdXRfZGF0YSAqL1xyXG4gICAgdmFyIG5leHRfaW47ICAgICAgLyogemxpYi5qczogaW5kZXggb2YgaW5wdXRfZGF0YSAqL1xyXG4gICAgdmFyIGxhc3Q7ICAgIC8qIHdoaWxlIG5leHRfaW4gPCBsYXN0LCBlbm91Z2ggaW5wdXQgYXZhaWxhYmxlICovXHJcbiAgICB2YXIgb3V0OyAgICAgLyogbG9jYWwgc3RybS5uZXh0X291dCAqL1xyXG4gICAgdmFyIGJlZzsgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5uZXh0X291dCAqL1xyXG4gICAgdmFyIGVuZDsgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xyXG4vL05PU1BSVCAjaWZkZWYgSU5GTEFURV9TVFJJQ1RcclxuLy8gICAgdW5zaWduZWQgZG1heDsgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xyXG4vLyNlbmRpZlxyXG4gICAgdmFyIHdzaXplOyAgICAgICAgICAgICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5kb3cgKi9cclxuICAgIHZhciB3aGF2ZTsgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xyXG4gICAgdmFyIHduZXh0OyAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cclxuICAgIHZhciB3aW5kb3c7ICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cclxuICAgIHZhciBob2xkOyAgICAgICAgIC8qIGxvY2FsIHN0cm0tPmhvbGQgKi9cclxuICAgIHZhciBiaXRzOyAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS0+Yml0cyAqL1xyXG4gICAgdmFyIGNvZGVzOyAgICAgICAgICAgICAvKiB6bGliLmpzOiBsb2NhbCBzdGF0ZS5jb2RlcyAqL1xyXG4gICAgdmFyIGxjb2RlOyAgICAgIC8qIGxvY2FsIHN0cm0tPmxlbmNvZGUgKi9cclxuICAgIHZhciBkY29kZTsgICAgICAvKiBsb2NhbCBzdHJtLT5kaXN0Y29kZSAqL1xyXG4gICAgdmFyIGxtYXNrOyAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBsZW5ndGggY29kZXMgKi9cclxuICAgIHZhciBkbWFzazsgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cclxuICAgIHZhciBoZXJlOyAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xyXG4gICAgdmFyIG9wOyAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cclxuICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovXHJcbiAgICB2YXIgbGVuOyAgICAgICAgICAgICAgIC8qIG1hdGNoIGxlbmd0aCwgdW51c2VkIGJ5dGVzICovXHJcbiAgICB2YXIgZGlzdDsgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXHJcbiAgICAvLyAgICB2YXIgZnJvbTsgICAgLyogd2hlcmUgdG8gY29weSBtYXRjaCBmcm9tICovXHJcbiAgICB2YXIgZnJvbV93aW5kb3dfb2Zmc2V0ID0gLTE7IC8qIGluZGV4IG9mIHdpbmRvd1tdICovXHJcbiAgICB2YXIgZnJvbV9vdXRfb2Zmc2V0ID0gLTE7IC8qIGluZGV4IG9mIG5leHRfb3V0W10gKi9cclxuXHJcbiAgICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xyXG4gICAgc3RhdGUgPSBzdHJtLnN0YXRlO1xyXG4gICAgaW5wdXRfZGF0YSA9IHN0cm0uaW5wdXRfZGF0YTtcclxuICAgIG5leHRfaW4gPSBzdHJtLm5leHRfaW47XHJcbiAgICBsYXN0ID0gbmV4dF9pbiArIHN0cm0uYXZhaWxfaW4gLSA1O1xyXG4gICAgb3V0ID0gc3RybS5uZXh0X291dDtcclxuICAgIGJlZyA9IG91dCAtIChzdGFydCAtIHN0cm0uYXZhaWxfb3V0KTtcclxuICAgIGVuZCA9IG91dCArIChzdHJtLmF2YWlsX291dCAtIDI1Nyk7XHJcbi8vTk9TUFJUICNpZmRlZiBJTkZMQVRFX1NUUklDVFxyXG4vLyAgICBkbWF4ID0gc3RhdGUtPmRtYXg7XHJcbi8vI2VuZGlmXHJcbiAgICB3c2l6ZSA9IHN0YXRlLndzaXplO1xyXG4gICAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcclxuICAgIHduZXh0ID0gc3RhdGUud25leHQ7XHJcbiAgICB3aW5kb3cgPSBzdGF0ZS53aW5kb3c7XHJcbiAgICBob2xkID0gc3RhdGUuaG9sZDtcclxuICAgIGJpdHMgPSBzdGF0ZS5iaXRzO1xyXG4gICAgY29kZXMgPSBzdGF0ZS5jb2RlcztcclxuICAgIGxjb2RlID0gc3RhdGUubGVuY29kZTtcclxuICAgIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XHJcbiAgICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcclxuICAgIGRtYXNrID0gKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMTtcclxuXHJcbiAgICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcclxuICAgICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXHJcbmxvb3A6IGRvIHtcclxuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XHJcbiAgICAgICAgICAgIGhvbGQgKz0gKGlucHV0X2RhdGEuY2hhckNvZGVBdChuZXh0X2luKyspICYgMHhmZikgPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgICBob2xkICs9IChpbnB1dF9kYXRhLmNoYXJDb2RlQXQobmV4dF9pbisrKSAmIDB4ZmYpIDw8IGJpdHM7XHJcbiAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICB9XHJcbiAgICAgICAgaGVyZSA9IGNvZGVzW2xjb2RlICsgKGhvbGQgJiBsbWFzayldO1xyXG4gICAgZG9sZW46IHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgb3AgPSBoZXJlLmJpdHM7XHJcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcclxuICAgICAgICAgICAgYml0cyAtPSBvcDtcclxuICAgICAgICAgICAgb3AgPSBoZXJlLm9wO1xyXG4gICAgICAgICAgICBpZiAob3AgPT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGl0ZXJhbCAqL1xyXG4vLyAgICAgICAgICAgIFRyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xyXG4vLyAgICAgICAgICAgICAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcclxuLy8gICAgICAgICAgICAgICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xyXG4gICAgICAgICAgICAgICAgc3RybS5vdXRwdXRfZGF0YSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGhlcmUudmFsKTtcclxuICAgICAgICAgICAgICAgIG91dCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggYmFzZSAqL1xyXG4gICAgICAgICAgICAgICAgbGVuID0gaGVyZS52YWw7XHJcbiAgICAgICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IChpbnB1dF9kYXRhLmNoYXJDb2RlQXQobmV4dF9pbisrKSAmIDB4ZmYpIDw8IGJpdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7XHJcbiAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJpdHMgPCAxNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gKGlucHV0X2RhdGEuY2hhckNvZGVBdChuZXh0X2luKyspICYgMHhmZikgPDwgYml0cztcclxuICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSAoaW5wdXRfZGF0YS5jaGFyQ29kZUF0KG5leHRfaW4rKykgJiAweGZmKSA8PCBiaXRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGhlcmUgPSBjb2Rlc1tkY29kZSArIChob2xkICYgZG1hc2spXTtcclxuICAgICAgICAgICAgZG9kaXN0OiB3aGlsZSh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3AgPSBoZXJlLmJpdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgb3AgPSBoZXJlLm9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhc2UgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdCA9IGhlcmUudmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gKGlucHV0X2RhdGEuY2hhckNvZGVBdChuZXh0X2luKyspICYgMHhmZikgPDwgYml0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IChpbnB1dF9kYXRhLmNoYXJDb2RlQXQobmV4dF9pbisrKSAmIDB4ZmYpIDw8IGJpdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcclxuLy9OT1NQUlQgI2lmZGVmIElORkxBVEVfU1RSSUNUXHJcbi8vICAgICAgICAgICAgICAgIGlmIChkaXN0ID4gZG1heCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgc3RybS0+bXNnID0gKGNoYXIgKilcImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCI7XHJcbi8vICAgICAgICAgICAgICAgICAgICBzdGF0ZS0+bW9kZSA9IEJBRDtcclxuLy8gICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XHJcbi8vICAgICAgICAgICAgICAgIH1cclxuLy8jZW5kaWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IG9wO1xyXG4vLyAgICAgICAgICAgICAgICBUcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBkaXN0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdCA+IG9wKSB7ICAgICAgICAgICAgICAgIC8qIHNlZSBpZiBjb3B5IGZyb20gd2luZG93ICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayBpbiB3aW5kb3cgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy9OT1NQUlQgI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPD0gb3AgLSB3aGF2ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQVVAob3V0KSA9IDA7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcCAtIHdoYXZlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgUFVQKG91dCkgPSAwO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wID09IDApIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IG91dCAtIGRpc3Q7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBVUChvdXQpID0gUFVQKGZyb20pO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8jZW5kaWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy8gaWYgKG9wID4gd2hhdmUpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV93aW5kb3dfb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fb3V0X29mZnNldCA9IC0xO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh3bmV4dCA9PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXHJcblx0XHRcdFx0XHRcdFx0XHRmcm9tX3dpbmRvd19vZmZzZXQgKz0gd3NpemUgLSBvcDtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cclxuXHRcdFx0XHRcdFx0XHRcdFx0bGVuIC09IG9wO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHJtLm91dHB1dF9kYXRhICs9IHdpbmRvdy5zdWJzdHJpbmcoZnJvbV93aW5kb3dfb2Zmc2V0LCBmcm9tX3dpbmRvd19vZmZzZXQgKyBvcCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG91dCArPSBvcDtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b3AgPSAwO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmcm9tX3dpbmRvd19vZmZzZXQgPSAtMTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZnJvbV9vdXRfb2Zmc2V0ID0gb3V0IC0gZGlzdDsgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcbi8vTk9UUkVBQ0hFRCBlbHNlIGlmICh3bmV4dCA8IG9wKSB7ICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovXHJcbi8vTk9UUkVBQ0hFRCAgICAgZnJvbSArPSB3c2l6ZSArIHduZXh0IC0gb3A7XHJcbi8vTk9UUkVBQ0hFRCAgICAgb3AgLT0gd25leHQ7XHJcbi8vTk9UUkVBQ0hFRCAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIGVuZCBvZiB3aW5kb3cgKi9cclxuLy9OT1RSRUFDSEVEICAgICAgICAgbGVuIC09IG9wO1xyXG4vL05PVFJFQUNIRUQgICAgICAgICBkbyB7XHJcbi8vTk9UUkVBQ0hFRCAgICAgICAgICAgICBQVVAob3V0KSA9IFBVUChmcm9tKTtcclxuLy9OT1RSRUFDSEVEICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XHJcbi8vTk9UUkVBQ0hFRCAgICAgICAgIGZyb20gPSB3aW5kb3cgLSBPRkY7XHJcbi8vTk9UUkVBQ0hFRCAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgeyAgLyogc29tZSBmcm9tIHN0YXJ0IG9mIHdpbmRvdyAqL1xyXG4vL05PVFJFQUNIRUQgICAgICAgICAgICAgb3AgPSB3bmV4dDtcclxuLy9OT1RSRUFDSEVEICAgICAgICAgICAgIGxlbiAtPSBvcDtcclxuLy9OT1RSRUFDSEVEICAgICAgICAgICAgIGRvIHtcclxuLy9OT1RSRUFDSEVEICAgICAgICAgICAgICAgICBQVVAob3V0KSA9IFBVUChmcm9tKTtcclxuLy9OT1RSRUFDSEVEICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xyXG4vL05PVFJFQUNIRUQgICAgICAgICAgICAgZnJvbSA9IG91dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xyXG4vL05PVFJFQUNIRUQgICAgICAgICB9XHJcbi8vTk9UUkVBQ0hFRCAgICAgfVxyXG4vL05PVFJFQUNIRUQgfVxyXG5cdFx0XHRcdFx0XHRcdGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xyXG5cdFx0XHRcdFx0XHRcdFx0ZnJvbV93aW5kb3dfb2Zmc2V0ICs9IHduZXh0IC0gb3A7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXHJcblx0XHRcdFx0XHRcdFx0XHRcdGxlbiAtPSBvcDtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RybS5vdXRwdXRfZGF0YSArPSB3aW5kb3cuc3Vic3RyaW5nKGZyb21fd2luZG93X29mZnNldCwgZnJvbV93aW5kb3dfb2Zmc2V0ICsgb3ApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvdXQgKz0gb3A7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZyb21fd2luZG93X29mZnNldCA9IC0xO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmcm9tX291dF9vZmZzZXQgPSBvdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fd2luZG93X29mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9vdXRfb2Zmc2V0ID0gb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21fd2luZG93X29mZnNldCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm91dHB1dF9kYXRhICs9IHdpbmRvdy5zdWJzdHJpbmcoZnJvbV93aW5kb3dfb2Zmc2V0LCBmcm9tX3dpbmRvd19vZmZzZXQgKyBsZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IGxlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fd2luZG93X29mZnNldCArPSBsZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuX2lubmVyID0gbGVuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGVuX2lubmVyID4gb3V0IC0gZnJvbV9vdXRfb2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5faW5uZXIgPSBvdXQgLSBmcm9tX291dF9vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm91dHB1dF9kYXRhICs9IHN0cm0ub3V0cHV0X2RhdGEuc3Vic3RyaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fb3V0X29mZnNldCwgZnJvbV9vdXRfb2Zmc2V0ICsgbGVuX2lubmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSBsZW5faW5uZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gbGVuX2lubmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9vdXRfb2Zmc2V0ICs9IGxlbl9pbm5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSBsZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobGVuID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ub3V0cHV0X2RhdGEgKz0gc3RybS5vdXRwdXRfZGF0YS5jaGFyQXQoZnJvbV9vdXRfb2Zmc2V0KyspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ub3V0cHV0X2RhdGEgKz0gc3RybS5vdXRwdXRfZGF0YS5jaGFyQXQoZnJvbV9vdXRfb2Zmc2V0KyspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ub3V0cHV0X2RhdGEgKz0gc3RybS5vdXRwdXRfZGF0YS5jaGFyQXQoZnJvbV9vdXRfb2Zmc2V0KyspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ub3V0cHV0X2RhdGEgKz0gc3RybS5vdXRwdXRfZGF0YS5jaGFyQXQoZnJvbV9vdXRfb2Zmc2V0KyspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm91dHB1dF9kYXRhICs9IHN0cm0ub3V0cHV0X2RhdGEuY2hhckF0KGZyb21fb3V0X29mZnNldCsrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT0gMCkgeyAgICAgICAgICAvKiAybmQgbGV2ZWwgZGlzdGFuY2UgY29kZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJlID0gY29kZXNbZGNvZGUgKyAoaGVyZS52YWwgKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgZG9kaXN0OyAvLyBnb3RvIGRvZGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZG9kaXN0OyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xyXG4gICAgICAgICAgICAgICAgaGVyZSA9IGNvZGVzW2xjb2RlICsgKGhlcmUudmFsICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpKV07XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZSBkb2xlbjsgLy8gZ290byBkb2xlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIFRyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGVuZCBvZiBibG9ja1xcblwiKSk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcclxuICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWsgZG9sZW47IH1cclxuICAgIH0gd2hpbGUgKG5leHRfaW4gPCBsYXN0ICYmIG91dCA8IGVuZCk7XHJcblxyXG4gICAgLyogcmV0dXJuIHVudXNlZCBieXRlcyAob24gZW50cnksIGJpdHMgPCA4LCBzbyBpbiB3b24ndCBnbyB0b28gZmFyIGJhY2spICovXHJcbiAgICBsZW4gPSBiaXRzID4+PiAzO1xyXG4gICAgbmV4dF9pbiAtPSBsZW47XHJcbiAgICBiaXRzIC09IGxlbiA8PCAzO1xyXG4gICAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7XHJcblxyXG4gICAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXR1cm4gKi9cclxuICAgIHN0cm0ubmV4dF9pbiA9IG5leHRfaW47XHJcbiAgICBzdHJtLm5leHRfb3V0ID0gb3V0O1xyXG4gICAgc3RybS5hdmFpbF9pbiA9IChuZXh0X2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIG5leHRfaW4pIDogNSAtIChuZXh0X2luIC0gbGFzdCkpO1xyXG4gICAgc3RybS5hdmFpbF9vdXQgPSAob3V0IDwgZW5kID9cclxuICAgICAgICAgICAgICAgICAgICAgIDI1NyArIChlbmQgLSBvdXQpIDogMjU3IC0gKG91dCAtIGVuZCkpO1xyXG4gICAgc3RhdGUuaG9sZCA9IGhvbGQ7XHJcbiAgICBzdGF0ZS5iaXRzID0gYml0cztcclxufVxyXG5cclxuZnVuY3Rpb24gbmV3X2FycmF5KHNpemUpXHJcbntcclxuICAgIHZhciBpO1xyXG4gICAgdmFyIGFyeSA9IG5ldyBBcnJheShzaXplKTtcclxuICAgIGZvcihpID0gMDsgaSA8IHNpemU7IGkrKylcclxuICAgICAgICBhcnlbaV0gPSAwO1xyXG4gICAgcmV0dXJuIGFyeTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0YXJnKG9wdHMsIG5hbWUsIGRlZl92YWx1ZSlcclxue1xyXG4gICAgcmV0dXJuIChvcHRzICYmIChuYW1lIGluIG9wdHMpKSA/IG9wdHNbbmFtZV0gOiBkZWZfdmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrc3VtX25vbmUoKVxyXG57XHJcblx0cmV0dXJuIDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiB6X3N0cmVhbSBjb25zdHJ1Y3RvclxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIGluZmxhdGVfc3RhdGUoKVxyXG57XHJcbiAgICB2YXIgaTtcclxuXHJcbiAgICB0aGlzLm1vZGUgPSAwOyAgICAgICAgICAgICAgLyogY3VycmVudCBpbmZsYXRlIG1vZGUgKi9cclxuICAgIHRoaXMubGFzdCA9IDA7ICAgICAgICAgICAgICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqL1xyXG4gICAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cclxuICAgIHRoaXMuaGF2ZWRpY3QgPSAwOyAgICAgICAgICAvKiB0cnVlIGlmIGRpY3Rpb25hcnkgcHJvdmlkZWQgKi9cclxuICAgIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovXHJcbiAgICB0aGlzLmRtYXggPSAwOyAgICAgICAgICAgICAgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi9cclxuICAgIHRoaXMuY2hlY2sgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBjaGVjayB2YWx1ZSAqL1xyXG4gICAgdGhpcy50b3RhbCA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqL1xyXG4gICAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cclxuICAgIC8qIHNsaWRpbmcgd2luZG93ICovXHJcbiAgICB0aGlzLndiaXRzID0gMDsgICAgICAgICAgICAgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cclxuICAgIHRoaXMud3NpemUgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5kb3cgKi9cclxuICAgIHRoaXMud2hhdmUgPSAwOyAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXHJcbiAgICB0aGlzLnduZXh0ID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4IChUT0RPIHJlbW92ZSkgKi9cclxuICAgIHRoaXMud2luZG93ID0gbnVsbDsgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIG5lZWRlZCAqL1xyXG4gICAgLyogYml0IGFjY3VtdWxhdG9yICovXHJcbiAgICB0aGlzLmhvbGQgPSAwOyAgICAgICAgICAgICAgLyogaW5wdXQgYml0IGFjY3VtdWxhdG9yICovXHJcbiAgICB0aGlzLmJpdHMgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGJpdHMgaW4gXCJpblwiICovXHJcbiAgICAvKiBmb3Igc3RyaW5nIGFuZCBzdG9yZWQgYmxvY2sgY29weWluZyAqL1xyXG4gICAgdGhpcy5sZW5ndGggPSAwOyAgICAgICAgICAgIC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqL1xyXG4gICAgdGhpcy5vZmZzZXQgPSAwOyAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgdG8gY29weSBzdHJpbmcgZnJvbSAqL1xyXG4gICAgLyogZm9yIHRhYmxlIGFuZCBjb2RlIGRlY29kaW5nICovXHJcbiAgICB0aGlzLmV4dHJhID0gMDsgICAgICAgICAgICAgLyogZXh0cmEgYml0cyBuZWVkZWQgKi9cclxuICAgIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovXHJcblxyXG4gICAgLyogemxpYi5qczogbW9kaWZpZWQgaW1wbGVtZW50YXRpb246IGxlbmNvZGUsIGRpc3Rjb2RlLCBuZXh0IGFyZSBvZmZzZXQgb2YgY29kZXNbXSAqL1xyXG4gICAgdGhpcy5sZW5jb2RlID0gMDsgICAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAqL1xyXG4gICAgdGhpcy5kaXN0Y29kZSA9IDA7ICAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAqL1xyXG4gICAgdGhpcy5sZW5iaXRzID0gMDsgICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi9cclxuICAgIHRoaXMuZGlzdGJpdHMgPSAwOyAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqL1xyXG4gICAgLyogZHluYW1pYyB0YWJsZSBidWlsZGluZyAqL1xyXG4gICAgdGhpcy5uY29kZSA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cclxuICAgIHRoaXMubmxlbiA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xyXG4gICAgdGhpcy5uZGlzdCA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cclxuICAgIHRoaXMuaGF2ZSA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqL1xyXG4gICAgdGhpcy5uZXh0ID0gMDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi9cclxuICAgIHRoaXMubGVucyA9IG5ld19hcnJheSgzMjApOyAvKiB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3IgY29kZSBsZW5ndGhzICovXHJcbiAgICB0aGlzLndvcmsgPSBuZXdfYXJyYXkoMjg4KTsgLyogd29yayBhcmVhIGZvciBjb2RlIHRhYmxlIGJ1aWxkaW5nICovXHJcbiAgICB0aGlzLmNvZGVzID0gbmV3IEFycmF5KEVOT1VHSCk7ICAgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXHJcbiAgICB2YXIgYyA9IHtvcDowLCBiaXRzOjAsIHZhbDowfTtcclxuICAgIGZvcihpID0gMDsgaSA8IEVOT1VHSDsgaSsrKVxyXG4gICAgICAgIHRoaXMuY29kZXNbaV0gPSBjO1xyXG4gICAgdGhpcy5zYW5lID0gMDsgICAgICAgICAgICAgIC8qIGlmIGZhbHNlLCBhbGxvdyBpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgKi9cclxuICAgIHRoaXMuYmFjayA9IDA7ICAgICAgICAgICAgICAvKiBiaXRzIGJhY2sgb2YgbGFzdCB1bnByb2Nlc3NlZCBsZW5ndGgvbGl0ICovXHJcbiAgICB0aGlzLndhcyA9IDA7ICAgICAgICAgICAgICAgLyogaW5pdGlhbCBsZW5ndGggb2YgbWF0Y2ggKi9cclxufVxyXG5cclxuWkxJQi5pbmZsYXRlUmVzZXRLZWVwID0gZnVuY3Rpb24oc3RybSlcclxue1xyXG4gICAgdmFyIHN0YXRlO1xyXG5cclxuICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgcmV0dXJuIFpMSUIuWl9TVFJFQU1fRVJST1I7XHJcbiAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7XHJcbiAgICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XHJcbiAgICBzdHJtLm1zZyA9IG51bGw7XHJcbiAgICBpZiAoc3RhdGUud3JhcCkgeyAgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xyXG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0ZS5tb2RlID0gSEVBRDtcclxuICAgIHN0YXRlLmxhc3QgPSAwO1xyXG4gICAgc3RhdGUuaGF2ZWRpY3QgPSAwO1xyXG4gICAgc3RhdGUuZG1heCA9IDMyNzY4O1xyXG4gICAgc3RhdGUuaGVhZCA9IG51bGw7XHJcbiAgICBzdGF0ZS5ob2xkID0gMDtcclxuICAgIHN0YXRlLmJpdHMgPSAwO1xyXG4gICAgc3RhdGUubGVuY29kZSA9IDA7XHJcbiAgICBzdGF0ZS5kaXN0Y29kZSA9IDA7XHJcbiAgICBzdGF0ZS5uZXh0ID0gMDtcclxuICAgIHN0YXRlLnNhbmUgPSAxO1xyXG4gICAgc3RhdGUuYmFjayA9IC0xO1xyXG4gICAgcmV0dXJuIFpMSUIuWl9PSztcclxufTtcclxuXHJcbi8vIFVzYWdlOiBzdHJtID0gWkxJQi5pbmZsYXRlUmVzZXQoel9zdHJlYW0gWywgd2luZG93Qml0c10pO1xyXG5aTElCLmluZmxhdGVSZXNldCA9IGZ1bmN0aW9uKHN0cm0sIHdpbmRvd0JpdHMpXHJcbntcclxuICAgIHZhciB3cmFwO1xyXG4gICAgdmFyIHN0YXRlO1xyXG5cclxuICAgIC8qIGdldCB0aGUgc3RhdGUgKi9cclxuICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgcmV0dXJuIFpMSUIuWl9TVFJFQU1fRVJST1I7XHJcbiAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7XHJcblxyXG5cdGlmKHR5cGVvZiB3aW5kb3dCaXRzID09PSBcInVuZGVmaW5lZFwiKVxyXG5cdFx0d2luZG93Qml0cyA9IERFRl9XQklUUztcclxuXHJcbiAgICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXHJcbiAgICBpZiAod2luZG93Qml0cyA8IDApIHtcclxuICAgICAgICB3cmFwID0gMDtcclxuICAgICAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4+IDQpICsgMTtcclxuICAgICAgICBpZiAod2luZG93Qml0cyA8IDQ4KVxyXG4gICAgICAgICAgICB3aW5kb3dCaXRzICY9IDE1O1xyXG4gICAgfVxyXG5cclxuXHRpZih3cmFwID09IDEgJiYgKHR5cGVvZiBaTElCLmFkbGVyMzIgPT09ICdmdW5jdGlvbicpKSB7XHJcblx0XHRzdHJtLmNoZWNrc3VtX2Z1bmN0aW9uID0gWkxJQi5hZGxlcjMyO1xyXG5cdH0gZWxzZSBpZih3cmFwID09IDIgJiYgKHR5cGVvZiBaTElCLmNyYzMyID09PSAnZnVuY3Rpb24nKSkge1xyXG5cdFx0c3RybS5jaGVja3N1bV9mdW5jdGlvbiA9IFpMSUIuY3JjMzI7XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0cm0uY2hlY2tzdW1fZnVuY3Rpb24gPSBjaGVja3N1bV9ub25lO1xyXG5cdH1cclxuXHJcbiAgICAvKiBzZXQgbnVtYmVyIG9mIHdpbmRvdyBiaXRzLCBmcmVlIHdpbmRvdyBpZiBkaWZmZXJlbnQgKi9cclxuICAgIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKVxyXG4gICAgICAgIHJldHVybiBaTElCLlpfU1RSRUFNX0VSUk9SO1xyXG4gICAgaWYgKHN0YXRlLndpbmRvdyAmJiBzdGF0ZS53Yml0cyAhPSB3aW5kb3dCaXRzKSB7XHJcbiAgICAgICAgc3RhdGUud2luZG93ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJlc2V0IHRoZSByZXN0IG9mIGl0ICovXHJcbiAgICBzdGF0ZS53cmFwID0gd3JhcDtcclxuICAgIHN0YXRlLndiaXRzID0gd2luZG93Qml0cztcclxuICAgIHN0YXRlLndzaXplID0gMDtcclxuICAgIHN0YXRlLndoYXZlID0gMDtcclxuICAgIHN0YXRlLnduZXh0ID0gMDtcclxuICAgIHJldHVybiBaTElCLmluZmxhdGVSZXNldEtlZXAoc3RybSk7XHJcbn07XHJcblxyXG4vLyBVc2FnZTogc3RybSA9IFpMSUIuaW5mbGF0ZUluaXQoW3dpbmRvd0JpdHNdKTtcclxuWkxJQi5pbmZsYXRlSW5pdCA9IGZ1bmN0aW9uKHdpbmRvd0JpdHMpXHJcbntcclxuICAgIHZhciBzdHJtID0gbmV3IFpMSUIuel9zdHJlYW0oKTtcclxuICAgIHN0cm0uc3RhdGUgPSBuZXcgaW5mbGF0ZV9zdGF0ZSgpO1xyXG4gICAgWkxJQi5pbmZsYXRlUmVzZXQoc3RybSwgd2luZG93Qml0cyk7XHJcbiAgICByZXR1cm4gc3RybTtcclxufTtcclxuXHJcblpMSUIuaW5mbGF0ZVByaW1lID0gZnVuY3Rpb24oc3RybSwgYml0cywgdmFsdWUpXHJcbntcclxuICAgIHZhciBzdGF0ZTtcclxuXHJcbiAgICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHJldHVybiBaTElCLlpfU1RSRUFNX0VSUk9SO1xyXG4gICAgc3RhdGUgPSBzdHJtLnN0YXRlO1xyXG4gICAgaWYgKGJpdHMgPCAwKSB7XHJcbiAgICAgICAgc3RhdGUuaG9sZCA9IDA7XHJcbiAgICAgICAgc3RhdGUuYml0cyA9IDA7XHJcbiAgICAgICAgcmV0dXJuIFpMSUIuWl9PSztcclxuICAgIH1cclxuICAgIGlmIChiaXRzID4gMTYgfHwgc3RhdGUuYml0cyArIGJpdHMgPiAzMikgcmV0dXJuIFpMSUIuWl9TVFJFQU1fRVJST1I7XHJcbiAgICB2YWx1ZSAmPSAoMSA8PCBiaXRzKSAtIDE7XHJcbiAgICBzdGF0ZS5ob2xkICs9IHZhbHVlIDw8IHN0YXRlLmJpdHM7XHJcbiAgICBzdGF0ZS5iaXRzICs9IGJpdHM7XHJcbiAgICByZXR1cm4gWkxJQi5aX09LO1xyXG59O1xyXG5cclxudmFyIGxlbmZpeF9hcnkgPSBudWxsO1xyXG52YXIgbGVuZml4X2RlZiA9IFwiKFtcXFxyXG4gICAge29wOjk2LGJpdHM6Nyx2YWw6MH0se29wOjAsYml0czo4LHZhbDo4MH0se29wOjAsYml0czo4LHZhbDoxNn0se29wOjIwLGJpdHM6OCx2YWw6MTE1fSx7b3A6MTgsYml0czo3LHZhbDozMX0se29wOjAsYml0czo4LHZhbDoxMTJ9LHtvcDowLGJpdHM6OCx2YWw6NDh9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjksdmFsOjE5Mn0se29wOjE2LGJpdHM6Nyx2YWw6MTB9LHtvcDowLGJpdHM6OCx2YWw6OTZ9LHtvcDowLGJpdHM6OCx2YWw6MzJ9LHtvcDowLGJpdHM6OSx2YWw6MTYwfSx7b3A6MCxiaXRzOjgsdmFsOjB9LHtvcDowLGJpdHM6OCx2YWw6MTI4fSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo2NH0se29wOjAsYml0czo5LHZhbDoyMjR9LHtvcDoxNixiaXRzOjcsdmFsOjZ9LHtvcDowLGJpdHM6OCx2YWw6ODh9LHtvcDowLGJpdHM6OCx2YWw6MjR9LHtvcDowLGJpdHM6OSx2YWw6MTQ0fSx7b3A6MTksYml0czo3LHZhbDo1OX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MTIwfSx7b3A6MCxiaXRzOjgsdmFsOjU2fSx7b3A6MCxiaXRzOjksdmFsOjIwOH0se29wOjE3LGJpdHM6Nyx2YWw6MTd9LHtvcDowLGJpdHM6OCx2YWw6MTA0fSx7b3A6MCxiaXRzOjgsdmFsOjQwfSx7b3A6MCxiaXRzOjksdmFsOjE3Nn0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6OH0se29wOjAsYml0czo4LHZhbDoxMzZ9LHtvcDowLGJpdHM6OCx2YWw6NzJ9LHtvcDowLGJpdHM6OSx2YWw6MjQwfSx7b3A6MTYsYml0czo3LHZhbDo0fSx7b3A6MCxiaXRzOjgsdmFsOjg0fSx7b3A6MCxiaXRzOjgsdmFsOjIwfSxcXFxyXG4gICAge29wOjIxLGJpdHM6OCx2YWw6MjI3fSx7b3A6MTksYml0czo3LHZhbDo0M30se29wOjAsYml0czo4LHZhbDoxMTZ9LHtvcDowLGJpdHM6OCx2YWw6NTJ9LHtvcDowLGJpdHM6OSx2YWw6MjAwfSx7b3A6MTcsYml0czo3LHZhbDoxM30se29wOjAsYml0czo4LHZhbDoxMDB9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjM2fSx7b3A6MCxiaXRzOjksdmFsOjE2OH0se29wOjAsYml0czo4LHZhbDo0fSx7b3A6MCxiaXRzOjgsdmFsOjEzMn0se29wOjAsYml0czo4LHZhbDo2OH0se29wOjAsYml0czo5LHZhbDoyMzJ9LHtvcDoxNixiaXRzOjcsdmFsOjh9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjkyfSx7b3A6MCxiaXRzOjgsdmFsOjI4fSx7b3A6MCxiaXRzOjksdmFsOjE1Mn0se29wOjIwLGJpdHM6Nyx2YWw6ODN9LHtvcDowLGJpdHM6OCx2YWw6MTI0fSx7b3A6MCxiaXRzOjgsdmFsOjYwfSx7b3A6MCxiaXRzOjksdmFsOjIxNn0sXFxcclxuICAgIHtvcDoxOCxiaXRzOjcsdmFsOjIzfSx7b3A6MCxiaXRzOjgsdmFsOjEwOH0se29wOjAsYml0czo4LHZhbDo0NH0se29wOjAsYml0czo5LHZhbDoxODR9LHtvcDowLGJpdHM6OCx2YWw6MTJ9LHtvcDowLGJpdHM6OCx2YWw6MTQwfSx7b3A6MCxiaXRzOjgsdmFsOjc2fSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoyNDh9LHtvcDoxNixiaXRzOjcsdmFsOjN9LHtvcDowLGJpdHM6OCx2YWw6ODJ9LHtvcDowLGJpdHM6OCx2YWw6MTh9LHtvcDoyMSxiaXRzOjgsdmFsOjE2M30se29wOjE5LGJpdHM6Nyx2YWw6MzV9LHtvcDowLGJpdHM6OCx2YWw6MTE0fSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo1MH0se29wOjAsYml0czo5LHZhbDoxOTZ9LHtvcDoxNyxiaXRzOjcsdmFsOjExfSx7b3A6MCxiaXRzOjgsdmFsOjk4fSx7b3A6MCxiaXRzOjgsdmFsOjM0fSx7b3A6MCxiaXRzOjksdmFsOjE2NH0se29wOjAsYml0czo4LHZhbDoyfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxMzB9LHtvcDowLGJpdHM6OCx2YWw6NjZ9LHtvcDowLGJpdHM6OSx2YWw6MjI4fSx7b3A6MTYsYml0czo3LHZhbDo3fSx7b3A6MCxiaXRzOjgsdmFsOjkwfSx7b3A6MCxiaXRzOjgsdmFsOjI2fSx7b3A6MCxiaXRzOjksdmFsOjE0OH0sXFxcclxuICAgIHtvcDoyMCxiaXRzOjcsdmFsOjY3fSx7b3A6MCxiaXRzOjgsdmFsOjEyMn0se29wOjAsYml0czo4LHZhbDo1OH0se29wOjAsYml0czo5LHZhbDoyMTJ9LHtvcDoxOCxiaXRzOjcsdmFsOjE5fSx7b3A6MCxiaXRzOjgsdmFsOjEwNn0se29wOjAsYml0czo4LHZhbDo0Mn0sXFxcclxuICAgIHtvcDowLGJpdHM6OSx2YWw6MTgwfSx7b3A6MCxiaXRzOjgsdmFsOjEwfSx7b3A6MCxiaXRzOjgsdmFsOjEzOH0se29wOjAsYml0czo4LHZhbDo3NH0se29wOjAsYml0czo5LHZhbDoyNDR9LHtvcDoxNixiaXRzOjcsdmFsOjV9LHtvcDowLGJpdHM6OCx2YWw6ODZ9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjIyfSx7b3A6NjQsYml0czo4LHZhbDowfSx7b3A6MTksYml0czo3LHZhbDo1MX0se29wOjAsYml0czo4LHZhbDoxMTh9LHtvcDowLGJpdHM6OCx2YWw6NTR9LHtvcDowLGJpdHM6OSx2YWw6MjA0fSx7b3A6MTcsYml0czo3LHZhbDoxNX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MTAyfSx7b3A6MCxiaXRzOjgsdmFsOjM4fSx7b3A6MCxiaXRzOjksdmFsOjE3Mn0se29wOjAsYml0czo4LHZhbDo2fSx7b3A6MCxiaXRzOjgsdmFsOjEzNH0se29wOjAsYml0czo4LHZhbDo3MH0se29wOjAsYml0czo5LHZhbDoyMzZ9LFxcXHJcbiAgICB7b3A6MTYsYml0czo3LHZhbDo5fSx7b3A6MCxiaXRzOjgsdmFsOjk0fSx7b3A6MCxiaXRzOjgsdmFsOjMwfSx7b3A6MCxiaXRzOjksdmFsOjE1Nn0se29wOjIwLGJpdHM6Nyx2YWw6OTl9LHtvcDowLGJpdHM6OCx2YWw6MTI2fSx7b3A6MCxiaXRzOjgsdmFsOjYyfSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoyMjB9LHtvcDoxOCxiaXRzOjcsdmFsOjI3fSx7b3A6MCxiaXRzOjgsdmFsOjExMH0se29wOjAsYml0czo4LHZhbDo0Nn0se29wOjAsYml0czo5LHZhbDoxODh9LHtvcDowLGJpdHM6OCx2YWw6MTR9LHtvcDowLGJpdHM6OCx2YWw6MTQyfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo3OH0se29wOjAsYml0czo5LHZhbDoyNTJ9LHtvcDo5NixiaXRzOjcsdmFsOjB9LHtvcDowLGJpdHM6OCx2YWw6ODF9LHtvcDowLGJpdHM6OCx2YWw6MTd9LHtvcDoyMSxiaXRzOjgsdmFsOjEzMX0se29wOjE4LGJpdHM6Nyx2YWw6MzF9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjExM30se29wOjAsYml0czo4LHZhbDo0OX0se29wOjAsYml0czo5LHZhbDoxOTR9LHtvcDoxNixiaXRzOjcsdmFsOjEwfSx7b3A6MCxiaXRzOjgsdmFsOjk3fSx7b3A6MCxiaXRzOjgsdmFsOjMzfSx7b3A6MCxiaXRzOjksdmFsOjE2Mn0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MX0se29wOjAsYml0czo4LHZhbDoxMjl9LHtvcDowLGJpdHM6OCx2YWw6NjV9LHtvcDowLGJpdHM6OSx2YWw6MjI2fSx7b3A6MTYsYml0czo3LHZhbDo2fSx7b3A6MCxiaXRzOjgsdmFsOjg5fSx7b3A6MCxiaXRzOjgsdmFsOjI1fSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoxNDZ9LHtvcDoxOSxiaXRzOjcsdmFsOjU5fSx7b3A6MCxiaXRzOjgsdmFsOjEyMX0se29wOjAsYml0czo4LHZhbDo1N30se29wOjAsYml0czo5LHZhbDoyMTB9LHtvcDoxNyxiaXRzOjcsdmFsOjE3fSx7b3A6MCxiaXRzOjgsdmFsOjEwNX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6NDF9LHtvcDowLGJpdHM6OSx2YWw6MTc4fSx7b3A6MCxiaXRzOjgsdmFsOjl9LHtvcDowLGJpdHM6OCx2YWw6MTM3fSx7b3A6MCxiaXRzOjgsdmFsOjczfSx7b3A6MCxiaXRzOjksdmFsOjI0Mn0se29wOjE2LGJpdHM6Nyx2YWw6NH0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6ODV9LHtvcDowLGJpdHM6OCx2YWw6MjF9LHtvcDoxNixiaXRzOjgsdmFsOjI1OH0se29wOjE5LGJpdHM6Nyx2YWw6NDN9LHtvcDowLGJpdHM6OCx2YWw6MTE3fSx7b3A6MCxiaXRzOjgsdmFsOjUzfSx7b3A6MCxiaXRzOjksdmFsOjIwMn0sXFxcclxuICAgIHtvcDoxNyxiaXRzOjcsdmFsOjEzfSx7b3A6MCxiaXRzOjgsdmFsOjEwMX0se29wOjAsYml0czo4LHZhbDozN30se29wOjAsYml0czo5LHZhbDoxNzB9LHtvcDowLGJpdHM6OCx2YWw6NX0se29wOjAsYml0czo4LHZhbDoxMzN9LHtvcDowLGJpdHM6OCx2YWw6Njl9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjksdmFsOjIzNH0se29wOjE2LGJpdHM6Nyx2YWw6OH0se29wOjAsYml0czo4LHZhbDo5M30se29wOjAsYml0czo4LHZhbDoyOX0se29wOjAsYml0czo5LHZhbDoxNTR9LHtvcDoyMCxiaXRzOjcsdmFsOjgzfSx7b3A6MCxiaXRzOjgsdmFsOjEyNX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6NjF9LHtvcDowLGJpdHM6OSx2YWw6MjE4fSx7b3A6MTgsYml0czo3LHZhbDoyM30se29wOjAsYml0czo4LHZhbDoxMDl9LHtvcDowLGJpdHM6OCx2YWw6NDV9LHtvcDowLGJpdHM6OSx2YWw6MTg2fSx7b3A6MCxiaXRzOjgsdmFsOjEzfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxNDF9LHtvcDowLGJpdHM6OCx2YWw6Nzd9LHtvcDowLGJpdHM6OSx2YWw6MjUwfSx7b3A6MTYsYml0czo3LHZhbDozfSx7b3A6MCxiaXRzOjgsdmFsOjgzfSx7b3A6MCxiaXRzOjgsdmFsOjE5fSx7b3A6MjEsYml0czo4LHZhbDoxOTV9LFxcXHJcbiAgICB7b3A6MTksYml0czo3LHZhbDozNX0se29wOjAsYml0czo4LHZhbDoxMTV9LHtvcDowLGJpdHM6OCx2YWw6NTF9LHtvcDowLGJpdHM6OSx2YWw6MTk4fSx7b3A6MTcsYml0czo3LHZhbDoxMX0se29wOjAsYml0czo4LHZhbDo5OX0se29wOjAsYml0czo4LHZhbDozNX0sXFxcclxuICAgIHtvcDowLGJpdHM6OSx2YWw6MTY2fSx7b3A6MCxiaXRzOjgsdmFsOjN9LHtvcDowLGJpdHM6OCx2YWw6MTMxfSx7b3A6MCxiaXRzOjgsdmFsOjY3fSx7b3A6MCxiaXRzOjksdmFsOjIzMH0se29wOjE2LGJpdHM6Nyx2YWw6N30se29wOjAsYml0czo4LHZhbDo5MX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6Mjd9LHtvcDowLGJpdHM6OSx2YWw6MTUwfSx7b3A6MjAsYml0czo3LHZhbDo2N30se29wOjAsYml0czo4LHZhbDoxMjN9LHtvcDowLGJpdHM6OCx2YWw6NTl9LHtvcDowLGJpdHM6OSx2YWw6MjE0fSx7b3A6MTgsYml0czo3LHZhbDoxOX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MTA3fSx7b3A6MCxiaXRzOjgsdmFsOjQzfSx7b3A6MCxiaXRzOjksdmFsOjE4Mn0se29wOjAsYml0czo4LHZhbDoxMX0se29wOjAsYml0czo4LHZhbDoxMzl9LHtvcDowLGJpdHM6OCx2YWw6NzV9LHtvcDowLGJpdHM6OSx2YWw6MjQ2fSxcXFxyXG4gICAge29wOjE2LGJpdHM6Nyx2YWw6NX0se29wOjAsYml0czo4LHZhbDo4N30se29wOjAsYml0czo4LHZhbDoyM30se29wOjY0LGJpdHM6OCx2YWw6MH0se29wOjE5LGJpdHM6Nyx2YWw6NTF9LHtvcDowLGJpdHM6OCx2YWw6MTE5fSx7b3A6MCxiaXRzOjgsdmFsOjU1fSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoyMDZ9LHtvcDoxNyxiaXRzOjcsdmFsOjE1fSx7b3A6MCxiaXRzOjgsdmFsOjEwM30se29wOjAsYml0czo4LHZhbDozOX0se29wOjAsYml0czo5LHZhbDoxNzR9LHtvcDowLGJpdHM6OCx2YWw6N30se29wOjAsYml0czo4LHZhbDoxMzV9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjcxfSx7b3A6MCxiaXRzOjksdmFsOjIzOH0se29wOjE2LGJpdHM6Nyx2YWw6OX0se29wOjAsYml0czo4LHZhbDo5NX0se29wOjAsYml0czo4LHZhbDozMX0se29wOjAsYml0czo5LHZhbDoxNTh9LHtvcDoyMCxiaXRzOjcsdmFsOjk5fSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxMjd9LHtvcDowLGJpdHM6OCx2YWw6NjN9LHtvcDowLGJpdHM6OSx2YWw6MjIyfSx7b3A6MTgsYml0czo3LHZhbDoyN30se29wOjAsYml0czo4LHZhbDoxMTF9LHtvcDowLGJpdHM6OCx2YWw6NDd9LHtvcDowLGJpdHM6OSx2YWw6MTkwfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxNX0se29wOjAsYml0czo4LHZhbDoxNDN9LHtvcDowLGJpdHM6OCx2YWw6Nzl9LHtvcDowLGJpdHM6OSx2YWw6MjU0fSx7b3A6OTYsYml0czo3LHZhbDowfSx7b3A6MCxiaXRzOjgsdmFsOjgwfSx7b3A6MCxiaXRzOjgsdmFsOjE2fSxcXFxyXG4gICAge29wOjIwLGJpdHM6OCx2YWw6MTE1fSx7b3A6MTgsYml0czo3LHZhbDozMX0se29wOjAsYml0czo4LHZhbDoxMTJ9LHtvcDowLGJpdHM6OCx2YWw6NDh9LHtvcDowLGJpdHM6OSx2YWw6MTkzfSx7b3A6MTYsYml0czo3LHZhbDoxMH0se29wOjAsYml0czo4LHZhbDo5Nn0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MzJ9LHtvcDowLGJpdHM6OSx2YWw6MTYxfSx7b3A6MCxiaXRzOjgsdmFsOjB9LHtvcDowLGJpdHM6OCx2YWw6MTI4fSx7b3A6MCxiaXRzOjgsdmFsOjY0fSx7b3A6MCxiaXRzOjksdmFsOjIyNX0se29wOjE2LGJpdHM6Nyx2YWw6Nn0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6ODh9LHtvcDowLGJpdHM6OCx2YWw6MjR9LHtvcDowLGJpdHM6OSx2YWw6MTQ1fSx7b3A6MTksYml0czo3LHZhbDo1OX0se29wOjAsYml0czo4LHZhbDoxMjB9LHtvcDowLGJpdHM6OCx2YWw6NTZ9LHtvcDowLGJpdHM6OSx2YWw6MjA5fSxcXFxyXG4gICAge29wOjE3LGJpdHM6Nyx2YWw6MTd9LHtvcDowLGJpdHM6OCx2YWw6MTA0fSx7b3A6MCxiaXRzOjgsdmFsOjQwfSx7b3A6MCxiaXRzOjksdmFsOjE3N30se29wOjAsYml0czo4LHZhbDo4fSx7b3A6MCxiaXRzOjgsdmFsOjEzNn0se29wOjAsYml0czo4LHZhbDo3Mn0sXFxcclxuICAgIHtvcDowLGJpdHM6OSx2YWw6MjQxfSx7b3A6MTYsYml0czo3LHZhbDo0fSx7b3A6MCxiaXRzOjgsdmFsOjg0fSx7b3A6MCxiaXRzOjgsdmFsOjIwfSx7b3A6MjEsYml0czo4LHZhbDoyMjd9LHtvcDoxOSxiaXRzOjcsdmFsOjQzfSx7b3A6MCxiaXRzOjgsdmFsOjExNn0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6NTJ9LHtvcDowLGJpdHM6OSx2YWw6MjAxfSx7b3A6MTcsYml0czo3LHZhbDoxM30se29wOjAsYml0czo4LHZhbDoxMDB9LHtvcDowLGJpdHM6OCx2YWw6MzZ9LHtvcDowLGJpdHM6OSx2YWw6MTY5fSx7b3A6MCxiaXRzOjgsdmFsOjR9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjEzMn0se29wOjAsYml0czo4LHZhbDo2OH0se29wOjAsYml0czo5LHZhbDoyMzN9LHtvcDoxNixiaXRzOjcsdmFsOjh9LHtvcDowLGJpdHM6OCx2YWw6OTJ9LHtvcDowLGJpdHM6OCx2YWw6Mjh9LHtvcDowLGJpdHM6OSx2YWw6MTUzfSxcXFxyXG4gICAge29wOjIwLGJpdHM6Nyx2YWw6ODN9LHtvcDowLGJpdHM6OCx2YWw6MTI0fSx7b3A6MCxiaXRzOjgsdmFsOjYwfSx7b3A6MCxiaXRzOjksdmFsOjIxN30se29wOjE4LGJpdHM6Nyx2YWw6MjN9LHtvcDowLGJpdHM6OCx2YWw6MTA4fSx7b3A6MCxiaXRzOjgsdmFsOjQ0fSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoxODV9LHtvcDowLGJpdHM6OCx2YWw6MTJ9LHtvcDowLGJpdHM6OCx2YWw6MTQwfSx7b3A6MCxiaXRzOjgsdmFsOjc2fSx7b3A6MCxiaXRzOjksdmFsOjI0OX0se29wOjE2LGJpdHM6Nyx2YWw6M30se29wOjAsYml0czo4LHZhbDo4Mn0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MTh9LHtvcDoyMSxiaXRzOjgsdmFsOjE2M30se29wOjE5LGJpdHM6Nyx2YWw6MzV9LHtvcDowLGJpdHM6OCx2YWw6MTE0fSx7b3A6MCxiaXRzOjgsdmFsOjUwfSx7b3A6MCxiaXRzOjksdmFsOjE5N30se29wOjE3LGJpdHM6Nyx2YWw6MTF9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjk4fSx7b3A6MCxiaXRzOjgsdmFsOjM0fSx7b3A6MCxiaXRzOjksdmFsOjE2NX0se29wOjAsYml0czo4LHZhbDoyfSx7b3A6MCxiaXRzOjgsdmFsOjEzMH0se29wOjAsYml0czo4LHZhbDo2Nn0se29wOjAsYml0czo5LHZhbDoyMjl9LFxcXHJcbiAgICB7b3A6MTYsYml0czo3LHZhbDo3fSx7b3A6MCxiaXRzOjgsdmFsOjkwfSx7b3A6MCxiaXRzOjgsdmFsOjI2fSx7b3A6MCxiaXRzOjksdmFsOjE0OX0se29wOjIwLGJpdHM6Nyx2YWw6Njd9LHtvcDowLGJpdHM6OCx2YWw6MTIyfSx7b3A6MCxiaXRzOjgsdmFsOjU4fSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoyMTN9LHtvcDoxOCxiaXRzOjcsdmFsOjE5fSx7b3A6MCxiaXRzOjgsdmFsOjEwNn0se29wOjAsYml0czo4LHZhbDo0Mn0se29wOjAsYml0czo5LHZhbDoxODF9LHtvcDowLGJpdHM6OCx2YWw6MTB9LHtvcDowLGJpdHM6OCx2YWw6MTM4fSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo3NH0se29wOjAsYml0czo5LHZhbDoyNDV9LHtvcDoxNixiaXRzOjcsdmFsOjV9LHtvcDowLGJpdHM6OCx2YWw6ODZ9LHtvcDowLGJpdHM6OCx2YWw6MjJ9LHtvcDo2NCxiaXRzOjgsdmFsOjB9LHtvcDoxOSxiaXRzOjcsdmFsOjUxfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxMTh9LHtvcDowLGJpdHM6OCx2YWw6NTR9LHtvcDowLGJpdHM6OSx2YWw6MjA1fSx7b3A6MTcsYml0czo3LHZhbDoxNX0se29wOjAsYml0czo4LHZhbDoxMDJ9LHtvcDowLGJpdHM6OCx2YWw6Mzh9LHtvcDowLGJpdHM6OSx2YWw6MTczfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo2fSx7b3A6MCxiaXRzOjgsdmFsOjEzNH0se29wOjAsYml0czo4LHZhbDo3MH0se29wOjAsYml0czo5LHZhbDoyMzd9LHtvcDoxNixiaXRzOjcsdmFsOjl9LHtvcDowLGJpdHM6OCx2YWw6OTR9LHtvcDowLGJpdHM6OCx2YWw6MzB9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjksdmFsOjE1N30se29wOjIwLGJpdHM6Nyx2YWw6OTl9LHtvcDowLGJpdHM6OCx2YWw6MTI2fSx7b3A6MCxiaXRzOjgsdmFsOjYyfSx7b3A6MCxiaXRzOjksdmFsOjIyMX0se29wOjE4LGJpdHM6Nyx2YWw6Mjd9LHtvcDowLGJpdHM6OCx2YWw6MTEwfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo0Nn0se29wOjAsYml0czo5LHZhbDoxODl9LHtvcDowLGJpdHM6OCx2YWw6MTR9LHtvcDowLGJpdHM6OCx2YWw6MTQyfSx7b3A6MCxiaXRzOjgsdmFsOjc4fSx7b3A6MCxiaXRzOjksdmFsOjI1M30se29wOjk2LGJpdHM6Nyx2YWw6MH0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6ODF9LHtvcDowLGJpdHM6OCx2YWw6MTd9LHtvcDoyMSxiaXRzOjgsdmFsOjEzMX0se29wOjE4LGJpdHM6Nyx2YWw6MzF9LHtvcDowLGJpdHM6OCx2YWw6MTEzfSx7b3A6MCxiaXRzOjgsdmFsOjQ5fSx7b3A6MCxiaXRzOjksdmFsOjE5NX0sXFxcclxuICAgIHtvcDoxNixiaXRzOjcsdmFsOjEwfSx7b3A6MCxiaXRzOjgsdmFsOjk3fSx7b3A6MCxiaXRzOjgsdmFsOjMzfSx7b3A6MCxiaXRzOjksdmFsOjE2M30se29wOjAsYml0czo4LHZhbDoxfSx7b3A6MCxiaXRzOjgsdmFsOjEyOX0se29wOjAsYml0czo4LHZhbDo2NX0sXFxcclxuICAgIHtvcDowLGJpdHM6OSx2YWw6MjI3fSx7b3A6MTYsYml0czo3LHZhbDo2fSx7b3A6MCxiaXRzOjgsdmFsOjg5fSx7b3A6MCxiaXRzOjgsdmFsOjI1fSx7b3A6MCxiaXRzOjksdmFsOjE0N30se29wOjE5LGJpdHM6Nyx2YWw6NTl9LHtvcDowLGJpdHM6OCx2YWw6MTIxfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo1N30se29wOjAsYml0czo5LHZhbDoyMTF9LHtvcDoxNyxiaXRzOjcsdmFsOjE3fSx7b3A6MCxiaXRzOjgsdmFsOjEwNX0se29wOjAsYml0czo4LHZhbDo0MX0se29wOjAsYml0czo5LHZhbDoxNzl9LHtvcDowLGJpdHM6OCx2YWw6OX0sXFxcclxuICAgIHtvcDowLGJpdHM6OCx2YWw6MTM3fSx7b3A6MCxiaXRzOjgsdmFsOjczfSx7b3A6MCxiaXRzOjksdmFsOjI0M30se29wOjE2LGJpdHM6Nyx2YWw6NH0se29wOjAsYml0czo4LHZhbDo4NX0se29wOjAsYml0czo4LHZhbDoyMX0se29wOjE2LGJpdHM6OCx2YWw6MjU4fSxcXFxyXG4gICAge29wOjE5LGJpdHM6Nyx2YWw6NDN9LHtvcDowLGJpdHM6OCx2YWw6MTE3fSx7b3A6MCxiaXRzOjgsdmFsOjUzfSx7b3A6MCxiaXRzOjksdmFsOjIwM30se29wOjE3LGJpdHM6Nyx2YWw6MTN9LHtvcDowLGJpdHM6OCx2YWw6MTAxfSx7b3A6MCxiaXRzOjgsdmFsOjM3fSxcXFxyXG4gICAge29wOjAsYml0czo5LHZhbDoxNzF9LHtvcDowLGJpdHM6OCx2YWw6NX0se29wOjAsYml0czo4LHZhbDoxMzN9LHtvcDowLGJpdHM6OCx2YWw6Njl9LHtvcDowLGJpdHM6OSx2YWw6MjM1fSx7b3A6MTYsYml0czo3LHZhbDo4fSx7b3A6MCxiaXRzOjgsdmFsOjkzfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoyOX0se29wOjAsYml0czo5LHZhbDoxNTV9LHtvcDoyMCxiaXRzOjcsdmFsOjgzfSx7b3A6MCxiaXRzOjgsdmFsOjEyNX0se29wOjAsYml0czo4LHZhbDo2MX0se29wOjAsYml0czo5LHZhbDoyMTl9LHtvcDoxOCxiaXRzOjcsdmFsOjIzfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxMDl9LHtvcDowLGJpdHM6OCx2YWw6NDV9LHtvcDowLGJpdHM6OSx2YWw6MTg3fSx7b3A6MCxiaXRzOjgsdmFsOjEzfSx7b3A6MCxiaXRzOjgsdmFsOjE0MX0se29wOjAsYml0czo4LHZhbDo3N30se29wOjAsYml0czo5LHZhbDoyNTF9LFxcXHJcbiAgICB7b3A6MTYsYml0czo3LHZhbDozfSx7b3A6MCxiaXRzOjgsdmFsOjgzfSx7b3A6MCxiaXRzOjgsdmFsOjE5fSx7b3A6MjEsYml0czo4LHZhbDoxOTV9LHtvcDoxOSxiaXRzOjcsdmFsOjM1fSx7b3A6MCxiaXRzOjgsdmFsOjExNX0se29wOjAsYml0czo4LHZhbDo1MX0sXFxcclxuICAgIHtvcDowLGJpdHM6OSx2YWw6MTk5fSx7b3A6MTcsYml0czo3LHZhbDoxMX0se29wOjAsYml0czo4LHZhbDo5OX0se29wOjAsYml0czo4LHZhbDozNX0se29wOjAsYml0czo5LHZhbDoxNjd9LHtvcDowLGJpdHM6OCx2YWw6M30se29wOjAsYml0czo4LHZhbDoxMzF9LFxcXHJcbiAgICB7b3A6MCxiaXRzOjgsdmFsOjY3fSx7b3A6MCxiaXRzOjksdmFsOjIzMX0se29wOjE2LGJpdHM6Nyx2YWw6N30se29wOjAsYml0czo4LHZhbDo5MX0se29wOjAsYml0czo4LHZhbDoyN30se29wOjAsYml0czo5LHZhbDoxNTF9LHtvcDoyMCxiaXRzOjcsdmFsOjY3fSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxMjN9LHtvcDowLGJpdHM6OCx2YWw6NTl9LHtvcDowLGJpdHM6OSx2YWw6MjE1fSx7b3A6MTgsYml0czo3LHZhbDoxOX0se29wOjAsYml0czo4LHZhbDoxMDd9LHtvcDowLGJpdHM6OCx2YWw6NDN9LHtvcDowLGJpdHM6OSx2YWw6MTgzfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDoxMX0se29wOjAsYml0czo4LHZhbDoxMzl9LHtvcDowLGJpdHM6OCx2YWw6NzV9LHtvcDowLGJpdHM6OSx2YWw6MjQ3fSx7b3A6MTYsYml0czo3LHZhbDo1fSx7b3A6MCxiaXRzOjgsdmFsOjg3fSx7b3A6MCxiaXRzOjgsdmFsOjIzfSxcXFxyXG4gICAge29wOjY0LGJpdHM6OCx2YWw6MH0se29wOjE5LGJpdHM6Nyx2YWw6NTF9LHtvcDowLGJpdHM6OCx2YWw6MTE5fSx7b3A6MCxiaXRzOjgsdmFsOjU1fSx7b3A6MCxiaXRzOjksdmFsOjIwN30se29wOjE3LGJpdHM6Nyx2YWw6MTV9LHtvcDowLGJpdHM6OCx2YWw6MTAzfSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDozOX0se29wOjAsYml0czo5LHZhbDoxNzV9LHtvcDowLGJpdHM6OCx2YWw6N30se29wOjAsYml0czo4LHZhbDoxMzV9LHtvcDowLGJpdHM6OCx2YWw6NzF9LHtvcDowLGJpdHM6OSx2YWw6MjM5fSx7b3A6MTYsYml0czo3LHZhbDo5fSxcXFxyXG4gICAge29wOjAsYml0czo4LHZhbDo5NX0se29wOjAsYml0czo4LHZhbDozMX0se29wOjAsYml0czo5LHZhbDoxNTl9LHtvcDoyMCxiaXRzOjcsdmFsOjk5fSx7b3A6MCxiaXRzOjgsdmFsOjEyN30se29wOjAsYml0czo4LHZhbDo2M30se29wOjAsYml0czo5LHZhbDoyMjN9LFxcXHJcbiAgICB7b3A6MTgsYml0czo3LHZhbDoyN30se29wOjAsYml0czo4LHZhbDoxMTF9LHtvcDowLGJpdHM6OCx2YWw6NDd9LHtvcDowLGJpdHM6OSx2YWw6MTkxfSx7b3A6MCxiaXRzOjgsdmFsOjE1fSx7b3A6MCxiaXRzOjgsdmFsOjE0M30se29wOjAsYml0czo4LHZhbDo3OX0sXFxcclxuICAgIHtvcDowLGJpdHM6OSx2YWw6MjU1fVxcXHJcbl0pXCI7XHJcblxyXG52YXIgZGlzdGZpeF9hcnkgPSBudWxsO1xyXG52YXIgZGlzdGZpeF9kZWYgPSBcIihbXFxcclxuICAgIHtvcDoxNixiaXRzOjUsdmFsOjF9LHtvcDoyMyxiaXRzOjUsdmFsOjI1N30se29wOjE5LGJpdHM6NSx2YWw6MTd9LHtvcDoyNyxiaXRzOjUsdmFsOjQwOTd9LHtvcDoxNyxiaXRzOjUsdmFsOjV9LHtvcDoyNSxiaXRzOjUsdmFsOjEwMjV9LFxcXHJcbiAgICB7b3A6MjEsYml0czo1LHZhbDo2NX0se29wOjI5LGJpdHM6NSx2YWw6MTYzODV9LHtvcDoxNixiaXRzOjUsdmFsOjN9LHtvcDoyNCxiaXRzOjUsdmFsOjUxM30se29wOjIwLGJpdHM6NSx2YWw6MzN9LHtvcDoyOCxiaXRzOjUsdmFsOjgxOTN9LFxcXHJcbiAgICB7b3A6MTgsYml0czo1LHZhbDo5fSx7b3A6MjYsYml0czo1LHZhbDoyMDQ5fSx7b3A6MjIsYml0czo1LHZhbDoxMjl9LHtvcDo2NCxiaXRzOjUsdmFsOjB9LHtvcDoxNixiaXRzOjUsdmFsOjJ9LHtvcDoyMyxiaXRzOjUsdmFsOjM4NX0sXFxcclxuICAgIHtvcDoxOSxiaXRzOjUsdmFsOjI1fSx7b3A6MjcsYml0czo1LHZhbDo2MTQ1fSx7b3A6MTcsYml0czo1LHZhbDo3fSx7b3A6MjUsYml0czo1LHZhbDoxNTM3fSx7b3A6MjEsYml0czo1LHZhbDo5N30se29wOjI5LGJpdHM6NSx2YWw6MjQ1Nzd9LFxcXHJcbiAgICB7b3A6MTYsYml0czo1LHZhbDo0fSx7b3A6MjQsYml0czo1LHZhbDo3Njl9LHtvcDoyMCxiaXRzOjUsdmFsOjQ5fSx7b3A6MjgsYml0czo1LHZhbDoxMjI4OX0se29wOjE4LGJpdHM6NSx2YWw6MTN9LHtvcDoyNixiaXRzOjUsdmFsOjMwNzN9LFxcXHJcbiAgICB7b3A6MjIsYml0czo1LHZhbDoxOTN9LHtvcDo2NCxiaXRzOjUsdmFsOjB9XFxcclxuXSlcIjtcclxuXHJcbmZ1bmN0aW9uIGZpeGVkdGFibGVzKHN0YXRlKVxyXG57XHJcbiAgICB2YXIgaTtcclxuICAgIGlmKCFsZW5maXhfYXJ5KVxyXG4gICAgICAgIGxlbmZpeF9hcnkgPSBldmFsKGxlbmZpeF9kZWYpO1xyXG4gICAgaWYoIWRpc3RmaXhfYXJ5KVxyXG4gICAgICAgIGRpc3RmaXhfYXJ5ID0gZXZhbChkaXN0Zml4X2RlZik7XHJcbiAgICBzdGF0ZS5sZW5jb2RlID0gMDtcclxuICAgIHN0YXRlLmRpc3Rjb2RlID0gNTEyO1xyXG4gICAgZm9yKGkgPSAwOyBpIDwgNTEyOyBpKyspIHtcclxuICAgICAgICBzdGF0ZS5jb2Rlc1tpXSA9IGxlbmZpeF9hcnlbaV07XHJcbiAgICB9XHJcbiAgICBmb3IoaSA9IDA7IGkgPCAzMjsgaSsrKSB7XHJcbiAgICAgICAgc3RhdGUuY29kZXNbaSArIDUxMl0gPSBkaXN0Zml4X2FyeVtpXTtcclxuICAgIH1cclxuICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xyXG4gICAgc3RhdGUuZGlzdGJpdHMgPSA1O1xyXG59XHJcblxyXG4vKlxyXG4gIFVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3Qgd3NpemUgKG5vcm1hbGx5IDMySykgYnl0ZXMgd3JpdHRlbiBiZWZvcmVcclxuICByZXR1cm5pbmcuICBJZiB3aW5kb3cgZG9lcyBub3QgZXhpc3QgeWV0LCBjcmVhdGUgaXQuICBUaGlzIGlzIG9ubHkgY2FsbGVkXHJcbiAgd2hlbiBhIHdpbmRvdyBpcyBhbHJlYWR5IGluIHVzZSwgb3Igd2hlbiBvdXRwdXQgaGFzIGJlZW4gd3JpdHRlbiBkdXJpbmcgdGhpc1xyXG4gIGluZmxhdGUgY2FsbCwgYnV0IHRoZSBlbmQgb2YgdGhlIGRlZmxhdGUgc3RyZWFtIGhhcyBub3QgYmVlbiByZWFjaGVkIHlldC5cclxuICBJdCBpcyBhbHNvIGNhbGxlZCB0byBjcmVhdGUgYSB3aW5kb3cgZm9yIGRpY3Rpb25hcnkgZGF0YSB3aGVuIGEgZGljdGlvbmFyeVxyXG4gIGlzIGxvYWRlZC5cclxuXHJcbiAgUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZFxyXG4gIGFkdmFudGFnZSwgc2luY2Ugb25seSB0aGUgbGFzdCAzMksgb2Ygb3V0cHV0IGlzIGNvcGllZCB0byB0aGUgc2xpZGluZyB3aW5kb3dcclxuICB1cG9uIHJldHVybiBmcm9tIGluZmxhdGUoKSwgYW5kIHNpbmNlIGFsbCBkaXN0YW5jZXMgYWZ0ZXIgdGhlIGZpcnN0IDMySyBvZlxyXG4gIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci5cclxuICBUaGUgYWR2YW50YWdlIG1heSBiZSBkZXBlbmRlbnQgb24gdGhlIHNpemUgb2YgdGhlIHByb2Nlc3NvcidzIGRhdGEgY2FjaGVzLlxyXG4qL1xyXG5mdW5jdGlvbiB1cGRhdGV3aW5kb3coc3RybSlcclxue1xyXG4gICAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcclxuXHR2YXIgb3V0ID0gc3RybS5vdXRwdXRfZGF0YS5sZW5ndGg7XHJcblxyXG4gICAgLyogaWYgaXQgaGFzbid0IGJlZW4gZG9uZSBhbHJlYWR5LCBhbGxvY2F0ZSBzcGFjZSBmb3IgdGhlIHdpbmRvdyAqL1xyXG4gICAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgIHN0YXRlLndpbmRvdyA9ICcnO1xyXG5cdH1cclxuXHJcbiAgICAvKiBpZiB3aW5kb3cgbm90IGluIHVzZSB5ZXQsIGluaXRpYWxpemUgKi9cclxuICAgIGlmIChzdGF0ZS53c2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xyXG5cdH1cclxuXHJcbiAgICAvLyB6bGliLmpzOiBTbGlkaW5nIHdpbmRvd1xyXG4gICAgaWYgKG91dCA+PSBzdGF0ZS53c2l6ZSkge1xyXG4gICAgICAgIHN0YXRlLndpbmRvdyA9IHN0cm0ub3V0cHV0X2RhdGEuc3Vic3RyaW5nKG91dCAtIHN0YXRlLndzaXplKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0aWYoc3RhdGUud2hhdmUgKyBvdXQgPCBzdGF0ZS53c2l6ZSkge1xyXG5cdFx0XHRzdGF0ZS53aW5kb3cgKz0gc3RybS5vdXRwdXRfZGF0YTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0YXRlLndpbmRvdyA9IHN0YXRlLndpbmRvdy5zdWJzdHJpbmcoc3RhdGUud2hhdmUgLSAoc3RhdGUud3NpemUgLSBvdXQpKSArIHN0cm0ub3V0cHV0X2RhdGE7XHJcblx0XHR9XHJcblx0fVxyXG4gICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53aW5kb3cubGVuZ3RoO1xyXG5cdGlmKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHtcclxuXHRcdHN0YXRlLnduZXh0ID0gc3RhdGUud2hhdmU7XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0YXRlLnduZXh0ID0gMDtcclxuXHR9XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG5cclxuXHJcbi8vICNpZmRlZiBHVU5aSVBcclxuZnVuY3Rpb24gQ1JDMihzdHJtLCB3b3JkKVxyXG57XHJcblx0dmFyIGhidWYgPSBbd29yZCAmIDB4ZmYsICh3b3JkID4+PiA4KSAmIDB4ZmZdO1xyXG5cdHN0cm0uc3RhdGUuY2hlY2sgPSBzdHJtLmNoZWNrc3VtX2Z1bmN0aW9uKHN0cm0uc3RhdGUuY2hlY2ssIGhidWYsIDAsIDIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDUkM0KHN0cm0sIHdvcmQpXHJcbntcclxuXHR2YXIgaGJ1ZiA9IFt3b3JkICYgMHhmZixcclxuXHRcdFx0XHQod29yZCA+Pj4gOCkgJiAweGZmLFxyXG5cdFx0XHRcdCh3b3JkID4+PiAxNikgJiAweGZmLFxyXG5cdFx0XHRcdCh3b3JkID4+PiAyNCkgJiAweGZmXTtcclxuXHRzdHJtLnN0YXRlLmNoZWNrID0gc3RybS5jaGVja3N1bV9mdW5jdGlvbihzdHJtLnN0YXRlLmNoZWNrLCBoYnVmLCAwLCA0KTtcclxufVxyXG5cclxuLyogTG9hZCByZWdpc3RlcnMgd2l0aCBzdGF0ZSBpbiBpbmZsYXRlKCkgZm9yIHNwZWVkICovXHJcbmZ1bmN0aW9uIExPQUQoc3RybSwgcylcclxue1xyXG4gICAgcy5zdHJtID0gc3RybTsgICAgICAgICAgICAvKiB6X3N0cmVhbSAqL1xyXG4gICAgcy5sZWZ0ID0gc3RybS5hdmFpbF9vdXQ7ICAvKiBhdmFpbGFibGUgb3V0cHV0ICovXHJcbiAgICBzLm5leHQgPSBzdHJtLm5leHRfaW47IC8qIG5leHQgaW5wdXQgKi9cclxuICAgIHMuaGF2ZSA9IHN0cm0uYXZhaWxfaW47ICAgLyogYXZhaWxhYmxlIGlucHV0ICovXHJcbiAgICBzLmhvbGQgPSBzdHJtLnN0YXRlLmhvbGQ7IC8qIGJpdCBidWZmZXIgKi9cclxuICAgIHMuYml0cyA9IHN0cm0uc3RhdGUuYml0czsgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXHJcbiAgICByZXR1cm4gcztcclxufVxyXG5cclxuLyogUmVzdG9yZSBzdGF0ZSBmcm9tIHJlZ2lzdGVycyBpbiBpbmZsYXRlKCkgKi9cclxuZnVuY3Rpb24gUkVTVE9SRShzKVxyXG57XHJcbiAgICB2YXIgc3RybSA9IHMuc3RybTtcclxuICAgIHN0cm0ubmV4dF9pbiA9IHMubmV4dDtcclxuICAgIHN0cm0uYXZhaWxfb3V0ID0gcy5sZWZ0O1xyXG4gICAgc3RybS5hdmFpbF9pbiA9IHMuaGF2ZTtcclxuICAgIHN0cm0uc3RhdGUuaG9sZCA9IHMuaG9sZDtcclxuICAgIHN0cm0uc3RhdGUuYml0cyA9IHMuYml0cztcclxufVxyXG5cclxuLyogQ2xlYXIgdGhlIGlucHV0IGJpdCBhY2N1bXVsYXRvciAqL1xyXG5mdW5jdGlvbiBJTklUQklUUyhzKVxyXG57XHJcbiAgICBzLmhvbGQgPSAwO1xyXG4gICAgcy5iaXRzID0gMDtcclxufVxyXG5cclxuLyogR2V0IGEgYnl0ZSBvZiBpbnB1dCBpbnRvIHRoZSBiaXQgYWNjdW11bGF0b3IsIG9yIHJldHVybiBmcm9tIGluZmxhdGUoKVxyXG4gICBpZiB0aGVyZSBpcyBubyBpbnB1dCBhdmFpbGFibGUuICovXHJcbmZ1bmN0aW9uIFBVTExCWVRFKHMpXHJcbntcclxuICAgIGlmIChzLmhhdmUgPT0gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgcy5oYXZlLS07XHJcbiAgICBzLmhvbGQgKz0gKHMuc3RybS5pbnB1dF9kYXRhLmNoYXJDb2RlQXQocy5uZXh0KyspICYgMHhmZikgPDwgcy5iaXRzO1xyXG4gICAgcy5iaXRzICs9IDg7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLyogQXNzdXJlIHRoYXQgdGhlcmUgYXJlIGF0IGxlYXN0IG4gYml0cyBpbiB0aGUgYml0IGFjY3VtdWxhdG9yLiAgSWYgdGhlcmUgaXNcclxuICAgbm90IGVub3VnaCBhdmFpbGFibGUgaW5wdXQgdG8gZG8gdGhhdCwgdGhlbiByZXR1cm4gZnJvbSBpbmZsYXRlKCkuICovXHJcbmZ1bmN0aW9uIE5FRURCSVRTKHMsIG4pXHJcbntcclxuICAgIC8vIGlmKHR5cGVvZiBuICE9ICdudW1iZXInKSB0aHJvdyAnRVJST1InO1xyXG4gICAgd2hpbGUgKHMuYml0cyA8IG4pIHtcclxuICAgICAgICBpZighUFVMTEJZVEUocykpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKiBSZXR1cm4gdGhlIGxvdyBuIGJpdHMgb2YgdGhlIGJpdCBhY2N1bXVsYXRvciAobiA8IDE2KSAqL1xyXG5mdW5jdGlvbiBCSVRTKHMsIG4pXHJcbntcclxuICAgIHJldHVybiBzLmhvbGQgJiAoKDEgPDwgbikgLSAxKTtcclxufVxyXG5cclxuLyogUmVtb3ZlIG4gYml0cyBmcm9tIHRoZSBiaXQgYWNjdW11bGF0b3IgKi9cclxuZnVuY3Rpb24gRFJPUEJJVFMocywgbilcclxue1xyXG4gICAgLy8gaWYodHlwZW9mIG4gIT0gJ251bWJlcicpIHRocm93ICdFUlJPUic7XHJcbiAgICBzLmhvbGQgPj4+PSBuO1xyXG4gICAgcy5iaXRzIC09IG47XHJcbn1cclxuXHJcbi8qIFJlbW92ZSB6ZXJvIHRvIHNldmVuIGJpdHMgYXMgbmVlZGVkIHRvIGdvIHRvIGEgYnl0ZSBib3VuZGFyeSAqL1xyXG5mdW5jdGlvbiBCWVRFQklUUyhzKVxyXG57XHJcbiAgICBzLmhvbGQgPj4+PSBzLmJpdHMgJiA3O1xyXG4gICAgcy5iaXRzIC09IHMuYml0cyAmIDc7XHJcbn1cclxuXHJcbi8qIFJldmVyc2UgdGhlIGJ5dGVzIGluIGEgMzItYml0IHZhbHVlICovXHJcbmZ1bmN0aW9uIFJFVkVSU0UocSlcclxue1xyXG4gICAgcmV0dXJuICgocSA+Pj4gMjQpICYgMHhmZikgK1xyXG5cdFx0KChxID4+PiA4KSAmIDB4ZmYwMCkgK1xyXG5cdFx0KChxICYgMHhmZjAwKSA8PCA4KSArXHJcblx0XHQoKHEgJiAweGZmKSA8PCAyNCk7XHJcbn1cclxuXHJcbi8qXHJcbiAgIGluZmxhdGUoKSB1c2VzIGEgc3RhdGUgbWFjaGluZSB0byBwcm9jZXNzIGFzIG11Y2ggaW5wdXQgZGF0YSBhbmQgZ2VuZXJhdGUgYXNcclxuICAgbXVjaCBvdXRwdXQgZGF0YSBhcyBwb3NzaWJsZSBiZWZvcmUgcmV0dXJuaW5nLiAgVGhlIHN0YXRlIG1hY2hpbmUgaXNcclxuICAgc3RydWN0dXJlZCByb3VnaGx5IGFzIGZvbGxvd3M6XHJcblxyXG4gICAgZm9yICg7Oykgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgLi4uXHJcbiAgICBjYXNlIFNUQVRFbjpcclxuICAgICAgICBpZiAobm90IGVub3VnaCBpbnB1dCBkYXRhIG9yIG91dHB1dCBzcGFjZSB0byBtYWtlIHByb2dyZXNzKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLi4uIG1ha2UgcHJvZ3Jlc3MgLi4uXHJcbiAgICAgICAgc3RhdGUgPSBTVEFURW07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAuLi5cclxuICAgIH1cclxuXHJcbiAgIHNvIHdoZW4gaW5mbGF0ZSgpIGlzIGNhbGxlZCBhZ2FpbiwgdGhlIHNhbWUgY2FzZSBpcyBhdHRlbXB0ZWQgYWdhaW4sIGFuZFxyXG4gICBpZiB0aGUgYXBwcm9wcmlhdGUgcmVzb3VyY2VzIGFyZSBwcm92aWRlZCwgdGhlIG1hY2hpbmUgcHJvY2VlZHMgdG8gdGhlXHJcbiAgIG5leHQgc3RhdGUuICBUaGUgTkVFREJJVFMoKSBtYWNybyBpcyB1c3VhbGx5IHRoZSB3YXkgdGhlIHN0YXRlIGV2YWx1YXRlc1xyXG4gICB3aGV0aGVyIGl0IGNhbiBwcm9jZWVkIG9yIHNob3VsZCByZXR1cm4uICBORUVEQklUUygpIGRvZXMgdGhlIHJldHVybiBpZlxyXG4gICB0aGUgcmVxdWVzdGVkIGJpdHMgYXJlIG5vdCBhdmFpbGFibGUuICBUaGUgdHlwaWNhbCB1c2Ugb2YgdGhlIEJJVFMgbWFjcm9zXHJcbiAgIGlzOlxyXG5cclxuICAgICAgICBORUVEQklUUyhuKTtcclxuICAgICAgICAuLi4gZG8gc29tZXRoaW5nIHdpdGggQklUUyhuKSAuLi5cclxuICAgICAgICBEUk9QQklUUyhuKTtcclxuXHJcbiAgIHdoZXJlIE5FRURCSVRTKG4pIGVpdGhlciByZXR1cm5zIGZyb20gaW5mbGF0ZSgpIGlmIHRoZXJlIGlzbid0IGVub3VnaFxyXG4gICBpbnB1dCBsZWZ0IHRvIGxvYWQgbiBiaXRzIGludG8gdGhlIGFjY3VtdWxhdG9yLCBvciBpdCBjb250aW51ZXMuICBCSVRTKG4pXHJcbiAgIGdpdmVzIHRoZSBsb3cgbiBiaXRzIGluIHRoZSBhY2N1bXVsYXRvci4gIFdoZW4gZG9uZSwgRFJPUEJJVFMobikgZHJvcHNcclxuICAgdGhlIGxvdyBuIGJpdHMgb2ZmIHRoZSBhY2N1bXVsYXRvci4gIElOSVRCSVRTKCkgY2xlYXJzIHRoZSBhY2N1bXVsYXRvclxyXG4gICBhbmQgc2V0cyB0aGUgbnVtYmVyIG9mIGF2YWlsYWJsZSBiaXRzIHRvIHplcm8uICBCWVRFQklUUygpIGRpc2NhcmRzIGp1c3RcclxuICAgZW5vdWdoIGJpdHMgdG8gcHV0IHRoZSBhY2N1bXVsYXRvciBvbiBhIGJ5dGUgYm91bmRhcnkuICBBZnRlciBCWVRFQklUUygpXHJcbiAgIGFuZCBhIE5FRURCSVRTKDgpLCB0aGVuIEJJVFMoOCkgd291bGQgcmV0dXJuIHRoZSBuZXh0IGJ5dGUgaW4gdGhlIHN0cmVhbS5cclxuXHJcbiAgIE5FRURCSVRTKG4pIHVzZXMgUFVMTEJZVEUoKSB0byBnZXQgYW4gYXZhaWxhYmxlIGJ5dGUgb2YgaW5wdXQsIG9yIHRvIHJldHVyblxyXG4gICBpZiB0aGVyZSBpcyBubyBpbnB1dCBhdmFpbGFibGUuICBUaGUgZGVjb2Rpbmcgb2YgdmFyaWFibGUgbGVuZ3RoIGNvZGVzIHVzZXNcclxuICAgUFVMTEJZVEUoKSBkaXJlY3RseSBpbiBvcmRlciB0byBwdWxsIGp1c3QgZW5vdWdoIGJ5dGVzIHRvIGRlY29kZSB0aGUgbmV4dFxyXG4gICBjb2RlLCBhbmQgbm8gbW9yZS5cclxuXHJcbiAgIFNvbWUgc3RhdGVzIGxvb3AgdW50aWwgdGhleSBnZXQgZW5vdWdoIGlucHV0LCBtYWtpbmcgc3VyZSB0aGF0IGVub3VnaFxyXG4gICBzdGF0ZSBpbmZvcm1hdGlvbiBpcyBtYWludGFpbmVkIHRvIGNvbnRpbnVlIHRoZSBsb29wIHdoZXJlIGl0IGxlZnQgb2ZmXHJcbiAgIGlmIE5FRURCSVRTKCkgcmV0dXJucyBpbiB0aGUgbG9vcC4gIEZvciBleGFtcGxlLCB3YW50LCBuZWVkLCBhbmQga2VlcFxyXG4gICB3b3VsZCBhbGwgaGF2ZSB0byBhY3R1YWxseSBiZSBwYXJ0IG9mIHRoZSBzYXZlZCBzdGF0ZSBpbiBjYXNlIE5FRURCSVRTKClcclxuICAgcmV0dXJuczpcclxuXHJcbiAgICBjYXNlIFNUQVRFdzpcclxuICAgICAgICB3aGlsZSAod2FudCA8IG5lZWQpIHtcclxuICAgICAgICAgICAgTkVFREJJVFMobik7XHJcbiAgICAgICAgICAgIGtlZXBbd2FudCsrXSA9IEJJVFMobik7XHJcbiAgICAgICAgICAgIERST1BCSVRTKG4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZSA9IFNUQVRFeDtcclxuICAgIGNhc2UgU1RBVEV4OlxyXG5cclxuICAgQXMgc2hvd24gYWJvdmUsIGlmIHRoZSBuZXh0IHN0YXRlIGlzIGFsc28gdGhlIG5leHQgY2FzZSwgdGhlbiB0aGUgYnJlYWtcclxuICAgaXMgb21pdHRlZC5cclxuXHJcbiAgIEEgc3RhdGUgbWF5IGFsc28gcmV0dXJuIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggb3V0cHV0IHNwYWNlIGF2YWlsYWJsZSB0b1xyXG4gICBjb21wbGV0ZSB0aGF0IHN0YXRlLiAgVGhvc2Ugc3RhdGVzIGFyZSBjb3B5aW5nIHN0b3JlZCBkYXRhLCB3cml0aW5nIGFcclxuICAgbGl0ZXJhbCBieXRlLCBhbmQgY29weWluZyBhIG1hdGNoaW5nIHN0cmluZy5cclxuXHJcbiAgIFdoZW4gcmV0dXJuaW5nLCBhIFwiZ290byBpbmZfbGVhdmVcIiBpcyB1c2VkIHRvIHVwZGF0ZSB0aGUgdG90YWwgY291bnRlcnMsXHJcbiAgIHVwZGF0ZSB0aGUgY2hlY2sgdmFsdWUsIGFuZCBkZXRlcm1pbmUgd2hldGhlciBhbnkgcHJvZ3Jlc3MgaGFzIGJlZW4gbWFkZVxyXG4gICBkdXJpbmcgdGhhdCBpbmZsYXRlKCkgY2FsbCBpbiBvcmRlciB0byByZXR1cm4gdGhlIHByb3BlciByZXR1cm4gY29kZS5cclxuICAgUHJvZ3Jlc3MgaXMgZGVmaW5lZCBhcyBhIGNoYW5nZSBpbiBlaXRoZXIgc3RybS0+YXZhaWxfaW4gb3Igc3RybS0+YXZhaWxfb3V0LlxyXG4gICBXaGVuIHRoZXJlIGlzIGEgd2luZG93LCBnb3RvIGluZl9sZWF2ZSB3aWxsIHVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3RcclxuICAgb3V0cHV0IHdyaXR0ZW4uICBJZiBhIGdvdG8gaW5mX2xlYXZlIG9jY3VycyBpbiB0aGUgbWlkZGxlIG9mIGRlY29tcHJlc3Npb25cclxuICAgYW5kIHRoZXJlIGlzIG5vIHdpbmRvdyBjdXJyZW50bHksIGdvdG8gaW5mX2xlYXZlIHdpbGwgY3JlYXRlIG9uZSBhbmQgY29weVxyXG4gICBvdXRwdXQgdG8gdGhlIHdpbmRvdyBmb3IgdGhlIG5leHQgY2FsbCBvZiBpbmZsYXRlKCkuXHJcblxyXG4gICBJbiB0aGlzIGltcGxlbWVudGF0aW9uLCB0aGUgZmx1c2ggcGFyYW1ldGVyIG9mIGluZmxhdGUoKSBvbmx5IGFmZmVjdHMgdGhlXHJcbiAgIHJldHVybiBjb2RlIChwZXIgemxpYi5oKS4gIGluZmxhdGUoKSBhbHdheXMgd3JpdGVzIGFzIG11Y2ggYXMgcG9zc2libGUgdG9cclxuICAgc3RybS0+bmV4dF9vdXQsIGdpdmVuIHRoZSBzcGFjZSBhdmFpbGFibGUgYW5kIHRoZSBwcm92aWRlZCBpbnB1dC0tdGhlIGVmZmVjdFxyXG4gICBkb2N1bWVudGVkIGluIHpsaWIuaCBvZiBaX1NZTkNfRkxVU0guICBGdXJ0aGVybW9yZSwgaW5mbGF0ZSgpIGFsd2F5cyBkZWZlcnNcclxuICAgdGhlIGFsbG9jYXRpb24gb2YgYW5kIGNvcHlpbmcgaW50byBhIHNsaWRpbmcgd2luZG93IHVudGlsIG5lY2Vzc2FyeSwgd2hpY2hcclxuICAgcHJvdmlkZXMgdGhlIGVmZmVjdCBkb2N1bWVudGVkIGluIHpsaWIuaCBmb3IgWl9GSU5JU0ggd2hlbiB0aGUgZW50aXJlIGlucHV0XHJcbiAgIHN0cmVhbSBhdmFpbGFibGUuICBTbyB0aGUgb25seSB0aGluZyB0aGUgZmx1c2ggcGFyYW1ldGVyIGFjdHVhbGx5IGRvZXMgaXM6XHJcbiAgIHdoZW4gZmx1c2ggaXMgc2V0IHRvIFpfRklOSVNILCBpbmZsYXRlKCkgY2Fubm90IHJldHVybiBaX09LLiAgSW5zdGVhZCBpdFxyXG4gICB3aWxsIHJldHVybiBaX0JVRl9FUlJPUiBpZiBpdCBoYXMgbm90IHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgc3RyZWFtLlxyXG4gKi9cclxuXHJcbi8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqL1xyXG52YXIgaW5mbGF0ZV9vcmRlciA9IFtcclxuICAgIDE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdO1xyXG5aTElCLmluZmxhdGUgPSBmdW5jdGlvbihzdHJtLCBmbHVzaClcclxue1xyXG4gICAgdmFyIHN0YXRlO1xyXG4gICAgdmFyIHM7XHJcbiAgICB2YXIgX2luLCBvdXQ7ICAgICAgICAgIC8qIHNhdmUgc3RhcnRpbmcgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cclxuICAgIHZhciBjb3B5OyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXHJcbiAgICB2YXIgZnJvbV93aW5kb3dfb2Zmc2V0ID0gLTE7IC8qIGluZGV4IG9mIHdpbmRvd1tdICovXHJcbiAgICB2YXIgZnJvbV9vdXRfb2Zmc2V0ID0gLTE7IC8qIGluZGV4IG9mIG5leHRfb3V0W10gKi9cclxuICAgIHZhciBoZXJlOyAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xyXG4gICAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cclxuICAgIHZhciBsZW47ICAgICAgICAgICAgICAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqL1xyXG4gICAgdmFyIHJldDsgICAgICAgICAgICAgICAvKiByZXR1cm4gY29kZSAqL1xyXG5cclxuICAgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fFxyXG4gICAgICAgICghc3RybS5pbnB1dF9kYXRhICYmIHN0cm0uYXZhaWxfaW4gIT0gMCkpXHJcbiAgICAgICAgcmV0dXJuIFpMSUIuWl9TVFJFQU1fRVJST1I7XHJcblxyXG4gICAgc3RhdGUgPSBzdHJtLnN0YXRlO1xyXG4gICAgaWYgKHN0YXRlLm1vZGUgPT0gVFlQRSkgc3RhdGUubW9kZSA9IFRZUEVETzsgICAgICAvKiBza2lwIGNoZWNrICovXHJcblxyXG4gICAgLy8gTE9BRFxyXG4gICAgcyA9IHt9O1xyXG4gICAgTE9BRChzdHJtLCBzKTtcclxuXHJcbiAgICBfaW4gPSBzLmhhdmU7XHJcbiAgICBvdXQgPSBzLmxlZnQ7XHJcbiAgICByZXQgPSBaTElCLlpfT0s7XHJcbmluZl9sZWF2ZTogZm9yICg7Oykge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIlN0YXRlLm1vZGVcIiwgc3RhdGUubW9kZSlcclxuICAgIC8vY29uc29sZS5sb2coc3RybS5tc2cpXHJcbiAgICAgICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7XHJcbiAgICAgICAgY2FzZSBIRUFEOlxyXG4gICAgICAgICAgICBpZiAoc3RhdGUud3JhcCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIDE2KSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4vLyAjaWZkZWYgR1VOWklQXHJcbiAgICAgICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpICYmIHMuaG9sZCA9PSAweDhiMWYpIHsgIC8qIGd6aXAgaGVhZGVyICovXHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IHN0cm0uY2hlY2tzdW1fZnVuY3Rpb24oMCwgbnVsbCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICBDUkMyKHN0cm0sIHMuaG9sZCk7XHJcbiAgICAgICAgICAgICAgICBJTklUQklUUyhzKTtcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLmZsYWdzID0gMDsgICAgICAgICAgIC8qIGV4cGVjdCB6bGliIGhlYWRlciAqL1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IC0xO1xyXG4gICAgICAgICAgICBpZiAoIShzdGF0ZS53cmFwICYgMSkgfHwgICAvKiBjaGVjayBpZiB6bGliIGhlYWRlciBhbGxvd2VkICovXHJcbi8vI2Vsc2VcclxuLy8gICAgICAgICAgaWYgKFxyXG4vLyNlbmRpZlxyXG4gICAgICAgICAgICAgICAgKChCSVRTKHMsIDgpIDw8IDgpICsgKHMuaG9sZCA+Pj4gOCkpICUgMzEpIHtcclxuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBoZWFkZXIgY2hlY2snO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChCSVRTKHMsIDQpICE9IFpMSUIuWl9ERUZMQVRFRCkge1xyXG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBEUk9QQklUUyhzLCA0KTtcclxuICAgICAgICAgICAgbGVuID0gQklUUyhzLCA0KSArIDg7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PSAwKVxyXG4gICAgICAgICAgICAgICAgc3RhdGUud2JpdHMgPSBsZW47XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxlbiA+IHN0YXRlLndiaXRzKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47XHJcbi8vICAgICAgICAgICAgVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICB6bGliIGhlYWRlciBva1xcblwiKSk7XHJcblx0XHRcdHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHN0cm0uY2hlY2tzdW1fZnVuY3Rpb24oMCwgbnVsbCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBzLmhvbGQgJiAweDIwMCA/IERJQ1RJRCA6IFRZUEU7XHJcbiAgICAgICAgICAgIElOSVRCSVRTKHMpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuLy8gI2lmZGVmIEdVTlpJUFxyXG4gICAgICAgIGNhc2UgRkxBR1M6XHJcbiAgICAgICAgICAgIGlmKCFORUVEQklUUyhzLCAxNikpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgc3RhdGUuZmxhZ3MgPSBzLmhvbGQ7XHJcbiAgICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgJiAweGZmKSAhPSBaTElCLlpfREVGTEFURUQpIHtcclxuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gXCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4ZTAwMCkge1xyXG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSBcInVua25vd24gaGVhZGVyIGZsYWdzIHNldFwiO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKHMuaG9sZCA+Pj4gOCkgJiAxO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcclxuXHRcdFx0XHRDUkMyKHN0cm0sIHMuaG9sZCk7XHJcblx0XHRcdH1cclxuICAgICAgICAgICAgSU5JVEJJVFMocyk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xyXG4gICAgICAgIGNhc2UgVElNRTpcclxuICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIDMyKSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IHMuaG9sZDtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XHJcblx0XHRcdFx0Q1JDNChzdHJtLCBzLmhvbGQpO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgICAgIElOSVRCSVRTKHMpO1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gT1M7XHJcbiAgICAgICAgY2FzZSBPUzpcclxuICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIDE2KSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSBzLmhvbGQgJiAweGZmO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5vcyA9IHMuaG9sZCA+Pj4gODtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcclxuXHRcdFx0XHRDUkMyKHN0cm0sIHMuaG9sZCk7XHJcblx0XHRcdH1cclxuICAgICAgICAgICAgSU5JVEJJVFMocyk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBFWExFTjtcclxuICAgICAgICBjYXNlIEVYTEVOOlxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcclxuICAgICAgICAgICAgICAgIGlmKCFORUVEQklUUyhzLCAxNikpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IHMuaG9sZDtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBzLmhvbGQ7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XHJcblx0XHRcdFx0XHRDUkMyKHN0cm0sIHMuaG9sZCk7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgSU5JVEJJVFMocyk7XHJcblx0XHRcdFx0c3RhdGUuaGVhZC5leHRyYSA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG51bGw7XHJcblx0XHRcdH1cclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xyXG4gICAgICAgIGNhc2UgRVhUUkE6XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xyXG4gICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gcy5oYXZlKSBjb3B5ID0gcy5oYXZlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmhlYWQuZXh0cmFfbGVuIC0gc3RhdGUubGVuZ3RoO1xyXG4vKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6bWVtY3B5KHN0YXRlLT5oZWFkLT5leHRyYSArIGxlbiwgbmV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gKyBjb3B5ID4gc3RhdGUtPmhlYWQtPmV4dHJhX21heCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUtPmhlYWQtPmV4dHJhX21heCAtIGxlbiA6IGNvcHkpO1xyXG4qL1xyXG5cdFx0XHRcdFx0XHRzdGF0ZS5oZWFkLmV4dHJhICs9IHN0cm0uaW5wdXRfZGF0YS5zdWJzdHJpbmcoXHJcblx0XHRcdFx0XHRcdFx0cy5uZXh0LCBzLm5leHQgKyAobGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gOiBjb3B5KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gc3RybS5jaGVja3N1bV9mdW5jdGlvbihzdGF0ZS5jaGVjaywgc3RybS5pbnB1dF9kYXRhLCBzLm5leHQsIGNvcHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHMuaGF2ZSAtPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgICAgIHMubmV4dCArPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xyXG4gICAgICAgIGNhc2UgTkFNRTpcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwODAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocy5oYXZlID09IDApIGJyZWFrIGluZl9sZWF2ZTtcclxuXHRcdFx0XHRpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbCAmJiBzdGF0ZS5oZWFkLm5hbWUgPT09IG51bGwpIHtcclxuXHRcdFx0XHRcdHN0YXRlLmhlYWQubmFtZSA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgY29weSA9IDA7XHJcblx0XHRcdFx0Ly8gVE9ETyBlbmQgPSBzdHJtLmlucHV0X2RhdGEuaW5kZXhPZihcIlxcMFwiLCBzLm5leHQpO1xyXG5cdFx0XHRcdC8vIFRPRE8gc3RhdGUubGVuZ3RoID0+IHN0YXRlLmhlYWQubmFtZS5sZW5ndGhcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdHJtLmlucHV0X2RhdGEuY2hhckF0KHMubmV4dCArIGNvcHkpOyBjb3B5Kys7XHJcblx0XHRcdFx0XHRpZihsZW4gPT09IFwiXFwwXCIpXHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICE9PSBudWxsICYmXHJcblx0XHRcdFx0XHRcdHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhlYWQubmFtZV9tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IGxlbjtcclxuXHRcdFx0XHRcdFx0c3RhdGUubGVuZ3RoKys7XHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjb3B5IDwgcy5oYXZlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gc3RybS5jaGVja3N1bV9mdW5jdGlvbihzdGF0ZS5jaGVjaywgc3RybS5pbnB1dF9kYXRhLCBzLm5leHQsIGNvcHkpO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICAgICAgICAgIHMuaGF2ZSAtPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgcy5uZXh0ICs9IGNvcHk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuICE9PSBcIlxcMFwiKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UO1xyXG4gICAgICAgIGNhc2UgQ09NTUVOVDpcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocy5oYXZlID09IDApIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgIGNvcHkgPSAwO1xyXG5cdFx0XHRcdGlmIChzdGF0ZS5oZWFkICE9PSBudWxsICYmIHN0YXRlLmhlYWQuY29tbWVudCA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0c3RhdGUuaGVhZC5jb21tZW50ID0gXCJcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gVE9ETyBlbmQgPSBzdHJtLmlucHV0X2RhdGEuaW5kZXhPZihcIlxcMFwiLCBzLm5leHQpO1xyXG5cdFx0XHRcdC8vIFRPRE8gc3RhdGUubGVuZ3RoID0+IHN0YXRlLmhlYWQuY29tbWVudC5sZW5ndGhcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdHJtLmlucHV0X2RhdGEuY2hhckF0KHMubmV4dCArIGNvcHkpOyBjb3B5Kys7XHJcblx0XHRcdFx0XHRpZihsZW4gPT09IFwiXFwwXCIpXHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICE9PSBudWxsICYmXHJcblx0XHRcdFx0XHRcdHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhlYWQuY29tbV9tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ICs9IGxlbjtcclxuXHRcdFx0XHRcdFx0c3RhdGUubGVuZ3RoKys7XHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjb3B5IDwgcy5oYXZlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMClcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IHN0cm0uY2hlY2tzdW1fZnVuY3Rpb24oc3RhdGUuY2hlY2ssIHN0cm0uaW5wdXRfZGF0YSwgcy5uZXh0LCBjb3B5KTtcclxuICAgICAgICAgICAgICAgIHMuaGF2ZSAtPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgcy5uZXh0ICs9IGNvcHk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuICE9PSBcIlxcMFwiKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBIQ1JDO1xyXG4gICAgICAgIGNhc2UgSENSQzpcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZighTkVFREJJVFMocywgMTYpKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgICAgICBpZiAocy5ob2xkICE9IChzdGF0ZS5jaGVjayAmIDB4ZmZmZikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9IFwiaGVhZGVyIGNyYyBtaXNtYXRjaFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBJTklUQklUUyhzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5oY3JjID0gKHN0YXRlLmZsYWdzID4+PiA5KSAmIDE7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHN0cm0uY2hlY2tzdW1fZnVuY3Rpb24oMCwgbnVsbCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xyXG4gICAgICAgICAgICBicmVhaztcclxuLy8jZW5kaWZcclxuICAgICAgICBjYXNlIERJQ1RJRDpcclxuICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIDMyKSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSBSRVZFUlNFKHMuaG9sZCk7XHJcbiAgICAgICAgICAgIElOSVRCSVRTKHMpO1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDtcclxuICAgICAgICBjYXNlIERJQ1Q6XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBSRVNUT1JFKHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFpMSUIuWl9ORUVEX0RJQ1Q7XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0c3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gc3RybS5jaGVja3N1bV9mdW5jdGlvbigwLCBudWxsLCAwLCAwKTtcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XHJcbiAgICAgICAgY2FzZSBUWVBFOlxyXG4gICAgICAgICAgICBpZiAoZmx1c2ggPT0gWkxJQi5aX0JMT0NLIHx8IGZsdXNoID09IFpMSUIuWl9UUkVFUykgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgIGNhc2UgVFlQRURPOlxyXG4gICAgICAgICAgICBpZiAoc3RhdGUubGFzdCkge1xyXG4gICAgICAgICAgICAgICAgQllURUJJVFMocyk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighTkVFREJJVFMocywgMykpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgc3RhdGUubGFzdCA9IEJJVFMocywgMSk7XHJcbiAgICAgICAgICAgIERST1BCSVRTKHMsIDEpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKEJJVFMocywgMikpIHtcclxuICAgICAgICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RvcmVkIGJsb2NrICovXHJcbi8vICAgICAgICAgICAgICAgIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBzdG9yZWQgYmxvY2slc1xcblwiLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLT5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gU1RPUkVEO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGZpeGVkIGJsb2NrICovXHJcbiAgICAgICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XHJcbi8vICAgICAgICAgICAgICAgIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUtPmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOyAgICAgICAgICAgICAvKiBkZWNvZGUgY29kZXMgKi9cclxuICAgICAgICAgICAgICAgIGlmIChmbHVzaCA9PSBaTElCLlpfVFJFRVMpIHtcclxuICAgICAgICAgICAgICAgICAgICBEUk9QQklUUyhzLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqL1xyXG4vLyAgICAgICAgICAgICAgICBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUtPmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJsb2NrIHR5cGUnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBEUk9QQklUUyhzLCAyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBTVE9SRUQ6XHJcbiAgICAgICAgICAgIEJZVEVCSVRTKHMpOyAgICAgICAgICAgICAgICAgICAgICAgICAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXHJcbiAgICAgICAgICAgIGlmKCFORUVEQklUUyhzLCAzMikpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgaWYgKChzLmhvbGQgJiAweGZmZmYpICE9ICgoKHMuaG9sZCA+Pj4gMTYpICYgMHhmZmZmKSBeIDB4ZmZmZikpIHtcclxuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHMnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IHMuaG9sZCAmIDB4ZmZmZjtcclxuLy8gICAgICAgICAgICBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgbGVuZ3RoICV1XFxuXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICBzdGF0ZS0+bGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIElOSVRCSVRTKHMpO1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWV87XHJcbiAgICAgICAgICAgIGlmIChmbHVzaCA9PSBaTElCLlpfVFJFRVMpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICBjYXNlIENPUFlfOlxyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWTtcclxuICAgICAgICBjYXNlIENPUFk6XHJcbiAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChjb3B5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29weSA+IHMuaGF2ZSkgY29weSA9IHMuaGF2ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gcy5sZWZ0KSBjb3B5ID0gcy5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcHkgPT0gMCkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICAgICAgc3RybS5vdXRwdXRfZGF0YSArPSBzdHJtLmlucHV0X2RhdGEuc3Vic3RyaW5nKHMubmV4dCwgcy5uZXh0ICsgY29weSk7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm5leHRfb3V0ICs9IGNvcHk7XHJcbiAgICAgICAgICAgICAgICBzLmhhdmUgLT0gY29weTtcclxuICAgICAgICAgICAgICAgIHMubmV4dCArPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgcy5sZWZ0IC09IGNvcHk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGVuZFxcblwiKSk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFRBQkxFOlxyXG4gICAgICAgICAgICBpZighTkVFREJJVFMocywgMTQpKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgIHN0YXRlLm5sZW4gPSBCSVRTKHMsIDUpICsgMjU3O1xyXG4gICAgICAgICAgICBEUk9QQklUUyhzLCA1KTtcclxuICAgICAgICAgICAgc3RhdGUubmRpc3QgPSBCSVRTKHMsIDUpICsgMTtcclxuICAgICAgICAgICAgRFJPUEJJVFMocywgNSk7XHJcbiAgICAgICAgICAgIHN0YXRlLm5jb2RlID0gQklUUyhzLCA0KSArIDQ7XHJcbiAgICAgICAgICAgIERST1BCSVRTKHMsIDQpO1xyXG4vLyNpZm5kZWYgUEtaSVBfQlVHX1dPUktBUk9VTkRcclxuICAgICAgICAgICAgaWYgKHN0YXRlLm5sZW4gPiAyODYgfHwgc3RhdGUubmRpc3QgPiAzMCkge1xyXG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAndG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbi8vI2VuZGlmXHJcbi8vICAgICAgICAgICAgVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgdGFibGUgc2l6ZXMgb2tcXG5cIikpO1xyXG4gICAgICAgICAgICBzdGF0ZS5oYXZlID0gMDtcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTkxFTlM7XHJcbiAgICAgICAgY2FzZSBMRU5MRU5TOlxyXG4gICAgICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZighTkVFREJJVFMocywgMykpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgIHZhciB0bXAgPSBCSVRTKHMsIDMpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubGVuc1tpbmZsYXRlX29yZGVyW3N0YXRlLmhhdmUrK11dID0gdG1wO1xyXG4gICAgICAgICAgICAgICAgRFJPUEJJVFMocywgMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCAxOSlcclxuICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbaW5mbGF0ZV9vcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XHJcbiAgICAgICAgICAgIHN0YXRlLm5leHQgPSAwO1xyXG4gICAgICAgICAgICBzdGF0ZS5sZW5jb2RlID0gMDtcclxuICAgICAgICAgICAgc3RhdGUubGVuYml0cyA9IDc7XHJcblxyXG4vLyAgICAgICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoQ09ERVMsIHN0YXRlLT5sZW5zLCAxOSwgJihzdGF0ZS0+bmV4dCksXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmKHN0YXRlLT5sZW5iaXRzKSwgc3RhdGUtPndvcmspO1xyXG4gICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKHN0YXRlLCBDT0RFUyk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmV0KSB7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgY29kZSBsZW5ndGhzIG9rXFxuXCIpKTtcclxuICAgICAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBDT0RFTEVOUztcclxuICAgICAgICBjYXNlIENPREVMRU5TOlxyXG4gICAgICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICg7Oykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5jb2Rlc1tzdGF0ZS5sZW5jb2RlICsgQklUUyhzLCBzdGF0ZS5sZW5iaXRzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlcmUuYml0cyA8PSBzLmJpdHMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFQVUxMQllURShzKSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhlcmUudmFsIDwgMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICBEUk9QQklUUyhzLCBoZXJlLmJpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGhlcmUudmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlcmUudmFsID09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFORUVEQklUUyhzLCBoZXJlLmJpdHMgKyAyKSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEUk9QQklUUyhzLCBoZXJlLmJpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29weSA9IDMgKyBCSVRTKHMsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEUk9QQklUUyhzLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVyZS52YWwgPT0gMTcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIGhlcmUuYml0cyArIDMpKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERST1BCSVRTKHMsIGhlcmUuYml0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHkgPSAzICsgQklUUyhzLCAzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRFJPUEJJVFMocywgMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighTkVFREJJVFMocywgaGVyZS5iaXRzICsgNykpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRFJPUEJJVFMocywgaGVyZS5iaXRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29weSA9IDExICsgQklUUyhzLCA3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRFJPUEJJVFMocywgNyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyogaGFuZGxlIGVycm9yIGJyZWFrcyBpbiB3aGlsZSAqL1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PSBCQUQpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5sZW5zWzI1Nl0gPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrJztcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0c1xyXG4gICAgICAgICAgICAgICB2YWx1ZXMgaGVyZSAoOSBhbmQgNikgd2l0aG91dCByZWFkaW5nIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXHJcbiAgICAgICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIEVOT1VHSCBjb25zdGFudHMsIHdoaWNoIGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMgKi9cclxuICAgICAgICAgICAgc3RhdGUubmV4dCA9IDA7XHJcbiAgICAgICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xyXG4gICAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTtcclxuLy8gICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLT5sZW5zLCBzdGF0ZS0+bmxlbiwgJihzdGF0ZS0+bmV4dCksXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmKHN0YXRlLT5sZW5iaXRzKSwgc3RhdGUtPndvcmspO1xyXG4gICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKHN0YXRlLCBMRU5TKTtcclxuICAgICAgICAgICAgaWYgKHJldCkge1xyXG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0JztcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XHJcbiAgICAgICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcclxuLy8gICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS0+bGVucyArIHN0YXRlLT5ubGVuLCBzdGF0ZS0+bmRpc3QsICYoc3RhdGUtPm5leHQpLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmKHN0YXRlLT5kaXN0Yml0cyksIHN0YXRlLT53b3JrKTtcclxuICAgICAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShzdGF0ZSwgRElTVFMpO1xyXG4gICAgICAgICAgICBpZiAocmV0KSB7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlcyBzZXQnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG5cIikpO1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXztcclxuICAgICAgICAgICAgaWYgKGZsdXNoID09IFpMSUIuWl9UUkVFUykgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgIGNhc2UgTEVOXzpcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcclxuICAgICAgICBjYXNlIExFTjpcclxuICAgICAgICAgICAgaWYgKHMuaGF2ZSA+PSA2ICYmIHMubGVmdCA+PSAyNTgpIHtcclxuICAgICAgICAgICAgICAgIFJFU1RPUkUocyk7XHJcbiAgICAgICAgICAgICAgICBpbmZsYXRlX2Zhc3Qoc3RybSwgb3V0KTtcclxuICAgICAgICAgICAgICAgIExPQUQoc3RybSwgcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PSBUWVBFKVxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKDs7KSB7XHJcbiAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUuY29kZXNbc3RhdGUubGVuY29kZSArIEJJVFMocywgc3RhdGUubGVuYml0cyldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhlcmUuYml0cyA8PSBzLmJpdHMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYoIVBVTExCWVRFKHMpKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGhlcmUub3AgJiYgKGhlcmUub3AgJiAweGYwKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0ID0gaGVyZTtcclxuICAgICAgICAgICAgICAgIGZvciAoOzspIHtcclxuICAgICAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUuY29kZXNbc3RhdGUubGVuY29kZSArIGxhc3QudmFsICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEJJVFMocywgbGFzdC5iaXRzICsgbGFzdC5vcCkgPj4+IGxhc3QuYml0cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0LmJpdHMgKyBoZXJlLmJpdHMgPD0gcy5iaXRzKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBpZighUFVMTEJZVEUocykpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIERST1BCSVRTKHMsIGxhc3QuYml0cyk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3QuYml0cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBEUk9QQklUUyhzLCBoZXJlLmJpdHMpO1xyXG4gICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmUuYml0cztcclxuICAgICAgICAgICAgc3RhdGUubGVuZ3RoID0gaGVyZS52YWw7XHJcbiAgICAgICAgICAgIGlmIChoZXJlLm9wID09IDApIHtcclxuLy8gICAgICAgICAgICAgIFRyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGhlcmUub3AgJiAzMikge1xyXG4vLyAgICAgICAgICAgICAgICBUcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaGVyZS5vcCAmIDY0KSB7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZS5vcCAmIDE1O1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVORVhUO1xyXG4gICAgICAgIGNhc2UgTEVORVhUOlxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcclxuICAgICAgICAgICAgICAgIGlmKCFORUVEQklUUyhzLCBzdGF0ZS5leHRyYSkpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBCSVRTKHMsIHN0YXRlLmV4dHJhKTtcclxuICAgICAgICAgICAgICAgIERST1BCSVRTKHMsIHN0YXRlLmV4dHJhKTtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgc3RhdGUtPmxlbmd0aCkpO1xyXG4gICAgICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBESVNUO1xyXG4gICAgICAgIGNhc2UgRElTVDpcclxuICAgICAgICAgICAgZm9yICg7Oykge1xyXG4gICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmNvZGVzW3N0YXRlLmRpc3Rjb2RlICsgQklUUyhzLCBzdGF0ZS5kaXN0Yml0cyldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhlcmUuYml0cyA8PSBzLmJpdHMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYoIVBVTExCWVRFKHMpKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChoZXJlLm9wICYgMHhmMCkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdCA9IGhlcmU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKDs7KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmNvZGVzW3N0YXRlLmRpc3Rjb2RlICsgbGFzdC52YWwgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQklUUyhzLCBsYXN0LmJpdHMgKyBsYXN0Lm9wKSA+Pj4gbGFzdC5iaXRzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChsYXN0LmJpdHMgKyBoZXJlLmJpdHMpIDw9IHMuYml0cykgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIVBVTExCWVRFKHMpKSBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBEUk9QQklUUyhzLCBsYXN0LmJpdHMpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0LmJpdHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgRFJPUEJJVFMocywgaGVyZS5iaXRzKTtcclxuICAgICAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlLmJpdHM7XHJcbiAgICAgICAgICAgIGlmIChoZXJlLm9wICYgNjQpIHtcclxuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZS52YWw7XHJcbiAgICAgICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZS5vcCAmIDE1O1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gRElTVEVYVDtcclxuICAgICAgICBjYXNlIERJU1RFWFQ6XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xyXG4gICAgICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIHN0YXRlLmV4dHJhKSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUub2Zmc2V0ICs9IEJJVFMocywgc3RhdGUuZXh0cmEpO1xyXG4gICAgICAgICAgICAgICAgRFJPUEJJVFMocywgc3RhdGUuZXh0cmEpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcclxuICAgICAgICAgICAgfVxyXG4vL05PU1BSVCAjaWZkZWYgSU5GTEFURV9TVFJJQ1RcclxuLy8gICAgICAgICAgICBpZiAoc3RhdGUtPm9mZnNldCA+IHN0YXRlLT5kbWF4KSB7XHJcbi8vICAgICAgICAgICAgICAgIHN0cm0tPm1zZyA9IChjaGFyICopXCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiO1xyXG4vLyAgICAgICAgICAgICAgICBzdGF0ZS0+bW9kZSA9IEJBRDtcclxuLy8gICAgICAgICAgICAgICAgYnJlYWs7XHJcbi8vICAgICAgICAgICAgfVxyXG4vLyNlbmRpZlxyXG4vLyAgICAgICAgICAgIFRyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLT5vZmZzZXQpKTtcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xyXG4gICAgICAgIGNhc2UgTUFUQ0g6XHJcbiAgICAgICAgICAgIGlmIChzLmxlZnQgPT0gMCkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICBjb3B5ID0gb3V0IC0gcy5sZWZ0O1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cclxuICAgICAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53aGF2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4vL05PU1BSVCAjaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXHJcbi8vICAgICAgICAgICAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcclxuLy8gICAgICAgICAgICAgICAgICAgIGNvcHkgLT0gc3RhdGUtPndoYXZlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS0+bGVuZ3RoKSBjb3B5ID0gc3RhdGUtPmxlbmd0aDtcclxuLy8gICAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgY29weSA9IGxlZnQ7XHJcbi8vICAgICAgICAgICAgICAgICAgICBsZWZ0IC09IGNvcHk7XHJcbi8vICAgICAgICAgICAgICAgICAgICBzdGF0ZS0+bGVuZ3RoIC09IGNvcHk7XHJcbi8vICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgKnB1dCsrID0gMDtcclxuLy8gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUtPmxlbmd0aCA9PSAwKSBzdGF0ZS0+bW9kZSA9IExFTjtcclxuLy8gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4vLyNlbmRpZlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSA9IHN0YXRlLT53aW5kb3cgKyAoc3RhdGUtPndzaXplIC0gY29weSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbV93aW5kb3dfb2Zmc2V0ID0gc3RhdGUud3NpemUgLSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fb3V0X29mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSA9IHN0YXRlLT53aW5kb3cgKyAoc3RhdGUtPnduZXh0IC0gY29weSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbV93aW5kb3dfb2Zmc2V0ID0gc3RhdGUud25leHQgLSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fb3V0X29mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY29weSBmcm9tIG91dHB1dCAqL1xyXG4gICAgICAgICAgICAgICAgLy8gZnJvbSA9IHB1dCAtIHN0YXRlLT5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBmcm9tX3dpbmRvd19vZmZzZXQgPSAtMTtcclxuICAgICAgICAgICAgICAgIGZyb21fb3V0X29mZnNldCA9IHN0cm0ubmV4dF9vdXQgLSBzdGF0ZS5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb3B5ID4gcy5sZWZ0KSBjb3B5ID0gcy5sZWZ0O1xyXG4gICAgICAgICAgICBzLmxlZnQgLT0gY29weTtcclxuICAgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XHJcbiAgICAgICAgICAgIGlmKCBmcm9tX3dpbmRvd19vZmZzZXQgPj0gMCApIHtcclxuICAgICAgICAgICAgICAgIHN0cm0ub3V0cHV0X2RhdGEgKz0gc3RhdGUud2luZG93LnN1YnN0cmluZyhmcm9tX3dpbmRvd19vZmZzZXQsIGZyb21fd2luZG93X29mZnNldCArIGNvcHkpO1xyXG4gICAgICAgICAgICAgICAgc3RybS5uZXh0X291dCArPSBjb3B5O1xyXG4gICAgICAgICAgICAgICAgY29weSA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHJtLm5leHRfb3V0ICs9IGNvcHk7XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RybS5vdXRwdXRfZGF0YSArPSBzdHJtLm91dHB1dF9kYXRhLmNoYXJBdChmcm9tX291dF9vZmZzZXQrKyk7XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT0gMCkgc3RhdGUubW9kZSA9IExFTjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMSVQ6XHJcbiAgICAgICAgICAgIGlmIChzLmxlZnQgPT0gMCkgYnJlYWsgaW5mX2xlYXZlO1xyXG5cclxuICAgICAgICAgICAgc3RybS5vdXRwdXRfZGF0YSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHN0YXRlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHN0cm0ubmV4dF9vdXQrKztcclxuICAgICAgICAgICAgLy8qcHV0KysgPSAodW5zaWduZWQgY2hhcikoc3RhdGUtPmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICBzLmxlZnQtLTtcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBDSEVDSzpcclxuICAgICAgICAgICAgaWYgKHN0YXRlLndyYXApIHtcclxuICAgICAgICAgICAgICAgIGlmKCFORUVEQklUUyhzLCAzMikpIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgICAgIG91dCAtPSBzLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBvdXQ7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS50b3RhbCArPSBvdXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAob3V0KVxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0uY2hlY2tzdW1fZnVuY3Rpb24oc3RhdGUuY2hlY2ssIHN0cm0ub3V0cHV0X2RhdGEsIHN0cm0ub3V0cHV0X2RhdGEubGVuZ3RoIC0gb3V0LCBvdXQpO1xyXG4gICAgICAgICAgICAgICAgb3V0ID0gcy5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKChcclxuLy8gI2lmZGVmIEdVTlpJUFxyXG4gICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mbGFncyA/IHMuaG9sZCA6XHJcbi8vI2VuZGlmXHJcbiAgICAgICAgICAgICAgICAgICAgIFJFVkVSU0Uocy5ob2xkKSkgIT0gc3RhdGUuY2hlY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9IFwiaW5jb3JyZWN0IGRhdGEgY2hlY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgSU5JVEJJVFMocyk7XHJcbi8vZGVidWcoXCIjIyBpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxcblwiKTtcclxuLy8gICAgICAgICAgICAgICAgVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBjaGVjayBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xyXG4gICAgICAgICAgICB9XHJcbi8vI2lmZGVmIEdVTlpJUFxyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOR1RIO1xyXG4gICAgICAgIGNhc2UgTEVOR1RIOlxyXG4gICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykge1xyXG4gICAgICAgICAgICAgICAgaWYoIU5FRURCSVRTKHMsIDMyKSkgYnJlYWsgaW5mX2xlYXZlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMuaG9sZCAhPSAoc3RhdGUudG90YWwgJiAweGZmZmZmZmZmKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBJTklUQklUUyhzKTtcclxuICAgICAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBsZW5ndGggbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4vLyNlbmRpZlxyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gRE9ORTtcclxuICAgICAgICBjYXNlIERPTkU6XHJcbiAgICAgICAgICAgIHJldCA9IFpMSUIuWl9TVFJFQU1fRU5EO1xyXG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgY2FzZSBCQUQ6XHJcbiAgICAgICAgICAgIHJldCA9IFpMSUIuWl9EQVRBX0VSUk9SO1xyXG4gICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XHJcbiAgICAgICAgY2FzZSBNRU06XHJcbiAgICAgICAgICAgIHJldHVybiBaTElCLlpfTUVNX0VSUk9SO1xyXG4gICAgICAgIGNhc2UgU1lOQzpcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gWkxJQi5aX1NUUkVBTV9FUlJPUjtcclxuICAgICAgICB9IH1cclxuXHJcbiAgICAvKlxyXG4gICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cclxuICAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxyXG4gICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cclxuICAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxyXG4gICAgKi9cclxuaW5mX2xlYXZlOlxyXG4gICAgUkVTVE9SRShzKTtcclxuICAgIGlmIChzdGF0ZS53c2l6ZSB8fCAob3V0ICE9IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPCBDSEVDSyB8fCBmbHVzaCAhPSBaTElCLlpfRklOSVNIKSkpXHJcbiAgICAgICAgaWYgKHVwZGF0ZXdpbmRvdyhzdHJtKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTUVNO1xyXG4gICAgICAgICAgICByZXR1cm4gWkxJQi5aX01FTV9FUlJPUjtcclxuICAgICAgICB9XHJcbiAgICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcclxuICAgIG91dCAtPSBzdHJtLmF2YWlsX291dDtcclxuICAgIHN0cm0udG90YWxfaW4gKz0gX2luO1xyXG4gICAgc3RybS50b3RhbF9vdXQgKz0gb3V0O1xyXG4gICAgc3RhdGUudG90YWwgKz0gb3V0O1xyXG4gICAgaWYgKHN0YXRlLndyYXAgJiYgb3V0KVxyXG5cdCAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSBzdHJtLmNoZWNrc3VtX2Z1bmN0aW9uKHN0YXRlLmNoZWNrLCBzdHJtLm91dHB1dF9kYXRhLCAwLCBzdHJtLm91dHB1dF9kYXRhLmxlbmd0aCk7XHJcbiAgICBzdHJtLmRhdGFfdHlwZSA9IHN0YXRlLmJpdHMgKyAoc3RhdGUubGFzdCA/IDY0IDogMCkgK1xyXG5cdCAgICAoc3RhdGUubW9kZSA9PSBUWVBFID8gMTI4IDogMCkgK1xyXG5cdCAgICAoc3RhdGUubW9kZSA9PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT0gQ09QWV8gPyAyNTYgOiAwKTtcclxuICAgIGlmICgoKF9pbiA9PSAwICYmIG91dCA9PSAwKSB8fCBmbHVzaCA9PSBaTElCLlpfRklOSVNIKSAmJiByZXQgPT0gWkxJQi5aX09LKVxyXG4gICAgICAgIHJldCA9IFpMSUIuWl9CVUZfRVJST1I7XHJcbiAgICByZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuWkxJQi5pbmZsYXRlRW5kID0gZnVuY3Rpb24oc3RybSlcclxue1xyXG4gICAgdmFyIHN0YXRlO1xyXG4gICAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIClcclxuICAgICAgICByZXR1cm4gWkxJQi5aX1NUUkVBTV9FUlJPUjtcclxuICAgIHN0YXRlID0gc3RybS5zdGF0ZTtcclxuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XHJcbiAgICBzdHJtLnN0YXRlID0gbnVsbDtcclxuICAgIC8vICAgIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IGVuZFxcblwiKSk7XHJcbiAgICByZXR1cm4gWkxJQi5aX09LO1xyXG59O1xyXG5cclxuWkxJQi56X3N0cmVhbS5wcm90b3R5cGUuaW5mbGF0ZSA9IGZ1bmN0aW9uKGlucHV0X3N0cmluZywgb3B0cylcclxue1xyXG4gICAgdmFyIGZsdXNoO1xyXG4gICAgdmFyIGF2YWlsX291dDtcclxuXHR2YXIgREVGQVVMVF9CVUZGRVJfU0laRSA9IDE2Mzg0O1xyXG5cclxuICAgIHRoaXMuaW5wdXRfZGF0YSA9IGlucHV0X3N0cmluZztcclxuICAgIHRoaXMubmV4dF9pbiA9IGdldGFyZyhvcHRzLCAnbmV4dF9pbicsIDApO1xyXG4gICAgdGhpcy5hdmFpbF9pbiA9IGdldGFyZyhvcHRzLCAnYXZhaWxfaW4nLCBpbnB1dF9zdHJpbmcubGVuZ3RoIC0gdGhpcy5uZXh0X2luKTtcclxuXHJcbiAgICBmbHVzaCA9IGdldGFyZyhvcHRzLCAnZmx1c2gnLCBaTElCLlpfU1lOQ19GTFVTSCk7XHJcbiAgICBhdmFpbF9vdXQgPSBnZXRhcmcob3B0cywgJ2F2YWlsX291dCcsIC0xKTtcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICBkbyB7XHJcbiAgICAgICAgdGhpcy5hdmFpbF9vdXQgPSAoYXZhaWxfb3V0ID49IDAgPyBhdmFpbF9vdXQgOiBERUZBVUxUX0JVRkZFUl9TSVpFKTtcclxuICAgICAgICB0aGlzLm91dHB1dF9kYXRhID0gJyc7XHJcbiAgICAgICAgdGhpcy5uZXh0X291dCA9IDA7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IFpMSUIuaW5mbGF0ZSh0aGlzLCBmbHVzaCk7XHJcbiAgICAgICAgaWYodGhpcy5lcnJvciAhPSAwKSBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ6bGliIGVycm9yXCIsIHRoaXMuZXJyb3IpXHJcbiAgICAgICAgaWYoYXZhaWxfb3V0ID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0X2RhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdCArPSB0aGlzLm91dHB1dF9kYXRhO1xyXG5cdFx0aWYodGhpcy5hdmFpbF9vdXQgPiAwKSB7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG4gICAgfSB3aGlsZSh0aGlzLmVycm9yID09IFpMSUIuWl9PSyk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcblpMSUIuel9zdHJlYW0ucHJvdG90eXBlLmluZmxhdGVSZXNldCA9IGZ1bmN0aW9uKHdpbmRvd0JpdHMpXHJcbntcclxuICAgIHJldHVybiBaTElCLmluZmxhdGVSZXNldCh0aGlzLCB3aW5kb3dCaXRzKTtcclxufTtcclxuXHJcbn0oKSk7XHJcbi8qIHpsaWItYWRsZXIzMi5qcyAtLSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIGZvciB0aGUgemxpYiBhZGxlcjMyLlxyXG4gIFZlcnNpb246IDAuMi4wXHJcbiAgTGFzdE1vZGlmaWVkOiBBcHIgMTIgMjAxMlxyXG4gIENvcHlyaWdodCAoQykgMjAxMiBNYXNhbmFvIEl6dW1vIDxpekBvbmljb3MuY28uanA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIEFQSSBkb2N1bWVudGF0aW9uXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5Vc2FnZTogYWRsZXIgPSBaTElCLmFkbGVyMzIoYWRsZXIsIGJ1Ziwgb2Zmc2V0LCBsZW4pO1xyXG5cclxuICAgICBVcGRhdGUgYSBydW5uaW5nIEFkbGVyLTMyIGNoZWNrc3VtIHdpdGggdGhlIGJ5dGVzIGJ1ZltvZmZzZXQuLm9mZnNldCtsZW4tMV0gYW5kXHJcbiAgIHJldHVybiB0aGUgdXBkYXRlZCBjaGVja3N1bS4gIElmIGJ1ZiBpcyBudWxsLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlXHJcbiAgIHJlcXVpcmVkIGluaXRpYWwgdmFsdWUgZm9yIHRoZSBjaGVja3N1bS5cclxuXHJcbiAgICAgQW4gQWRsZXItMzIgY2hlY2tzdW0gaXMgYWxtb3N0IGFzIHJlbGlhYmxlIGFzIGEgQ1JDMzIgYnV0IGNhbiBiZSBjb21wdXRlZFxyXG4gICBtdWNoIGZhc3Rlci5cclxuXHJcbiAgIFVzYWdlIGV4YW1wbGU6XHJcblxyXG4gICAgIHZhciBhZGxlciA9IFpMSUIuYWRsZXIzMigwLCBudWxsLCAwLCAwKTtcclxuXHJcbiAgICAgd2hpbGUgKHJlYWRfYnVmZmVyKGJ1ZmZlciwgbGVuZ3RoKSAhPSBFT0YpIHtcclxuICAgICAgIGFkbGVyID0gWkxJQi5hZGxlcjMyKGFkbGVyLCBidWZmZXIsIDAsIGxlbmd0aCk7XHJcbiAgICAgfVxyXG4gICAgIGlmIChhZGxlciAhPSBvcmlnaW5hbF9hZGxlcikgZXJyb3IoKTtcclxuXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5Vc2FnZTogYWRsZXIgPSBaTElCLmFkbGVyMzJfY29tYmluZShhZGxlcjEsIGFkbGVyMiwgbGVuMik7XHJcblxyXG4gICAgIENvbWJpbmUgdHdvIEFkbGVyLTMyIGNoZWNrc3VtcyBpbnRvIG9uZS4gIEZvciB0d28gc2VxdWVuY2VzIG9mIGJ5dGVzLCBzZXExXHJcbiAgIGFuZCBzZXEyIHdpdGggbGVuZ3RocyBsZW4xIGFuZCBsZW4yLCBBZGxlci0zMiBjaGVja3N1bXMgd2VyZSBjYWxjdWxhdGVkIGZvclxyXG4gICBlYWNoLCBhZGxlcjEgYW5kIGFkbGVyMi4gIGFkbGVyMzJfY29tYmluZSgpIHJldHVybnMgdGhlIEFkbGVyLTMyIGNoZWNrc3VtIG9mXHJcbiAgIHNlcTEgYW5kIHNlcTIgY29uY2F0ZW5hdGVkLCByZXF1aXJpbmcgb25seSBhZGxlcjEsIGFkbGVyMiwgYW5kIGxlbjIuICBOb3RlXHJcbiAgIHRoYXQgdGhlIHpfb2ZmX3QgdHlwZSAobGlrZSBvZmZfdCkgaXMgYSBzaWduZWQgaW50ZWdlci4gIElmIGxlbjIgaXNcclxuICAgbmVnYXRpdmUsIHRoZSByZXN1bHQgaGFzIG5vIG1lYW5pbmcgb3IgdXRpbGl0eS5cclxuKi9cclxuXHJcbmlmKCB0eXBlb2YgWkxJQiA9PT0gJ3VuZGVmaW5lZCcgKSB7XHJcbiAgICBhbGVydCgnWkxJQiBpcyBub3QgZGVmaW5lZC4gIFNSQyB6bGliLmpzIGJlZm9yZSB6bGliLWFkbGVyMzIuanMnKVxyXG59XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG4vKiBhZGxlcjMyLmMgLS0gY29tcHV0ZSB0aGUgQWRsZXItMzIgY2hlY2tzdW0gb2YgYSBkYXRhIHN0cmVhbVxyXG4gKiBDb3B5cmlnaHQgKEMpIDE5OTUtMjAxMSBNYXJrIEFkbGVyXHJcbiAqIEZvciBjb25kaXRpb25zIG9mIGRpc3RyaWJ1dGlvbiBhbmQgdXNlLCBzZWUgY29weXJpZ2h0IG5vdGljZSBpbiB6bGliLmhcclxuICovXHJcblxyXG52YXIgQkFTRSA9IDY1NTIxOyAgICAgIC8qIGxhcmdlc3QgcHJpbWUgc21hbGxlciB0aGFuIDY1NTM2ICovXHJcbnZhciBOTUFYID0gIDU1NTI7XHJcbi8qIE5NQVggaXMgdGhlIGxhcmdlc3QgbiBzdWNoIHRoYXQgMjU1bihuKzEpLzIgKyAobisxKShCQVNFLTEpIDw9IDJeMzItMSAqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBhZGxlcjMyX3N0cmluZyhhZGxlciwgYnVmLCBvZmZzZXQsIGxlbilcclxue1xyXG4gICAgdmFyIHN1bTI7XHJcbiAgICB2YXIgbjtcclxuXHJcbiAgICAvKiBzcGxpdCBBZGxlci0zMiBpbnRvIGNvbXBvbmVudCBzdW1zICovXHJcbiAgICBzdW0yID0gKGFkbGVyID4+PiAxNikgJiAweGZmZmY7XHJcbiAgICBhZGxlciAmPSAweGZmZmY7XHJcblxyXG4gICAgLyogaW4gY2FzZSB1c2VyIGxpa2VzIGRvaW5nIGEgYnl0ZSBhdCBhIHRpbWUsIGtlZXAgaXQgZmFzdCAqL1xyXG4gICAgaWYgKGxlbiA9PSAxKSB7XHJcblx0XHRhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQpICYgMHhmZjtcclxuICAgICAgICBpZiAoYWRsZXIgPj0gQkFTRSlcclxuICAgICAgICAgICAgYWRsZXIgLT0gQkFTRTtcclxuICAgICAgICBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgIGlmIChzdW0yID49IEJBU0UpXHJcbiAgICAgICAgICAgIHN1bTIgLT0gQkFTRTtcclxuICAgICAgICByZXR1cm4gYWRsZXIgfCAoc3VtMiA8PCAxNik7XHJcbiAgICB9XHJcblxyXG4gICAgLyogaW5pdGlhbCBBZGxlci0zMiB2YWx1ZSAoZGVmZXJyZWQgY2hlY2sgZm9yIGxlbiA9PSAxIHNwZWVkKSAqL1xyXG4gICAgaWYgKGJ1ZiA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gMTtcclxuXHJcbiAgICAvKiBpbiBjYXNlIHNob3J0IGxlbmd0aHMgYXJlIHByb3ZpZGVkLCBrZWVwIGl0IHNvbWV3aGF0IGZhc3QgKi9cclxuICAgIGlmIChsZW4gPCAxNikge1xyXG4gICAgICAgIHdoaWxlIChsZW4tLSkge1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmO1xyXG4gICAgICAgICAgICBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWRsZXIgPj0gQkFTRSlcclxuICAgICAgICAgICAgYWRsZXIgLT0gQkFTRTtcclxuXHRcdHN1bTIgJT0gQkFTRTsgICAgICAgICAgIC8qIG9ubHkgYWRkZWQgc28gbWFueSBCQVNFJ3MgKi9cclxuICAgICAgICByZXR1cm4gYWRsZXIgfCAoc3VtMiA8PCAxNik7XHJcbiAgICB9XHJcblxyXG4gICAgLyogZG8gbGVuZ3RoIE5NQVggYmxvY2tzIC0tIHJlcXVpcmVzIGp1c3Qgb25lIG1vZHVsbyBvcGVyYXRpb24gKi9cclxuICAgIHdoaWxlIChsZW4gPj0gTk1BWCkge1xyXG4gICAgICAgIGxlbiAtPSBOTUFYO1xyXG4gICAgICAgIG4gPSBOTUFYID4+IDQ7ICAgICAgICAgIC8qIE5NQVggaXMgZGl2aXNpYmxlIGJ5IDE2ICovXHJcbiAgICAgICAgZG8ge1xyXG5cdFx0XHQvKiAxNiBzdW1zIHVucm9sbGVkICovXHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSAmIDB4ZmY7IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgfSB3aGlsZSAoLS1uKTtcclxuICAgICAgICBhZGxlciAlPSBCQVNFO1xyXG4gICAgICAgIHN1bTIgJT0gQkFTRTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBkbyByZW1haW5pbmcgYnl0ZXMgKGxlc3MgdGhhbiBOTUFYLCBzdGlsbCBqdXN0IG9uZSBtb2R1bG8pICovXHJcbiAgICBpZiAobGVuKSB7ICAgICAgICAgICAgICAgICAgLyogYXZvaWQgbW9kdWxvcyBpZiBub25lIHJlbWFpbmluZyAqL1xyXG4gICAgICAgIHdoaWxlIChsZW4gPj0gMTYpIHtcclxuICAgICAgICAgICAgbGVuIC09IDE2O1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWYuY2hhckNvZGVBdChvZmZzZXQrKykgJiAweGZmOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAobGVuLS0pIHtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmLmNoYXJDb2RlQXQob2Zmc2V0KyspICYgMHhmZjsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRsZXIgJT0gQkFTRTtcclxuICAgICAgICBzdW0yICU9IEJBU0U7XHJcbiAgICB9XHJcblxyXG4gICAgLyogcmV0dXJuIHJlY29tYmluZWQgc3VtcyAqL1xyXG4gICAgcmV0dXJuIGFkbGVyIHwgKHN1bTIgPDwgMTYpO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIGFkbGVyMzJfYXJyYXkoYWRsZXIsIGJ1Ziwgb2Zmc2V0LCBsZW4pXHJcbntcclxuICAgIHZhciBzdW0yO1xyXG4gICAgdmFyIG47XHJcblxyXG4gICAgLyogc3BsaXQgQWRsZXItMzIgaW50byBjb21wb25lbnQgc3VtcyAqL1xyXG4gICAgc3VtMiA9IChhZGxlciA+Pj4gMTYpICYgMHhmZmZmO1xyXG4gICAgYWRsZXIgJj0gMHhmZmZmO1xyXG5cclxuICAgIC8qIGluIGNhc2UgdXNlciBsaWtlcyBkb2luZyBhIGJ5dGUgYXQgYSB0aW1lLCBrZWVwIGl0IGZhc3QgKi9cclxuICAgIGlmIChsZW4gPT0gMSkge1xyXG5cdFx0YWRsZXIgKz0gYnVmW29mZnNldF07XHJcbiAgICAgICAgaWYgKGFkbGVyID49IEJBU0UpXHJcbiAgICAgICAgICAgIGFkbGVyIC09IEJBU0U7XHJcbiAgICAgICAgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICBpZiAoc3VtMiA+PSBCQVNFKVxyXG4gICAgICAgICAgICBzdW0yIC09IEJBU0U7XHJcbiAgICAgICAgcmV0dXJuIGFkbGVyIHwgKHN1bTIgPDwgMTYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGluaXRpYWwgQWRsZXItMzIgdmFsdWUgKGRlZmVycmVkIGNoZWNrIGZvciBsZW4gPT0gMSBzcGVlZCkgKi9cclxuICAgIGlmIChidWYgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIDE7XHJcblxyXG4gICAgLyogaW4gY2FzZSBzaG9ydCBsZW5ndGhzIGFyZSBwcm92aWRlZCwga2VlcCBpdCBzb21ld2hhdCBmYXN0ICovXHJcbiAgICBpZiAobGVuIDwgMTYpIHtcclxuICAgICAgICB3aGlsZSAobGVuLS0pIHtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTtcclxuICAgICAgICAgICAgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFkbGVyID49IEJBU0UpXHJcbiAgICAgICAgICAgIGFkbGVyIC09IEJBU0U7XHJcblx0XHRzdW0yICU9IEJBU0U7ICAgICAgICAgICAvKiBvbmx5IGFkZGVkIHNvIG1hbnkgQkFTRSdzICovXHJcbiAgICAgICAgcmV0dXJuIGFkbGVyIHwgKHN1bTIgPDwgMTYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGRvIGxlbmd0aCBOTUFYIGJsb2NrcyAtLSByZXF1aXJlcyBqdXN0IG9uZSBtb2R1bG8gb3BlcmF0aW9uICovXHJcbiAgICB3aGlsZSAobGVuID49IE5NQVgpIHtcclxuICAgICAgICBsZW4gLT0gTk1BWDtcclxuICAgICAgICBuID0gTk1BWCA+PiA0OyAgICAgICAgICAvKiBOTUFYIGlzIGRpdmlzaWJsZSBieSAxNiAqL1xyXG4gICAgICAgIGRvIHtcclxuXHRcdFx0LyogMTYgc3VtcyB1bnJvbGxlZCAqL1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgICAgICBhZGxlciArPSBidWZbb2Zmc2V0KytdOyBzdW0yICs9IGFkbGVyO1xyXG4gICAgICAgIH0gd2hpbGUgKC0tbik7XHJcbiAgICAgICAgYWRsZXIgJT0gQkFTRTtcclxuICAgICAgICBzdW0yICU9IEJBU0U7XHJcbiAgICB9XHJcblxyXG4gICAgLyogZG8gcmVtYWluaW5nIGJ5dGVzIChsZXNzIHRoYW4gTk1BWCwgc3RpbGwganVzdCBvbmUgbW9kdWxvKSAqL1xyXG4gICAgaWYgKGxlbikgeyAgICAgICAgICAgICAgICAgIC8qIGF2b2lkIG1vZHVsb3MgaWYgbm9uZSByZW1haW5pbmcgKi9cclxuICAgICAgICB3aGlsZSAobGVuID49IDE2KSB7XHJcbiAgICAgICAgICAgIGxlbiAtPSAxNjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICAgICAgYWRsZXIgKz0gYnVmW29mZnNldCsrXTsgc3VtMiArPSBhZGxlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGxlbi0tKSB7XHJcbiAgICAgICAgICAgIGFkbGVyICs9IGJ1ZltvZmZzZXQrK107IHN1bTIgKz0gYWRsZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkbGVyICU9IEJBU0U7XHJcbiAgICAgICAgc3VtMiAlPSBCQVNFO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIHJldHVybiByZWNvbWJpbmVkIHN1bXMgKi9cclxuICAgIHJldHVybiBhZGxlciB8IChzdW0yIDw8IDE2KTtcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5aTElCLmFkbGVyMzIgPSBmdW5jdGlvbihhZGxlciwgYnVmLCBvZmZzZXQsIGxlbilcclxue1xyXG5cdGlmKHR5cGVvZiBidWYgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRyZXR1cm4gYWRsZXIzMl9zdHJpbmcoYWRsZXIsIGJ1Ziwgb2Zmc2V0LCBsZW4pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm4gYWRsZXIzMl9hcnJheShhZGxlciwgYnVmLCBvZmZzZXQsIGxlbik7XHJcblx0fVxyXG59O1xyXG5cclxuWkxJQi5hZGxlcjMyX2NvbWJpbmUgPSBmdW5jdGlvbihhZGxlcjEsIGFkbGVyMiwgbGVuMilcclxue1xyXG4gICAgdmFyIHN1bTE7XHJcbiAgICB2YXIgc3VtMjtcclxuICAgIHZhciByZW07XHJcblxyXG4gICAgLyogZm9yIG5lZ2F0aXZlIGxlbiwgcmV0dXJuIGludmFsaWQgYWRsZXIzMiBhcyBhIGNsdWUgZm9yIGRlYnVnZ2luZyAqL1xyXG4gICAgaWYgKGxlbjIgPCAwKVxyXG4gICAgICAgIHJldHVybiAweGZmZmZmZmZmO1xyXG5cclxuICAgIC8qIHRoZSBkZXJpdmF0aW9uIG9mIHRoaXMgZm9ybXVsYSBpcyBsZWZ0IGFzIGFuIGV4ZXJjaXNlIGZvciB0aGUgcmVhZGVyICovXHJcbiAgICBsZW4yICU9IEJBU0U7ICAgICAgICAgICAgICAgIC8qIGFzc3VtZXMgbGVuMiA+PSAwICovXHJcbiAgICByZW0gPSBsZW4yO1xyXG4gICAgc3VtMSA9IGFkbGVyMSAmIDB4ZmZmZjtcclxuICAgIHN1bTIgPSByZW0gKiBzdW0xO1xyXG4gICAgc3VtMiAlPSBCQVNFO1xyXG4gICAgc3VtMSArPSAoYWRsZXIyICYgMHhmZmZmKSArIEJBU0UgLSAxO1xyXG4gICAgc3VtMiArPSAoKGFkbGVyMSA+PiAxNikgJiAweGZmZmYpICsgKChhZGxlcjIgPj4gMTYpICYgMHhmZmZmKSArIEJBU0UgLSByZW07XHJcbiAgICBpZiAoc3VtMSA+PSBCQVNFKSBzdW0xIC09IEJBU0U7XHJcbiAgICBpZiAoc3VtMSA+PSBCQVNFKSBzdW0xIC09IEJBU0U7XHJcbiAgICBpZiAoc3VtMiA+PSAoQkFTRSA8PCAxKSkgc3VtMiAtPSAoQkFTRSA8PCAxKTtcclxuICAgIGlmIChzdW0yID49IEJBU0UpIHN1bTIgLT0gQkFTRTtcclxuICAgIHJldHVybiBzdW0xIHwgKHN1bTIgPDwgMTYpO1xyXG59XHJcblxyXG59KCkpO1xyXG4vKiB6bGliLWFkbGVyMzIuanMgLS0gSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHpsaWIgY3JjMzIuXHJcbiAgVmVyc2lvbjogMC4yLjBcclxuICBMYXN0TW9kaWZpZWQ6IEFwciAxMiAyMDEyXHJcbiAgQ29weXJpZ2h0IChDKSAyMDEyIE1hc2FuYW8gSXp1bW8gPGl6QG9uaWNvcy5jby5qcD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgQVBJIGRvY3VtZW50YXRpb25cclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblVzYWdlOiBjcmMgPSBaTElCLmNyYzMyKGNyYywgYnVmLCBvZmZzZXQsIGxlbik7XHJcblxyXG4gICAgIFVwZGF0ZSBhIHJ1bm5pbmcgQ1JDLTMyIHdpdGggdGhlIGJ5dGVzIGJ1ZltvZmZzZXQuLm9mZnNldCtsZW4tMV0gYW5kIHJldHVybiB0aGVcclxuICAgdXBkYXRlZCBDUkMtMzIuICBJZiBidWYgaXMgbnVsbCwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1aXJlZFxyXG4gICBpbml0aWFsIHZhbHVlIGZvciB0aGUgZm9yIHRoZSBjcmMuICBQcmUtIGFuZCBwb3N0LWNvbmRpdGlvbmluZyAob25lJ3NcclxuICAgY29tcGxlbWVudCkgaXMgcGVyZm9ybWVkIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHNvIGl0IHNob3VsZG4ndCBiZSBkb25lIGJ5IHRoZVxyXG4gICBhcHBsaWNhdGlvbi5cclxuXHJcbiAgIFVzYWdlIGV4YW1wbGU6XHJcblxyXG4gICAgIHZhciBjcmMgPSBaTElCLmNyYzMyKDAsIG51bGwsIDAsIDApO1xyXG5cclxuICAgICB3aGlsZSAocmVhZF9idWZmZXIoYnVmZmVyLCBsZW5ndGgpICE9IEVPRikge1xyXG4gICAgICAgY3JjID0gWkxJQi5jcmMzMihjcmMsIGJ1ZmZlciwgMCwgbGVuZ3RoKTtcclxuICAgICB9XHJcbiAgICAgaWYgKGNyYyAhPSBvcmlnaW5hbF9jcmMpIGVycm9yKCk7XHJcblxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuVXNhZ2U6IGNyYyA9IGNyYzMyX2NvbWJpbmUoY3JjMSwgY3JjMiwgbGVuMik7XHJcblxyXG4gICAgIENvbWJpbmUgdHdvIENSQy0zMiBjaGVjayB2YWx1ZXMgaW50byBvbmUuICBGb3IgdHdvIHNlcXVlbmNlcyBvZiBieXRlcyxcclxuICAgc2VxMSBhbmQgc2VxMiB3aXRoIGxlbmd0aHMgbGVuMSBhbmQgbGVuMiwgQ1JDLTMyIGNoZWNrIHZhbHVlcyB3ZXJlXHJcbiAgIGNhbGN1bGF0ZWQgZm9yIGVhY2gsIGNyYzEgYW5kIGNyYzIuICBjcmMzMl9jb21iaW5lKCkgcmV0dXJucyB0aGUgQ1JDLTMyXHJcbiAgIGNoZWNrIHZhbHVlIG9mIHNlcTEgYW5kIHNlcTIgY29uY2F0ZW5hdGVkLCByZXF1aXJpbmcgb25seSBjcmMxLCBjcmMyLCBhbmRcclxuICAgbGVuMi5cclxuKi9cclxuXHJcbmlmKCB0eXBlb2YgWkxJQiA9PT0gJ3VuZGVmaW5lZCcgKSB7XHJcbiAgICBhbGVydCgnWkxJQiBpcyBub3QgZGVmaW5lZC4gIFNSQyB6bGliLmpzIGJlZm9yZSB6bGliLWNyYzMyLmpzJylcclxufVxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuLyogY3JjMzIuYyAtLSBjb21wdXRlIHRoZSBDUkMtMzIgb2YgYSBkYXRhIHN0cmVhbVxyXG4gKiBDb3B5cmlnaHQgKEMpIDE5OTUtMjAwNiwgMjAxMCwgMjAxMSBNYXJrIEFkbGVyXHJcbiAqIEZvciBjb25kaXRpb25zIG9mIGRpc3RyaWJ1dGlvbiBhbmQgdXNlLCBzZWUgY29weXJpZ2h0IG5vdGljZSBpbiB6bGliLmhcclxuICpcclxuICogVGhhbmtzIHRvIFJvZG5leSBCcm93biA8cmJyb3duNjRAY3NjLmNvbS5hdT4gZm9yIGhpcyBjb250cmlidXRpb24gb2YgZmFzdGVyXHJcbiAqIENSQyBtZXRob2RzOiBleGNsdXNpdmUtb3JpbmcgMzIgYml0cyBvZiBkYXRhIGF0IGEgdGltZSwgYW5kIHByZS1jb21wdXRpbmdcclxuICogdGFibGVzIGZvciB1cGRhdGluZyB0aGUgc2hpZnQgcmVnaXN0ZXIgaW4gb25lIHN0ZXAgd2l0aCB0aHJlZSBleGNsdXNpdmUtb3JzXHJcbiAqIGluc3RlYWQgb2YgZm91ciBzdGVwcyB3aXRoIGZvdXIgZXhjbHVzaXZlLW9ycy4gIFRoaXMgcmVzdWx0cyBpbiBhYm91dCBhXHJcbiAqIGZhY3RvciBvZiB0d28gaW5jcmVhc2UgaW4gc3BlZWQgb24gYSBQb3dlciBQQyBHNCAoUFBDNzQ1NSkgdXNpbmcgZ2NjIC1PMy5cclxuICovXHJcblxyXG52YXIgY3JjX3RhYmxlID0gW1xyXG4gICAgMHgwMDAwMDAwMCwgMHg3NzA3MzA5NiwgMHhlZTBlNjEyYywgMHg5OTA5NTFiYSwgMHgwNzZkYzQxOSxcclxuICAgIDB4NzA2YWY0OGYsIDB4ZTk2M2E1MzUsIDB4OWU2NDk1YTMsIDB4MGVkYjg4MzIsIDB4NzlkY2I4YTQsXHJcbiAgICAweGUwZDVlOTFlLCAweDk3ZDJkOTg4LCAweDA5YjY0YzJiLCAweDdlYjE3Y2JkLCAweGU3YjgyZDA3LFxyXG4gICAgMHg5MGJmMWQ5MSwgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSxcclxuICAgIDB4MWFkYWQ0N2QsIDB4NmRkZGU0ZWIsIDB4ZjRkNGI1NTEsIDB4ODNkMzg1YzcsIDB4MTM2Yzk4NTYsXHJcbiAgICAweDY0NmJhOGMwLCAweGZkNjJmOTdhLCAweDhhNjVjOWVjLCAweDE0MDE1YzRmLCAweDYzMDY2Y2Q5LFxyXG4gICAgMHhmYTBmM2Q2MywgMHg4ZDA4MGRmNSwgMHgzYjZlMjBjOCwgMHg0YzY5MTA1ZSwgMHhkNTYwNDFlNCxcclxuICAgIDB4YTI2NzcxNzIsIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsXHJcbiAgICAweDM1YjVhOGZhLCAweDQyYjI5ODZjLCAweGRiYmJjOWQ2LCAweGFjYmNmOTQwLCAweDMyZDg2Y2UzLFxyXG4gICAgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSwgMHgyNmQ5MzBhYywgMHg1MWRlMDAzYSxcclxuICAgIDB4YzhkNzUxODAsIDB4YmZkMDYxMTYsIDB4MjFiNGY0YjUsIDB4NTZiM2M0MjMsIDB4Y2ZiYTk1OTksXHJcbiAgICAweGI4YmRhNTBmLCAweDI4MDJiODllLCAweDVmMDU4ODA4LCAweGM2MGNkOWIyLCAweGIxMGJlOTI0LFxyXG4gICAgMHgyZjZmN2M4NywgMHg1ODY4NGMxMSwgMHhjMTYxMWRhYiwgMHhiNjY2MmQzZCwgMHg3NmRjNDE5MCxcclxuICAgIDB4MDFkYjcxMDYsIDB4OThkMjIwYmMsIDB4ZWZkNTEwMmEsIDB4NzFiMTg1ODksIDB4MDZiNmI1MWYsXHJcbiAgICAweDlmYmZlNGE1LCAweGU4YjhkNDMzLCAweDc4MDdjOWEyLCAweDBmMDBmOTM0LCAweDk2MDlhODhlLFxyXG4gICAgMHhlMTBlOTgxOCwgMHg3ZjZhMGRiYiwgMHgwODZkM2QyZCwgMHg5MTY0NmM5NywgMHhlNjYzNWMwMSxcclxuICAgIDB4NmI2YjUxZjQsIDB4MWM2YzYxNjIsIDB4ODU2NTMwZDgsIDB4ZjI2MjAwNGUsIDB4NmMwNjk1ZWQsXHJcbiAgICAweDFiMDFhNTdiLCAweDgyMDhmNGMxLCAweGY1MGZjNDU3LCAweDY1YjBkOWM2LCAweDEyYjdlOTUwLFxyXG4gICAgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMyxcclxuICAgIDB4ZmJkNDRjNjUsIDB4NGRiMjYxNTgsIDB4M2FiNTUxY2UsIDB4YTNiYzAwNzQsIDB4ZDRiYjMwZTIsXHJcbiAgICAweDRhZGZhNTQxLCAweDNkZDg5NWQ3LCAweGE0ZDFjNDZkLCAweGQzZDZmNGZiLCAweDQzNjllOTZhLFxyXG4gICAgMHgzNDZlZDlmYywgMHhhZDY3ODg0NiwgMHhkYTYwYjhkMCwgMHg0NDA0MmQ3MywgMHgzMzAzMWRlNSxcclxuICAgIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksIDB4NTAwNTcxM2MsIDB4MjcwMjQxYWEsIDB4YmUwYjEwMTAsXHJcbiAgICAweGM5MGMyMDg2LCAweDU3NjhiNTI1LCAweDIwNmY4NWIzLCAweGI5NjZkNDA5LCAweGNlNjFlNDlmLFxyXG4gICAgMHg1ZWRlZjkwZSwgMHgyOWQ5Yzk5OCwgMHhiMGQwOTgyMiwgMHhjN2Q3YThiNCwgMHg1OWIzM2QxNyxcclxuICAgIDB4MmViNDBkODEsIDB4YjdiZDVjM2IsIDB4YzBiYTZjYWQsIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsXHJcbiAgICAweDAzYjZlMjBjLCAweDc0YjFkMjlhLCAweGVhZDU0NzM5LCAweDlkZDI3N2FmLCAweDA0ZGIyNjE1LFxyXG4gICAgMHg3M2RjMTY4MywgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCxcclxuICAgIDB4ZTQwZWNmMGIsIDB4OTMwOWZmOWQsIDB4MGEwMGFlMjcsIDB4N2QwNzllYjEsIDB4ZjAwZjkzNDQsXHJcbiAgICAweDg3MDhhM2QyLCAweDFlMDFmMjY4LCAweDY5MDZjMmZlLCAweGY3NjI1NzVkLCAweDgwNjU2N2NiLFxyXG4gICAgMHgxOTZjMzY3MSwgMHg2ZTZiMDZlNywgMHhmZWQ0MWI3NiwgMHg4OWQzMmJlMCwgMHgxMGRhN2E1YSxcclxuICAgIDB4NjdkZDRhY2MsIDB4ZjliOWRmNmYsIDB4OGViZWVmZjksIDB4MTdiN2JlNDMsIDB4NjBiMDhlZDUsXHJcbiAgICAweGQ2ZDZhM2U4LCAweGExZDE5MzdlLCAweDM4ZDhjMmM0LCAweDRmZGZmMjUyLCAweGQxYmI2N2YxLFxyXG4gICAgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YiwgMHhkODBkMmJkYSwgMHhhZjBhMWI0YyxcclxuICAgIDB4MzYwMzRhZjYsIDB4NDEwNDdhNjAsIDB4ZGY2MGVmYzMsIDB4YTg2N2RmNTUsIDB4MzE2ZThlZWYsXHJcbiAgICAweDQ2NjliZTc5LCAweGNiNjFiMzhjLCAweGJjNjY4MzFhLCAweDI1NmZkMmEwLCAweDUyNjhlMjM2LFxyXG4gICAgMHhjYzBjNzc5NSwgMHhiYjBiNDcwMywgMHgyMjAyMTZiOSwgMHg1NTA1MjYyZiwgMHhjNWJhM2JiZSxcclxuICAgIDB4YjJiZDBiMjgsIDB4MmJiNDVhOTIsIDB4NWNiMzZhMDQsIDB4YzJkN2ZmYTcsIDB4YjVkMGNmMzEsXHJcbiAgICAweDJjZDk5ZThiLCAweDViZGVhZTFkLCAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLFxyXG4gICAgMHgwMjZkOTMwYSwgMHg5YzA5MDZhOSwgMHhlYjBlMzYzZiwgMHg3MjA3Njc4NSwgMHgwNTAwNTcxMyxcclxuICAgIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsXHJcbiAgICAweGU1ZDViZTBkLCAweDdjZGNlZmI3LCAweDBiZGJkZjIxLCAweDg2ZDNkMmQ0LCAweGYxZDRlMjQyLFxyXG4gICAgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSxcclxuICAgIDB4MThiNzQ3NzcsIDB4ODgwODVhZTYsIDB4ZmYwZjZhNzAsIDB4NjYwNjNiY2EsIDB4MTEwMTBiNWMsXHJcbiAgICAweDhmNjU5ZWZmLCAweGY4NjJhZTY5LCAweDYxNmJmZmQzLCAweDE2NmNjZjQ1LCAweGEwMGFlMjc4LFxyXG4gICAgMHhkNzBkZDJlZSwgMHg0ZTA0ODM1NCwgMHgzOTAzYjNjMiwgMHhhNzY3MjY2MSwgMHhkMDYwMTZmNyxcclxuICAgIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsIDB4YWVkMTZhNGEsIDB4ZDlkNjVhZGMsIDB4NDBkZjBiNjYsXHJcbiAgICAweDM3ZDgzYmYwLCAweGE5YmNhZTUzLCAweGRlYmI5ZWM1LCAweDQ3YjJjZjdmLCAweDMwYjVmZmU5LFxyXG4gICAgMHhiZGJkZjIxYywgMHhjYWJhYzI4YSwgMHg1M2IzOTMzMCwgMHgyNGI0YTNhNiwgMHhiYWQwMzYwNSxcclxuICAgIDB4Y2RkNzA2OTMsIDB4NTRkZTU3MjksIDB4MjNkOTY3YmYsIDB4YjM2NjdhMmUsIDB4YzQ2MTRhYjgsXHJcbiAgICAweDVkNjgxYjAyLCAweDJhNmYyYjk0LCAweGI0MGJiZTM3LCAweGMzMGM4ZWExLCAweDVhMDVkZjFiLFxyXG4gICAgMHgyZDAyZWY4ZCBdO1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBjcmMzMl9zdHJpbmcoY3JjLCBidWYsIG9mZnNldCwgbGVuKVxyXG57XHJcblx0aWYgKGJ1ZiA9PSBudWxsKSByZXR1cm4gMDtcclxuXHJcbiAgICBjcmMgPSBjcmMgXiAweGZmZmZmZmZmO1xyXG4gICAgd2hpbGUgKGxlbiA+PSA4KSB7XHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcbiAgICAgICAgbGVuIC09IDg7XHJcbiAgICB9XHJcbiAgICBpZiAobGVuKSBkbyB7XHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCsrKSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcbiAgICB9IHdoaWxlICgtLWxlbik7XHJcbiAgICByZXR1cm4gY3JjIF4gMHhmZmZmZmZmZjtcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBjcmMzMl9hcnJheShjcmMsIGJ1Ziwgb2Zmc2V0LCBsZW4pXHJcbntcclxuXHRpZiAoYnVmID09IG51bGwpIHJldHVybiAwO1xyXG5cclxuICAgIGNyYyA9IGNyYyBeIDB4ZmZmZmZmZmY7XHJcbiAgICB3aGlsZSAobGVuID49IDgpIHtcclxuXHRcdGNyYyA9IGNyY190YWJsZVsoY3JjIF4gYnVmW29mZnNldCsrXSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1ZltvZmZzZXQrK10pICYgMHhmZl0gXiAoY3JjID4+PiA4KVxyXG5cdFx0Y3JjID0gY3JjX3RhYmxlWyhjcmMgXiBidWZbb2Zmc2V0KytdKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOClcclxuXHRcdGNyYyA9IGNyY190YWJsZVsoY3JjIF4gYnVmW29mZnNldCsrXSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1ZltvZmZzZXQrK10pICYgMHhmZl0gXiAoY3JjID4+PiA4KVxyXG5cdFx0Y3JjID0gY3JjX3RhYmxlWyhjcmMgXiBidWZbb2Zmc2V0KytdKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOClcclxuXHRcdGNyYyA9IGNyY190YWJsZVsoY3JjIF4gYnVmW29mZnNldCsrXSkgJiAweGZmXSBeIChjcmMgPj4+IDgpXHJcblx0XHRjcmMgPSBjcmNfdGFibGVbKGNyYyBeIGJ1ZltvZmZzZXQrK10pICYgMHhmZl0gXiAoY3JjID4+PiA4KVxyXG4gICAgICAgIGxlbiAtPSA4O1xyXG4gICAgfVxyXG4gICAgaWYgKGxlbikgZG8ge1xyXG5cdFx0Y3JjID0gY3JjX3RhYmxlWyhjcmMgXiBidWZbb2Zmc2V0KytdKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOClcclxuICAgIH0gd2hpbGUgKC0tbGVuKTtcclxuICAgIHJldHVybiBjcmMgXiAweGZmZmZmZmZmO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblpMSUIuY3JjMzIgPSBmdW5jdGlvbihjcmMsIGJ1Ziwgb2Zmc2V0LCBsZW4pXHJcbntcclxuXHRpZih0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xyXG5cdFx0cmV0dXJuIGNyYzMyX3N0cmluZyhjcmMsIGJ1Ziwgb2Zmc2V0LCBsZW4pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm4gY3JjMzJfYXJyYXkoY3JjLCBidWYsIG9mZnNldCwgbGVuKTtcclxuXHR9XHJcbn07XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbnZhciBHRjJfRElNID0gMzI7IC8qIGRpbWVuc2lvbiBvZiBHRigyKSB2ZWN0b3JzIChsZW5ndGggb2YgQ1JDKSAqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBnZjJfbWF0cml4X3RpbWVzKG1hdCwgdmVjKVxyXG57XHJcbiAgICB2YXIgc3VtO1xyXG5cdHZhciBtYXRfaSA9IDA7XHJcblxyXG4gICAgc3VtID0gMDtcclxuICAgIHdoaWxlICh2ZWMpIHtcclxuICAgICAgICBpZiAodmVjICYgMSlcclxuICAgICAgICAgICAgc3VtIF49IG1hdFttYXRfaV07XHJcbiAgICAgICAgdmVjID4+PSAxO1xyXG4gICAgICAgIG1hdF9pKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3VtO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIGdmMl9tYXRyaXhfc3F1YXJlKHNxdWFyZSwgbWF0KVxyXG57XHJcbiAgICB2YXIgbjtcclxuXHJcbiAgICBmb3IgKG4gPSAwOyBuIDwgR0YyX0RJTTsgbisrKVxyXG4gICAgICAgIHNxdWFyZVtuXSA9IGdmMl9tYXRyaXhfdGltZXMobWF0LCBtYXRbbl0pO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblpMSUIuY3JjMzJfY29tYmluZSA9IGZ1bmN0aW9uKGNyYzEsIGNyYzIsIGxlbjIpXHJcbntcclxuICAgIHZhciBuO1xyXG4gICAgdmFyIHJvdztcclxuICAgIHZhciBldmVuOyAgICAvKiBldmVuLXBvd2VyLW9mLXR3byB6ZXJvcyBvcGVyYXRvciAqL1xyXG4gICAgdmFyIG9kZDsgICAgIC8qIG9kZC1wb3dlci1vZi10d28gemVyb3Mgb3BlcmF0b3IgKi9cclxuXHJcbiAgICAvKiBkZWdlbmVyYXRlIGNhc2UgKGFsc28gZGlzYWxsb3cgbmVnYXRpdmUgbGVuZ3RocykgKi9cclxuICAgIGlmIChsZW4yIDw9IDApXHJcbiAgICAgICAgcmV0dXJuIGNyYzE7XHJcblxyXG4gICAgZXZlbiA9IG5ldyBBcnJheShHRjJfRElNKTtcclxuICAgIG9kZCA9IG5ldyBBcnJheShHRjJfRElNKTtcclxuXHJcbiAgICAvKiBwdXQgb3BlcmF0b3IgZm9yIG9uZSB6ZXJvIGJpdCBpbiBvZGQgKi9cclxuICAgIG9kZFswXSA9IDB4ZWRiODgzMjA7ICAgICAgICAgIC8qIENSQy0zMiBwb2x5bm9taWFsICovXHJcbiAgICByb3cgPSAxO1xyXG4gICAgZm9yIChuID0gMTsgbiA8IEdGMl9ESU07IG4rKykge1xyXG4gICAgICAgIG9kZFtuXSA9IHJvdztcclxuICAgICAgICByb3cgPDw9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyogcHV0IG9wZXJhdG9yIGZvciB0d28gemVybyBiaXRzIGluIGV2ZW4gKi9cclxuICAgIGdmMl9tYXRyaXhfc3F1YXJlKGV2ZW4sIG9kZCk7XHJcblxyXG4gICAgLyogcHV0IG9wZXJhdG9yIGZvciBmb3VyIHplcm8gYml0cyBpbiBvZGQgKi9cclxuICAgIGdmMl9tYXRyaXhfc3F1YXJlKG9kZCwgZXZlbik7XHJcblxyXG4gICAgLyogYXBwbHkgbGVuMiB6ZXJvcyB0byBjcmMxIChmaXJzdCBzcXVhcmUgd2lsbCBwdXQgdGhlIG9wZXJhdG9yIGZvciBvbmVcclxuICAgICAgIHplcm8gYnl0ZSwgZWlnaHQgemVybyBiaXRzLCBpbiBldmVuKSAqL1xyXG4gICAgZG8ge1xyXG4gICAgICAgIC8qIGFwcGx5IHplcm9zIG9wZXJhdG9yIGZvciB0aGlzIGJpdCBvZiBsZW4yICovXHJcbiAgICAgICAgZ2YyX21hdHJpeF9zcXVhcmUoZXZlbiwgb2RkKTtcclxuICAgICAgICBpZiAobGVuMiAmIDEpXHJcbiAgICAgICAgICAgIGNyYzEgPSBnZjJfbWF0cml4X3RpbWVzKGV2ZW4sIGNyYzEpO1xyXG4gICAgICAgIGxlbjIgPj49IDE7XHJcblxyXG4gICAgICAgIC8qIGlmIG5vIG1vcmUgYml0cyBzZXQsIHRoZW4gZG9uZSAqL1xyXG4gICAgICAgIGlmIChsZW4yID09IDApXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAvKiBhbm90aGVyIGl0ZXJhdGlvbiBvZiB0aGUgbG9vcCB3aXRoIG9kZCBhbmQgZXZlbiBzd2FwcGVkICovXHJcbiAgICAgICAgZ2YyX21hdHJpeF9zcXVhcmUob2RkLCBldmVuKTtcclxuICAgICAgICBpZiAobGVuMiAmIDEpXHJcbiAgICAgICAgICAgIGNyYzEgPSBnZjJfbWF0cml4X3RpbWVzKG9kZCwgY3JjMSk7XHJcbiAgICAgICAgbGVuMiA+Pj0gMTtcclxuXHJcbiAgICAgICAgLyogaWYgbm8gbW9yZSBiaXRzIHNldCwgdGhlbiBkb25lICovXHJcbiAgICB9IHdoaWxlIChsZW4yICE9IDApO1xyXG5cclxuICAgIC8qIHJldHVybiBjb21iaW5lZCBjcmMgKi9cclxuICAgIGNyYzEgXj0gY3JjMjtcclxuICAgIHJldHVybiBjcmMxO1xyXG59O1xyXG5cclxufSgpKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gWkxJQiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRvdC1vYmplY3RcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2FtZWxjYXNlXCIpOyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmJ1dHRvbnttYXJnaW4tcmlnaHQ6M3B4O3BhZGRpbmc6MnB4O21pbi13aWR0aDo5MHB4fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvS1ZNL0Nvbm5lY3RidXR0b24uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFLQSxRQUNJLGdCQUFBLENBQ0EsV0FBQSxDQUNBLGNBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcclxcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxcclxcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXFxyXFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxyXFxuXFxyXFxuLmJ1dHRvbntcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcHg7XFxyXFxuICAgIHBhZGRpbmc6IDJweDtcXHJcXG4gICAgbWluLXdpZHRoOiA5MHB4XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5lbmNvZGluZ3ttYXJnaW4tbGVmdDoxMHB4fS5lbmNvZGluZyBsYWJlbHtwYWRkaW5nOjJweDtmb250LXNpemU6MTVweH0uZW5jb2Rpbmcgc2VsZWN0e3BhZGRpbmc6MnB4IDB9LnJlbGRpc2FibGVke29wYWNpdHk6LjV9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vRW5jb2RpbmdvcHRpb25zLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBS0EsVUFDSSxnQkFBQSxDQUVGLGdCQUNFLFdBQUEsQ0FDQSxjQUFBLENBRUYsaUJBQ0UsYUFBQSxDQUdGLGFBQ0UsVUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxyXFxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XFxyXFxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcXHJcXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXHJcXG4gXFxyXFxuLmVuY29kaW5nIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxuICB9XFxyXFxuICAuZW5jb2RpbmcgbGFiZWwgeyAgICAgIFxcclxcbiAgICBwYWRkaW5nOiAycHg7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXHJcXG4gIH1cXHJcXG4gIC5lbmNvZGluZyBzZWxlY3Qge1xcclxcbiAgICBwYWRkaW5nOiAycHggMDtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgLnJlbGRpc2FibGVke1xcclxcbiAgICBvcGFjaXR5OiAwLjU7XFxyXFxuICB9XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlcntiYWNrZ3JvdW5kLWNvbG9yOiNhOWE5YTk7cGFkZGluZzo1cHg7Zm9udC1zaXplOjEzcHh9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vSGVhZGVyLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBS0EsUUFDRSx3QkFBQSxDQUNBLFdBQUEsQ0FDQSxjQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXHJcXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcXHJcXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxcclxcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcclxcbiBcXHJcXG4uaGVhZGVyIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmF5O1xcclxcbiAgcGFkZGluZzogNXB4O1xcclxcbiAgZm9udC1zaXplOiAxM3B4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY2FudmFze21heC1oZWlnaHQ6OTAlO21heC13aWR0aDoxMDAlfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvS1ZNL1B1cmVjYW52YXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFLQSxRQUNJLGNBQUEsQ0FDQSxjQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXHJcXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcXHJcXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxcclxcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcclxcbiBcXHJcXG4uY2FudmFze1xcclxcbiAgICBtYXgtaGVpZ2h0OiA5MCU7XFxyXFxuICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKnttYXJnaW46MDtwYWRkaW5nOjA7Ym94LXNpemluZzpib3JkZXItYm94fS5jYW52YXMtY29udGFpbmVye2hlaWdodDoxMDB2aDt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9LVk0vVUkuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFLQSxFQUNJLFFBQUEsQ0FDQSxTQUFBLENBQ0EscUJBQUEsQ0FHSixrQkFDRyxZQUFBLENBQ0EsaUJBQUEsQ0FDQSxxQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxyXFxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XFxyXFxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcXHJcXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXHJcXG4gXFxyXFxuKnsgLy8gKiByZWZlcnMgZXZlcnkgZWxlbWVudCBhbmQgcmVtb3ZlcyBkZWZhdWx0IG1hcmdpbiAgcGFkZGluZyB0aGF0IGNvbWVzIHdpdGggaHRtbCBlbGVtZW50cyBib2R5LCBoMSBldGNcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLy9lbGVtZW50IHBhZGRpbmcgYW5kIGJvcmRlciBhcmUgaW5jbHVkZWQgaW4gdGhlIHdpZHRoIGFuZCBoZWlnaHRcXHJcXG59XFxyXFxuXFxyXFxuLmNhbnZhcy1jb250YWluZXJ7XFxyXFxuICAgaGVpZ2h0OiAxMDB2aDsgXFxyXFxuICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zb2wtaGVhZGVye2Rpc3BsYXk6ZmxleH0ucG93ZXItb3B0aW9uc3tkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjElfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvU2VyaWFsT3ZlckxBTi9zb2wuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFJQSxZQUNJLFlBQUEsQ0FFSixlQUNDLGFBQUEsQ0FDQSxpQkFBQSxDQUNBLFFBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcclxcbiogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XFxyXFxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxcclxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxyXFxuLnNvbC1oZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbn1cXHJcXG4ucG93ZXItb3B0aW9ucyB7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdHJpZ2h0OiAxJTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInh0ZXJtXCIpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbnJlcXVpcmUoJy4vQ29ubmVjdGJ1dHRvbi5zY3NzJylcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdFByb3BzIHtcclxuICBrdm1zdGF0ZTogbnVtYmVyXHJcbiAgaGFuZGxlQ29ubmVjdENsaWNrOiAoZTogYW55KSA9PiB2b2lkXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25uZWN0QnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbm5lY3RQcm9wcywge30+IHtcclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMucHJvcHMuaGFuZGxlQ29ubmVjdENsaWNrfT5cclxuICAgICAgICB7dGhpcy5wcm9wcy5rdm1zdGF0ZSA9PT0gMSA/ICdDb25uZWN0aW5nIEtWTScgOiAodGhpcy5wcm9wcy5rdm1zdGF0ZSA9PT0gMiA/ICdEaXNjb25uZWN0IEtWTScgOiAnQ29ubmVjdCBLVk0nKX1cclxuICAgICAgPC9idXR0b24+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbnJlcXVpcmUoJy4vRW5jb2RpbmdvcHRpb25zLnNjc3MnKVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRW5jb2RpbmdPcHRpb25zIHtcclxuICBjaGFuZ2VFbmNvZGluZzogKGVuY29kaW5nOiBudW1iZXIpID0+IHZvaWRcclxuICBnZXRDb25uZWN0U3RhdGU6ICgpID0+IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW5jb2RpbmdPcHRpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElFbmNvZGluZ09wdGlvbnMsIHsgdmFsdWU6IG51bWJlciB9PiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBJRW5jb2RpbmdPcHRpb25zKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICAgIHRoaXMuc3RhdGUgPSB7IHZhbHVlOiAxIH1cclxuICAgIHRoaXMub25FbmNvZGluZ0NoYW5nZSA9IHRoaXMub25FbmNvZGluZ0NoYW5nZS5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBvbkVuY29kaW5nQ2hhbmdlIChlKTogdm9pZCB7XHJcbiAgICAvLyBlLnBlcnNpc3QoKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogZS50YXJnZXQudmFsdWUgfSlcclxuICAgIHRoaXMucHJvcHMuY2hhbmdlRW5jb2RpbmcoZS50YXJnZXQudmFsdWUpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJlbmNvZGluZ1wiPlxyXG4gICAgICAgIDxsYWJlbCA+RW5jb2Rpbmc6PC9sYWJlbD5cclxuICAgICAgICA8c2VsZWN0IHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfSBjbGFzc05hbWU9IHt0aGlzLnByb3BzLmdldENvbm5lY3RTdGF0ZSgpID09PSAyID8gJ3JlbGRpc2FibGVkJyA6ICcnfSBvbkNoYW5nZT17dGhpcy5vbkVuY29kaW5nQ2hhbmdlfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5nZXRDb25uZWN0U3RhdGUoKSA9PT0gMn0+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMVwiPlJMRSA4PC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPlJMRSAxNjwvb3B0aW9uPlxyXG4gICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICA8L3NwYW4+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IEVuY29kaW5nT3B0aW9ucyB9IGZyb20gJy4vRW5jb2RpbmdvcHRpb25zJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRGVza3RvcFNldHRpbmdzIHtcclxuICBjaGFuZ2VEZXNrdG9wU2V0dGluZ3M6IChzZXR0aW5nczogYW55KSA9PiB2b2lkXHJcbiAgZ2V0Q29ubmVjdFN0YXRlOiAoKSA9PiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlc2t0b3BTZXR0aW5ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJRGVza3RvcFNldHRpbmdzPiB7XHJcbiAgZGVza3RvcHNldHRpbmdzID0ge1xyXG4gICAgZW5jb2Rpbmc6IDFcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogSURlc2t0b3BTZXR0aW5ncykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLmNoYW5nZUVuY29kaW5nID0gdGhpcy5jaGFuZ2VFbmNvZGluZy5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBjaGFuZ2VFbmNvZGluZyAoZW5jb2Rpbmc6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5kZXNrdG9wc2V0dGluZ3MuZW5jb2RpbmcgPSBlbmNvZGluZ1xyXG4gICAgdGhpcy5wcm9wcy5jaGFuZ2VEZXNrdG9wU2V0dGluZ3ModGhpcy5kZXNrdG9wc2V0dGluZ3MpXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8RW5jb2RpbmdPcHRpb25zIGNoYW5nZUVuY29kaW5nPXt0aGlzLmNoYW5nZUVuY29kaW5nfSBnZXRDb25uZWN0U3RhdGU9e3RoaXMucHJvcHMuZ2V0Q29ubmVjdFN0YXRlfS8+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IENvbm5lY3RCdXR0b24gfSBmcm9tICcuL0Nvbm5lY3RidXR0b24nXHJcbmltcG9ydCB7IERlc2t0b3BTZXR0aW5ncyB9IGZyb20gJy4vRGVza3RvcHNldHRpbmdzJ1xyXG5pbXBvcnQgeyBwb3dlckFjdGlvbnMgfSBmcm9tICcuLi9zZXJ2aWNlcy9Qb3dlckFjdGlvblNlcnZpY2VzJ1xyXG5pbXBvcnQgeyBhdmFpbGFibGVQb3dlckFjdGlvbnMsIGdldEFjdGlvbkJ5SWQgfSBmcm9tICcuLi9zaGFyZWQvUG93ZXJBY3Rpb25zJ1xyXG5pbXBvcnQgeyBQb3dlck9wdGlvbnMgfSBmcm9tICcuLi9zaGFyZWQvUG93ZXJPcHRpb25zJ1xyXG5pbXBvcnQgeyBBbXRGZWF0dXJlcyB9IGZyb20gJy4uL3NoYXJlZC9BbXRGZWF0dXJlcydcclxuaW1wb3J0IFNuYWNrQmFyIGZyb20gJy4uL3NoYXJlZC9TbmFja0JhcidcclxuaW1wb3J0IFN0eWxlIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xyXG5pbXBvcnQgeyBQb3dlclN0YXRlIH0gZnJvbSAnLi4vc2hhcmVkL1Bvd2VyU3RhdGUnXHJcbmltcG9ydCB7IHRyYW5zbGF0ZVRleHQgfSBmcm9tICcuLi9zaGFyZWQvTWV0aG9kcydcclxuaW1wb3J0IHsgRG9tYWluQ29udGV4dCB9IGZyb20gJy4uL3NoYXJlZC9jb250ZXh0L0Jhc2ljQ29udGV4dFByb3ZpZGVyJ1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxucmVxdWlyZSgnLi9IZWFkZXIuc2NzcycpXHJcblxyXG5jb25zdCBTdHlsZWRMYWJlbCA9IFN0eWxlLmxhYmVsYFxyXG5mb250LXNpemUgOiAxNXB4O1xyXG5tYXJnaW4tbGVmdDogMzBweDtcclxuYFxyXG5cclxuY29uc3QgU3R5bGVkRGl2ID0gU3R5bGUuZGl2YFxyXG5kaXNwbGF5IDogaW5saW5lLWJsb2NrO1xyXG5wYWRkaW5nIDogMHB4IDVweDtcclxuYFxyXG5leHBvcnQgaW50ZXJmYWNlIElIZWFkZXJQcm9wcyB7XHJcbiAga3Ztc3RhdGU6IG51bWJlclxyXG4gIGRldmljZUlkOiBzdHJpbmcgfCBudWxsXHJcbiAgc2VydmVyOiBzdHJpbmcgfCBudWxsXHJcbiAgaGFuZGxlQ29ubmVjdENsaWNrOiAoZTogYW55KSA9PiB2b2lkXHJcbiAgY2hhbmdlRGVza3RvcFNldHRpbmdzOiAoc2V0dGluZ3M6IGFueSkgPT4gdm9pZFxyXG4gIGdldENvbm5lY3RTdGF0ZTogKCkgPT4gbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG93ZXJTdGF0ZXMge1xyXG4gIHBvd2VyU3RhdGU6IG51bWJlclxyXG4gIHNob3dTdWNjZXNzOiBib29sZWFuXHJcbiAgbWVzc2FnZTogc3RyaW5nXHJcbiAgaXNTZWxlY3RlZDogYm9vbGVhblxyXG4gIHR5cGU6IHN0cmluZ1xyXG4gIGt2bU5vdEVuYWJsZWQ6IHN0cmluZ1xyXG4gIGRldmljZU9uU2xlZXA6IHN0cmluZ1xyXG4gIGlzUG93ZXJTdGF0ZUxvYWRlZDogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElIZWFkZXJQcm9wcywgUG93ZXJTdGF0ZXM+IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IElIZWFkZXJQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBwb3dlclN0YXRlOiAwLFxyXG4gICAgICBzaG93U3VjY2VzczogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICBpc1NlbGVjdGVkOiB0cnVlLFxyXG4gICAgICB0eXBlOiAnJyxcclxuICAgICAga3ZtTm90RW5hYmxlZDogJycsXHJcbiAgICAgIGRldmljZU9uU2xlZXA6ICcnLFxyXG4gICAgICBpc1Bvd2VyU3RhdGVMb2FkZWQ6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogc2VuZCBwb3dlciBhY3Rpb25zIHRvIEFNVCBkZXZpY2UgKi9cclxuICBoYW5kbGVQb3dlck9wdGlvbnMgPSBhc3luYyAoZSk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICBjb25zdCBzZXJ2ZXI6IHN0cmluZyA9IHRoaXMucHJvcHMuc2VydmVyICE9IG51bGwgPyB0aGlzLnByb3BzLnNlcnZlciA6ICcnXHJcbiAgICBpZiAoZS5kZXRhaWwgPT09IDApIHtcclxuICAgICAgY29uc3QgeyBtcHNLZXkgfSA9IHRoaXMuY29udGV4dC5kYXRhXHJcbiAgICAgIGNvbnN0IHBvd2VyQWN0aW9uOiBzdHJpbmcgPSBnZXRBY3Rpb25CeUlkKHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKSlcclxuICAgICAgaWYgKHRoaXMucHJvcHMua3Ztc3RhdGUgPT09IDIgJiYgKGUudGFyZ2V0LnZhbHVlID09PSAnOCcgfHwgZS50YXJnZXQudmFsdWUgPT09ICc1JykpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNob3dTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxyXG4gICAgICAgICAgbWVzc2FnZTogYCR7cG93ZXJBY3Rpb259IG5vdCBhbGxvd2VkIHdoaWxlIGt2bSBpcyBjb25uZWN0ZWRgLFxyXG4gICAgICAgICAgaXNTZWxlY3RlZDogIXRoaXMuc3RhdGUuaXNTZWxlY3RlZFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcG93ZXJBY3Rpb25zKFxyXG4gICAgICAgICAgdGhpcy5wcm9wcy5kZXZpY2VJZCxcclxuICAgICAgICAgIGUudGFyZ2V0LnZhbHVlLFxyXG4gICAgICAgICAgc2VydmVyLnN1YnN0cigwLCBzZXJ2ZXIuaW5kZXhPZignLycpKSxcclxuICAgICAgICAgIG1wc0tleVxyXG4gICAgICAgICkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJlc3BvbnNlLkJvZHkgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICByZXNwb25zZS5Cb2R5LlJldHVyblZhbHVlU3RyID09PSAnU1VDQ0VTUydcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICBzaG93U3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgbWVzc2FnZTogYCR7cG93ZXJBY3Rpb259IHN1Y2Nlc3NgLFxyXG4gICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIHNob3dTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgbWVzc2FnZTogKHJlc3BvbnNlLkJvZHkgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5Cb2R5LlJldHVyblZhbHVlICE9PSAwKSA/IGAke3Bvd2VyQWN0aW9ufSAke1N0cmluZyhyZXNwb25zZS5Cb2R5LlJldHVyblZhbHVlU3RyKX1gIDogcmVzcG9uc2UuZXJyb3JEZXNjcmlwdGlvbiB8fCAnU29ycnkhIHRoZXJlIHdhcyBzb21lIHRlY2huaWNhbCBkaWZmaWN1bHRpZXMnLFxyXG4gICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNob3dTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgIG1lc3NhZ2U6IChpc0ZhbHN5KGVycm9yLmFqYXhFcnJvci5yZXNwb25zZSkgJiYgU3RyaW5nKGVycm9yLmFqYXhFcnJvci5yZXNwb25zZS5lcnJvcikpIHx8ICdQb3dlciBBY3Rpb24gRmFpbGVkJyxcclxuICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICB9KSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0VGltZW91dChcclxuICAgICAgKCkgPT5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNob3dTdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICB9KSxcclxuICAgICAgNDAwMFxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgLyoqIGNhbGxiYWNrIGZ1bmN0aW9ucyBmcm9tIGNoaWxkIGNvbXBvbmVudHMgdG8gdXBkYXRlIHRoZSBzdGF0ZSB2YWx1ZXMgKi9cclxuICBoYW5kbGVGZWF0dXJlU3RhdHVzID0gKHZhbHVlKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAga3ZtTm90RW5hYmxlZDogdmFsdWVcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBoYW5kbGVQb3dlclN0YXR1cyA9ICh2YWx1ZSk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRldmljZU9uU2xlZXA6IHZhbHVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUG93ZXJTdGF0dXMgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgaXNQb3dlclN0YXRlTG9hZGVkOiB0cnVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpOiBKU1guRWxlbWVudCB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNob3dTdWNjZXNzLFxyXG4gICAgICBtZXNzYWdlLFxyXG4gICAgICB0eXBlLFxyXG4gICAgICBrdm1Ob3RFbmFibGVkLFxyXG4gICAgICBkZXZpY2VPblNsZWVwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgeyBkZXZpY2VJZCwgc2VydmVyIH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCBtcHNTZXJ2ZXI6IHN0cmluZyA9IHNlcnZlciAhPSBudWxsID8gc2VydmVyIDogJydcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICB7a3ZtTm90RW5hYmxlZCA9PT0gJ2ZhaWxlZCcgJiYgZGV2aWNlT25TbGVlcCA9PT0gJ3Bvd2Vyb24nID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZEt2bUZldGNoJyl9IHR5cGU9J2Vycm9yJyAvPiA6ICcnfVxyXG4gICAgICAgIHtrdm1Ob3RFbmFibGVkID09PSAnZmFpbGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnc2xlZXAnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZEt2bUZldGNoQW5kTm90UG93ZXJlZFVwJyl9IHR5cGU9J3dhcm5pbmcnIC8+IDogJyd9XHJcbiAgICAgICAge2t2bU5vdEVuYWJsZWQgPT09ICdmYWlsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdmYWlsZWQnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZEt2bUZldGNoQW5kRmFpbGVkUG93ZXJGZXRjaCcpfSB0eXBlPSdlcnJvcicgLz4gOiAnJ31cclxuICAgICAgICB7a3ZtTm90RW5hYmxlZCA9PT0gJ25vdEVuYWJsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdzbGVlcCcgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMua3ZtTm90RW5hYmxlZEFuZE5vdFBvd2VyZWRVcCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge2t2bU5vdEVuYWJsZWQgPT09ICdub3RFbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnZmFpbGVkJyA/IDxTbmFja0JhciBtZXNzYWdlPXt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5rdm1Ob3RFbmFibGVkQW5kRmFpbGVkUG93ZXJGZXRjaCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge2t2bU5vdEVuYWJsZWQgPT09ICdlbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnc2xlZXAnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLm5vdFBvd2VyZWRVcCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcbiAgICAgICAge2t2bU5vdEVuYWJsZWQgPT09ICdlbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAnZmFpbGVkJyA/IDxTbmFja0JhciBtZXNzYWdlPXt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5mYWlsZWRQb3dlckZldGNoJyl9IHR5cGU9eydlcnJvcid9IC8+IDogJyd9XHJcbiAgICAgICAge2t2bU5vdEVuYWJsZWQgPT09ICdub3RFbmFibGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAncG93ZXJvbicgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMua3ZtTm90RW5hYmxlZCcpfSB0eXBlPXsnd2FybmluZyd9IC8+IDogJyd9XHJcblxyXG4gICAgICAgIHtzaG93U3VjY2VzcyAmJiA8U25hY2tCYXIgbWVzc2FnZT17bWVzc2FnZX0gdHlwZT17dHlwZX0gLz59XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cclxuICAgICAgICAgIDxTdHlsZWREaXY+XHJcbiAgICAgICAgICAgIDxTdHlsZWRMYWJlbD5cclxuICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5pc1Bvd2VyU3RhdGVMb2FkZWQgJiYgKFxyXG4gICAgICAgICAgICAgICAgPEFtdEZlYXR1cmVzXHJcbiAgICAgICAgICAgICAgICAgIGRldmljZUlkPXtkZXZpY2VJZH1cclxuICAgICAgICAgICAgICAgICAgc2VydmVyPXttcHNTZXJ2ZXIuc3Vic3RyKFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbXBzU2VydmVyLmluZGV4T2YoJy8nKVxyXG4gICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlPXsnS1ZNJ31cclxuICAgICAgICAgICAgICAgICAgaGFuZGxlRmVhdHVyZVN0YXR1cz17dGhpcy5oYW5kbGVGZWF0dXJlU3RhdHVzfVxyXG4gICAgICAgICAgICAgICAgICBnZXRDb25uZWN0U3RhdGU9e3RoaXMucHJvcHMuZ2V0Q29ubmVjdFN0YXRlfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8L1N0eWxlZExhYmVsPlxyXG4gICAgICAgICAgPC9TdHlsZWREaXY+XHJcbiAgICAgICAgICA8Q29ubmVjdEJ1dHRvblxyXG4gICAgICAgICAgICBoYW5kbGVDb25uZWN0Q2xpY2s9e3RoaXMucHJvcHMuaGFuZGxlQ29ubmVjdENsaWNrfVxyXG4gICAgICAgICAgICBrdm1zdGF0ZT17dGhpcy5wcm9wcy5rdm1zdGF0ZX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8RGVza3RvcFNldHRpbmdzXHJcbiAgICAgICAgICAgIGNoYW5nZURlc2t0b3BTZXR0aW5ncz17dGhpcy5wcm9wcy5jaGFuZ2VEZXNrdG9wU2V0dGluZ3N9XHJcbiAgICAgICAgICAgIGdldENvbm5lY3RTdGF0ZT17dGhpcy5wcm9wcy5nZXRDb25uZWN0U3RhdGV9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFN0eWxlZERpdj5cclxuICAgICAgICAgICAgPFN0eWxlZExhYmVsPlBvd2VyIEFjdGlvbnM6IDwvU3R5bGVkTGFiZWw+XHJcbiAgICAgICAgICAgIDxQb3dlck9wdGlvbnNcclxuICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zPXthdmFpbGFibGVQb3dlckFjdGlvbnN9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUG93ZXJPcHRpb25zfVxyXG4gICAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e3RoaXMuc3RhdGUuaXNTZWxlY3RlZH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvU3R5bGVkRGl2PlxyXG4gICAgICAgICAgPFN0eWxlZExhYmVsPlBvd2VyIFN0YXR1cyA6PC9TdHlsZWRMYWJlbD57JyAnfVxyXG4gICAgICAgICAgPFBvd2VyU3RhdGVcclxuICAgICAgICAgICAgZGV2aWNlSWQ9e3RoaXMucHJvcHMuZGV2aWNlSWR9XHJcbiAgICAgICAgICAgIHNlcnZlcj17bXBzU2VydmVyLnN1YnN0cigwLCBtcHNTZXJ2ZXIuaW5kZXhPZignLycpKX1cclxuICAgICAgICAgICAgaGFuZGxlUG93ZXJTdGF0dXM9e3RoaXMuaGFuZGxlUG93ZXJTdGF0dXN9XHJcbiAgICAgICAgICAgIHVwZGF0ZVBhcmVudD17dGhpcy51cGRhdGVQb3dlclN0YXR1c31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5IZWFkZXIuY29udGV4dFR5cGUgPSBEb21haW5Db250ZXh0XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqIEF1dGhvciA6IFJhbXUgQmFjaGFsYVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxucmVxdWlyZSgnLi9QdXJlY2FudmFzLnNjc3MnKVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQdXJlQ2FudmFzUHJvcHMge1xyXG4gIGNvbnRleHRSZWY6IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4gdm9pZFxyXG4gIG1vdXNlRG93bjogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB2b2lkXHJcbiAgbW91c2VVcDogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB2b2lkXHJcbiAgbW91c2VNb3ZlOiAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHZvaWRcclxuICBjYW52YXNIZWlnaHQ6IHN0cmluZ1xyXG4gIGNhbnZhc1dpZHRoOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFB1cmVDYW52YXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHVyZUNhbnZhc1Byb3BzLCB7fT4ge1xyXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgIGNvbnN0IGNhbnZhc0F0dHJpYnV0ZXM6IFJlYWN0LkNhbnZhc0hUTUxBdHRyaWJ1dGVzPEhUTUxDYW52YXNFbGVtZW50PiA9IHtcclxuICAgICAgd2lkdGg6ICcxMzY2JyxcclxuICAgICAgaGVpZ2h0OiAnNzY4JyxcclxuICAgICAgb25Db250ZXh0TWVudTogKGUpID0+IHsgZS5wcmV2ZW50RGVmYXVsdCgpOyByZXR1cm4gZmFsc2UgfSxcclxuICAgICAgb25Nb3VzZURvd246IHRoaXMucHJvcHMubW91c2VEb3duLFxyXG4gICAgICBvbk1vdXNlVXA6IHRoaXMucHJvcHMubW91c2VVcCxcclxuICAgICAgb25Nb3VzZU1vdmU6IHRoaXMucHJvcHMubW91c2VNb3ZlXHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Y2FudmFzIHsuLi5jYW52YXNBdHRyaWJ1dGVzfSBjbGFzc05hbWU9XCJjYW52YXNcIiByZWY9eyhjOiBhbnkpID0+IGlzRmFsc3koYykgPyB0aGlzLnByb3BzLmNvbnRleHRSZWYoYy5nZXRDb250ZXh0KCcyZCcpKSA6IG51bGx9Lz5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcclxuICogQXV0aG9yIDogUmFtdSBCYWNoYWxhXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IElEYXRhUHJvY2Vzc29yIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9JRGF0YVByb2Nlc3NvcidcclxuaW1wb3J0IHsgRGF0YVByb2Nlc3NvciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvSW1hZ2VEYXRhL0RhdGFQcm9jZXNzb3InXHJcbmltcG9ydCB7IERlc2t0b3AgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0Rlc2t0b3AnXHJcbmltcG9ydCB7IElLdm1EYXRhQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9JQ29tbXVuaWNhdG9yJ1xyXG5pbXBvcnQgeyBBTVRLdm1EYXRhUmVkaXJlY3RvciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQU1US3ZtRGF0YVJlZGlyZWN0b3InXHJcbmltcG9ydCB7IEFNVERlc2t0b3AgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0FNVERlc2t0b3AnXHJcbmltcG9ydCB7IFByb3RvY29sIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9BTVRSZWRpcmVjdG9yJ1xyXG5pbXBvcnQgeyBNb3VzZUhlbHBlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvVXRpbGl0aWVzL01vdXNlSGVscGVyJ1xyXG5pbXBvcnQgeyBJTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvSUxvZ2dlcidcclxuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQ29uc29sZUxvZ2dlcidcclxuaW1wb3J0IHsgS2V5Qm9hcmRIZWxwZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL1V0aWxpdGllcy9LZXlib2FyZEhlbHBlcidcclxuXHJcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4vSGVhZGVyJ1xyXG5pbXBvcnQgeyBQdXJlQ2FudmFzIH0gZnJvbSAnLi9QdXJlY2FudmFzJ1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxuXHJcbnJlcXVpcmUoJy4vVUkuc2NzcycpXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEtWTVByb3BzIHtcclxuICBkZXZpY2VJZDogc3RyaW5nIHwgbnVsbFxyXG4gIG1wc1NlcnZlcjogc3RyaW5nIHwgbnVsbFxyXG4gIG1vdXNlRGVib3VuY2VUaW1lOiBudW1iZXJcclxuICBjYW52YXNIZWlnaHQ6IHN0cmluZ1xyXG4gIGNhbnZhc1dpZHRoOiBzdHJpbmdcclxuICBhdXRvQ29ubmVjdD86IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlbW90ZURlc2t0b3AgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8S1ZNUHJvcHMsIHsga3Ztc3RhdGU6IG51bWJlciwgZW5jb2RpbmdPcHRpb246IG51bWJlciB9PiB7XHJcbiAgbW9kdWxlOiBEZXNrdG9wIHwgYW55XHJcbiAgZGF0YVByb2Nlc3NvcjogSURhdGFQcm9jZXNzb3IgfCBhbnlcclxuICByZWRpcmVjdG9yOiBJS3ZtRGF0YUNvbW11bmljYXRvciB8IGFueVxyXG4gIG1vdXNlSGVscGVyOiBNb3VzZUhlbHBlciB8IGFueVxyXG4gIGxvZ2dlcjogSUxvZ2dlclxyXG4gIGtleWJvYXJkOiBLZXlCb2FyZEhlbHBlciB8IGFueVxyXG4gIGRlc2t0b3BTZXR0aW5nc0NoYW5nZSA9IGZhbHNlXHJcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcclxuICBmcjogRmlsZVJlYWRlclxyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogS1ZNUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG4gICAgdGhpcy5zdGF0ZSA9IHsga3Ztc3RhdGU6IDAsIGVuY29kaW5nT3B0aW9uOiAxIH1cclxuICAgIHRoaXMubG9nZ2VyID0gbmV3IENvbnNvbGVMb2dnZXIoTG9nTGV2ZWwuRVJST1IpXHJcbiAgICB0aGlzLnNhdmVDb250ZXh0ID0gdGhpcy5zYXZlQ29udGV4dC5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnN0YXJ0S1ZNID0gdGhpcy5zdGFydEtWTS5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnN0b3BLVk0gPSB0aGlzLnN0b3BLVk0uYmluZCh0aGlzKVxyXG4gICAgdGhpcy5oYW5kbGVDb25uZWN0Q2xpY2sgPSB0aGlzLmhhbmRsZUNvbm5lY3RDbGljay5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLmdldFJlbmRlclN0YXR1cyA9IHRoaXMuZ2V0UmVuZGVyU3RhdHVzLmJpbmQodGhpcylcclxuICAgIHRoaXMuT25Db25uZWN0aW9uU3RhdGVDaGFuZ2UgPSB0aGlzLk9uQ29ubmVjdGlvblN0YXRlQ2hhbmdlLmJpbmQodGhpcylcclxuICAgIHRoaXMuY2hhbmdlRGVza3RvcFNldHRpbmdzID0gdGhpcy5jaGFuZ2VEZXNrdG9wU2V0dGluZ3MuYmluZCh0aGlzKVxyXG4gIH1cclxuXHJcbiAgc2F2ZUNvbnRleHQgKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XHJcbiAgICB0aGlzLmxvZ2dlci5kZWJ1Zygnc2F2ZSBjb250ZXh0IGNhbGxlZCcpXHJcbiAgICB0aGlzLmN0eCA9IGN0eFxyXG4gICAgdGhpcy5pbml0KClcclxuICB9XHJcblxyXG4gIGluaXQgKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZGV2aWNlVXVpZDogc3RyaW5nID0gdGhpcy5wcm9wcy5kZXZpY2VJZCAhPSBudWxsID8gdGhpcy5wcm9wcy5kZXZpY2VJZCA6ICcnXHJcbiAgICBjb25zdCBzZXJ2ZXI6IHN0cmluZyA9IHRoaXMucHJvcHMubXBzU2VydmVyICE9IG51bGwgPyB0aGlzLnByb3BzLm1wc1NlcnZlciA6ICcnXHJcbiAgICB0aGlzLm1vZHVsZSA9IG5ldyBBTVREZXNrdG9wKHRoaXMubG9nZ2VyLCB0aGlzLmN0eClcclxuICAgIHRoaXMucmVkaXJlY3RvciA9IG5ldyBBTVRLdm1EYXRhUmVkaXJlY3Rvcih0aGlzLmxvZ2dlciwgUHJvdG9jb2wuS1ZNLCBuZXcgRmlsZVJlYWRlcigpLCBkZXZpY2VVdWlkLCAxNjk5NCwgJycsICcnLCAwLCAwLCBzZXJ2ZXIpXHJcbiAgICB0aGlzLmRhdGFQcm9jZXNzb3IgPSBuZXcgRGF0YVByb2Nlc3Nvcih0aGlzLmxvZ2dlciwgdGhpcy5yZWRpcmVjdG9yLCB0aGlzLm1vZHVsZSlcclxuICAgIHRoaXMubW91c2VIZWxwZXIgPSBuZXcgTW91c2VIZWxwZXIodGhpcy5tb2R1bGUsIHRoaXMucmVkaXJlY3RvciwgdGhpcy5wcm9wcy5tb3VzZURlYm91bmNlVGltZSA8IDIwMCA/IDIwMCA6IHRoaXMucHJvcHMubW91c2VEZWJvdW5jZVRpbWUpIC8vIGFueXRoaW5nIGxlc3MgdGhhbiAyMDAgbXMgY2F1c2VzIHRpbWVvdXRcclxuICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Qm9hcmRIZWxwZXIodGhpcy5tb2R1bGUsIHRoaXMucmVkaXJlY3RvcilcclxuXHJcbiAgICB0aGlzLnJlZGlyZWN0b3Iub25Qcm9jZXNzRGF0YSA9IHRoaXMubW9kdWxlLnByb2Nlc3NEYXRhLmJpbmQodGhpcy5tb2R1bGUpXHJcbiAgICB0aGlzLnJlZGlyZWN0b3Iub25TdGFydCA9IHRoaXMubW9kdWxlLnN0YXJ0LmJpbmQodGhpcy5tb2R1bGUpXHJcbiAgICB0aGlzLnJlZGlyZWN0b3Iub25OZXdTdGF0ZSA9IHRoaXMubW9kdWxlLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzLm1vZHVsZSlcclxuICAgIHRoaXMucmVkaXJlY3Rvci5vblNlbmRLdm1EYXRhID0gdGhpcy5tb2R1bGUub25TZW5kS3ZtRGF0YS5iaW5kKHRoaXMubW9kdWxlKVxyXG4gICAgdGhpcy5yZWRpcmVjdG9yLm9uU3RhdGVDaGFuZ2VkID0gdGhpcy5PbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnJlZGlyZWN0b3Iub25FcnJvciA9IHRoaXMub25SZWRpcmVjdG9yRXJyb3IuYmluZCh0aGlzKVxyXG4gICAgdGhpcy5tb2R1bGUub25TZW5kID0gdGhpcy5yZWRpcmVjdG9yLnNlbmQuYmluZCh0aGlzLnJlZGlyZWN0b3IpXHJcbiAgICB0aGlzLm1vZHVsZS5vblByb2Nlc3NEYXRhID0gdGhpcy5kYXRhUHJvY2Vzc29yLnByb2Nlc3NEYXRhLmJpbmQodGhpcy5kYXRhUHJvY2Vzc29yKVxyXG4gICAgdGhpcy5tb2R1bGUuYnBwID0gdGhpcy5zdGF0ZS5lbmNvZGluZ09wdGlvblxyXG4gIH1cclxuXHJcbiAgY2xlYW5VcCAoKTogdm9pZCB7XHJcbiAgICB0aGlzLm1vZHVsZSA9IG51bGxcclxuICAgIHRoaXMucmVkaXJlY3RvciA9IG51bGxcclxuICAgIHRoaXMuZGF0YVByb2Nlc3NvciA9IG51bGxcclxuICAgIHRoaXMubW91c2VIZWxwZXIgPSBudWxsXHJcbiAgICB0aGlzLmtleWJvYXJkID0gbnVsbFxyXG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQsIHRoaXMuY3R4LmNhbnZhcy53aWR0aClcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RvcEtWTSgpXHJcbiAgfVxyXG5cclxuICBvblJlZGlyZWN0b3JFcnJvciAoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlc2V0KClcclxuICB9XHJcblxyXG4gIHJlc2V0ICgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYW5VcCgpXHJcbiAgICB0aGlzLmluaXQoKVxyXG4gIH1cclxuXHJcbiAgT25Db25uZWN0aW9uU3RhdGVDaGFuZ2UgKHJlZGlyZWN0b3I6IGFueSwgc3RhdGU6IG51bWJlcik6IGFueSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsga3Ztc3RhdGU6IHN0YXRlIH0pXHJcbiAgICBpZiAodGhpcy5kZXNrdG9wU2V0dGluZ3NDaGFuZ2UgJiYgc3RhdGUgPT09IDApIHtcclxuICAgICAgdGhpcy5kZXNrdG9wU2V0dGluZ3NDaGFuZ2UgPSBmYWxzZVxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc3RhcnRLVk0oKSwgMjAwMCkgLy8gSW50cm9kdWNlZCBkZWxheSB0byBzdGFydCBLVk1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNoYW5nZURlc2t0b3BTZXR0aW5ncyAoc2V0dGluZ3M6IGFueSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc3RhdGUua3Ztc3RhdGUgPT09IDIpIHtcclxuICAgICAgdGhpcy5kZXNrdG9wU2V0dGluZ3NDaGFuZ2UgPSB0cnVlXHJcbiAgICAgIHRoaXMubW9kdWxlLmJwcCA9IHNldHRpbmdzLmVuY29kaW5nXHJcbiAgICAgIHRoaXMuc3RvcEtWTSgpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBlbmNvZGluZ09wdGlvbjogcGFyc2VJbnQoc2V0dGluZ3MuZW5jb2RpbmcpXHJcbiAgICAgIH0pXHJcbiAgICAgIHRoaXMubW9kdWxlLmJwcCA9IHBhcnNlSW50KHNldHRpbmdzLmVuY29kaW5nKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnRLVk0gKCk6IHZvaWQge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwic3RhcnRLVk1cIilcclxuICAgICAgdGhpcy5yZWRpcmVjdG9yLnN0YXJ0KFdlYlNvY2tldClcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdGhpcy5rZXlib2FyZCAhPT0gJ3VuZGVmaW5lZCcpIHRoaXMua2V5Ym9hcmQuR3JhYktleUlucHV0KClcclxuICB9XHJcblxyXG4gIHN0b3BLVk0gKCk6IHZvaWQge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0b3IgIT09ICd1bmRlZmluZWQnKSB0aGlzLnJlZGlyZWN0b3Iuc3RvcCgpXHJcbiAgICBpZiAodHlwZW9mIHRoaXMua2V5Ym9hcmQgIT09ICd1bmRlZmluZWQnKSB0aGlzLmtleWJvYXJkLlVuR3JhYktleUlucHV0KClcclxuICAgIHRoaXMucmVzZXQoKVxyXG4gIH1cclxuXHJcbiAgZ2V0UmVuZGVyU3RhdHVzICgpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMubW9kdWxlLnN0YXRlIC8vIHVzZWQgdG8gY2hlY2sgaWYgY2FudmFzIGlzIGluIHRoZSBtaWRkbGUgb2YgcmVuZGVyaW5nIGEgY29tcGxldGUgZnJhbWUuXHJcbiAgfVxyXG5cclxuICBoYW5kbGVDb25uZWN0Q2xpY2sgKGUpOiB2b2lkIHtcclxuICAgIGUucGVyc2lzdCgpXHJcbiAgICBpZiAodGhpcy5zdGF0ZS5rdm1zdGF0ZSA9PT0gMCkge1xyXG4gICAgICB0aGlzLnN0YXJ0S1ZNKClcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5rdm1zdGF0ZSA9PT0gMSkge1xyXG4gICAgICAvLyBUYWtlIEFjdGlvblxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmt2bXN0YXRlID09PSAyKSB7XHJcbiAgICAgIHRoaXMuc3RvcEtWTSgpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBUYWtlIEFjdGlvblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlIChwcmV2UHJvcHMpOiB2b2lkIHtcclxuICAgIGlmIChwcmV2UHJvcHMuZGV2aWNlSWQgIT09IHRoaXMucHJvcHMuZGV2aWNlSWQpIHtcclxuICAgICAgdGhpcy5zdG9wS1ZNKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhbnZhcy1jb250YWluZXJcIj5cclxuICAgICAgICAgeyFpc0ZhbHN5KHRoaXMucHJvcHMuYXV0b0Nvbm5lY3QpXHJcbiAgICAgICAgICAgPyA8SGVhZGVyIGtleT1cImt2bV9oZWFkZXJcIiBoYW5kbGVDb25uZWN0Q2xpY2s9e3RoaXMuaGFuZGxlQ29ubmVjdENsaWNrfSBnZXRDb25uZWN0U3RhdGU9eygpID0+IHRoaXMuc3RhdGUua3Ztc3RhdGV9IGt2bXN0YXRlPXt0aGlzLnN0YXRlLmt2bXN0YXRlfSBjaGFuZ2VEZXNrdG9wU2V0dGluZ3M9e3RoaXMuY2hhbmdlRGVza3RvcFNldHRpbmdzfSBkZXZpY2VJZD17dGhpcy5wcm9wcy5kZXZpY2VJZH0gc2VydmVyPXt0aGlzLnByb3BzLm1wc1NlcnZlcn1cclxuICAgICAgICAgLz5cclxuICAgICAgICAgICA6ICcnfVxyXG4gICAgICAgICA8UHVyZUNhbnZhcyBrZXk9XCJrdm1fY29tcFwiIGNvbnRleHRSZWY9e2N0eCA9PiB0aGlzLnNhdmVDb250ZXh0KGN0eCl9IGNhbnZhc0hlaWdodD17dGhpcy5wcm9wcy5jYW52YXNIZWlnaHR9IGNhbnZhc1dpZHRoPXt0aGlzLnByb3BzLmNhbnZhc1dpZHRofVxyXG4gICAgICAgICAgIG1vdXNlTW92ZT17ZXZlbnQgPT4geyBpZiAodHlwZW9mIHRoaXMubW91c2VIZWxwZXIgIT09ICd1bmRlZmluZWQnKSB0aGlzLm1vdXNlSGVscGVyLm1vdXNlbW92ZShldmVudCkgfX1cclxuICAgICAgICAgICBtb3VzZURvd249e2V2ZW50ID0+IHsgaWYgKHR5cGVvZiB0aGlzLm1vdXNlSGVscGVyICE9PSAndW5kZWZpbmVkJykgdGhpcy5tb3VzZUhlbHBlci5tb3VzZWRvd24oZXZlbnQpIH19XHJcbiAgICAgICAgICAgbW91c2VVcD17ZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1vdXNlSGVscGVyICE9PSAndW5kZWZpbmVkJykgdGhpcy5tb3VzZUhlbHBlci5tb3VzZXVwKGV2ZW50KVxyXG4gICAgICAgICAgIH19XHJcbiAgICAgICAgIC8+XHJcbiAgICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBTdHlsZSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4uL3NoYXJlZC9VdGlsaXRpZXMnXHJcblxyXG5jb25zdCBUZXJtaW5hbENvbnRhaW5lciA9IFN0eWxlLmRpdmBcclxuICAgZGlzcGxheTpibG9jaztcclxuICAgdGV4dC1hbGlnbjpjZW50ZXI7XHJcbmBcclxuY29uc3QgWFRlcm0gPSBTdHlsZS5kaXZgXHJcbiAgIGRpc3BsYXk6aW5saW5lLWJsb2NrO1xyXG5gXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wVGVybWluYWwge1xyXG4gIGhhbmRsZUtleVByZXNzOiBhbnlcclxuICB4dGVybTogYW55XHJcbiAgaGFuZGxlS2V5RG93blByZXNzOiBhbnlcclxufVxyXG5cclxuY2xhc3MgVGVybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcFRlcm1pbmFsPiB7XHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd4dGVybScpID8/ICcnXHJcbiAgICBjb25zdCB7IHh0ZXJtLCBoYW5kbGVLZXlQcmVzcyB9ID0gdGhpcy5wcm9wc1xyXG4gICAgaWYgKGlzRmFsc3koZWxlbWVudCkpIHtcclxuICAgICAgeHRlcm0ub3BlbihlbGVtZW50KVxyXG4gICAgICB4dGVybS5vbkRhdGEoZGF0YSA9PiBoYW5kbGVLZXlQcmVzcyhkYXRhKSlcclxuICAgICAgeHRlcm0uYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyKGUgPT4ge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBpZiAoaXNGYWxzeShlLmN0cmxLZXkpICYmIGlzRmFsc3koZS5zaGlmdEtleSkgJiYgKGUua2V5Q29kZSA9PT0gNjcpKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoeHRlcm0uZ2V0U2VsZWN0aW9uKCkpXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZhbHN5KGUuY3RybEtleSkgJiYgaXNGYWxzeShlLnNoaWZ0S2V5KSAmJiAoZS5rZXlDb2RlID09PSA4NikpIHtcclxuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY2xpcGJvYXJkLnJlYWRUZXh0KClcclxuICAgICAgICAgICAgLnRoZW4odGV4dCA9PiBoYW5kbGVLZXlQcmVzcyh0ZXh0KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09ICdTcGFjZScpIHtcclxuICAgICAgICAgIHJldHVybiBoYW5kbGVLZXlQcmVzcyhlLmtleSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8VGVybWluYWxDb250YWluZXI+XHJcbiAgICAgICAgPFhUZXJtIGlkPVwieHRlcm1cIiAvPlxyXG4gICAgICA8L1Rlcm1pbmFsQ29udGFpbmVyPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGVybVxyXG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zb2wuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBBbXRUZXJtaW5hbCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQU1UVGVybWluYWwnXHJcbmltcG9ydCBTdHlsZSBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuaW1wb3J0IHsgQU1UUmVkaXJlY3RvciwgUHJvdG9jb2wgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0FNVFJlZGlyZWN0b3InXHJcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0NvbnNvbGVMb2dnZXInXHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9JTG9nZ2VyJ1xyXG5pbXBvcnQgeyBUZXJtaW5hbERhdGFQcm9jZXNzb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL1Rlcm1pbmFsRGF0YVByb2Nlc3NvcidcclxuaW1wb3J0IHsgUG93ZXJPcHRpb25zIH0gZnJvbSAnLi4vc2hhcmVkL1Bvd2VyT3B0aW9ucydcclxuaW1wb3J0IHsgVGVybWluYWwgfSBmcm9tICd4dGVybSdcclxuaW1wb3J0IFRlcm0gZnJvbSAnLi9UZXJtaW5hbCdcclxuaW1wb3J0IHsgYXZhaWxhYmxlUG93ZXJBY3Rpb25zLCBnZXRBY3Rpb25CeUlkIH0gZnJvbSAnLi4vc2hhcmVkL1Bvd2VyQWN0aW9ucydcclxuaW1wb3J0ICd4dGVybS9jc3MveHRlcm0uY3NzJ1xyXG5pbXBvcnQgJy4vc29sLnNjc3MnXHJcbmltcG9ydCB7IHBvd2VyQWN0aW9ucyB9IGZyb20gJy4uL3NlcnZpY2VzL1Bvd2VyQWN0aW9uU2VydmljZXMnXHJcbmltcG9ydCBTbmFja0JhciBmcm9tICcuLi9zaGFyZWQvU25hY2tCYXInXHJcbmltcG9ydCB7IEFtdEZlYXR1cmVzIH0gZnJvbSAnLi4vc2hhcmVkL0FtdEZlYXR1cmVzJ1xyXG5pbXBvcnQgeyBQb3dlclN0YXRlIH0gZnJvbSAnLi4vc2hhcmVkL1Bvd2VyU3RhdGUnXHJcbmltcG9ydCB7IHRyYW5zbGF0ZVRleHQgfSBmcm9tICcuLi9zaGFyZWQvTWV0aG9kcydcclxuaW1wb3J0IHsgRG9tYWluQ29udGV4dCB9IGZyb20gJy4uL3NoYXJlZC9jb250ZXh0L0Jhc2ljQ29udGV4dFByb3ZpZGVyJ1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxuXHJcbmNvbnN0IFN0eWxlZERpdiA9IFN0eWxlLmRpdmBcclxuZGlzcGxheSA6IGlubGluZS1ibG9jaztcclxucGFkZGluZyA6IDBweCA1cHg7XHJcbmBcclxuXHJcbmNvbnN0IEhlYWRlclN0cmlwID0gU3R5bGUuZGl2YFxyXG5iYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JheTtcclxucGFkZGluZzogNXB4O1xyXG5mb250LXNpemU6IDEzcHg7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxuYFxyXG5cclxuY29uc3QgU3R5bGVkTGFiZWwgPSBTdHlsZS5sYWJlbGBcclxuZm9udC1zaXplIDogMTVweDtcclxubWFyZ2luLWxlZnQ6IDMwcHg7XHJcbmBcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU09MUHJvcHMge1xyXG4gIGRldmljZUlkOiBzdHJpbmcgfCBudWxsXHJcbiAgbXBzU2VydmVyOiBzdHJpbmcgfCBudWxsXHJcbiAgYXV0b0Nvbm5lY3Q/OiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU09MU3RhdGVzIHtcclxuICBpc0Nvbm5lY3RlZDogYm9vbGVhblxyXG4gIFNPTHN0YXRlOiBudW1iZXJcclxuICBwb3dlclN0YXRlOiBudW1iZXJcclxuICBzaG93U3VjY2VzczogYm9vbGVhblxyXG4gIG1lc3NhZ2U6IHN0cmluZ1xyXG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW5cclxuICB0eXBlOiBzdHJpbmdcclxuICBzb2xOb3RFbmFibGVkOiBzdHJpbmdcclxuICBkZXZpY2VPblNsZWVwOiBzdHJpbmdcclxuICBpc1Bvd2VyU3RhdGVMb2FkZWQ6IGJvb2xlYW5cclxufVxyXG5cclxuLyoqIGNvbnRhaW5lciBjbGFzcyBmb3IgU09MICovXHJcbmV4cG9ydCBjbGFzcyBTb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8U09MUHJvcHMsIFNPTFN0YXRlcz4ge1xyXG4gIHJlZGlyZWN0b3I6IGFueVxyXG4gIHRlcm1pbmFsOiBhbnlcclxuICBsb2dnZXI6IGFueVxyXG4gIGRhdGFQcm9jZXNzb3I6IGFueVxyXG4gIGNhbGxiYWNrOiBhbnlcclxuICB0ZXJtOiBhbnlcclxuICBmcjogRmlsZVJlYWRlclxyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogU09MUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgQ29uc29sZUxvZ2dlcihMb2dMZXZlbC5FUlJPUilcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGlzQ29ubmVjdGVkOiBmYWxzZSxcclxuICAgICAgU09Mc3RhdGU6IDAsXHJcbiAgICAgIHBvd2VyU3RhdGU6IDAsXHJcbiAgICAgIHNob3dTdWNjZXNzOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgIGlzU2VsZWN0ZWQ6IHRydWUsXHJcbiAgICAgIHR5cGU6ICcnLFxyXG4gICAgICBzb2xOb3RFbmFibGVkOiAnJyxcclxuICAgICAgZGV2aWNlT25TbGVlcDogJycsXHJcbiAgICAgIGlzUG93ZXJTdGF0ZUxvYWRlZDogZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXQgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBzZXJ2ZXI6IHN0cmluZyA9IHRoaXMucHJvcHMubXBzU2VydmVyICE9IG51bGwgPyB0aGlzLnByb3BzLm1wc1NlcnZlciA6ICcnXHJcbiAgICBjb25zdCBkZXZpY2VVdWlkOiBzdHJpbmcgPSB0aGlzLnByb3BzLmRldmljZUlkICE9IG51bGwgPyB0aGlzLnByb3BzLmRldmljZUlkIDogJydcclxuICAgIHRoaXMudGVybWluYWwgPSBuZXcgQW10VGVybWluYWwoKVxyXG4gICAgdGhpcy5yZWRpcmVjdG9yID0gbmV3IEFNVFJlZGlyZWN0b3IoXHJcbiAgICAgIHRoaXMubG9nZ2VyLFxyXG4gICAgICBQcm90b2NvbC5TT0wsXHJcbiAgICAgIG5ldyBGaWxlUmVhZGVyKCksXHJcbiAgICAgIGRldmljZVV1aWQsXHJcbiAgICAgIDE2OTk0LFxyXG4gICAgICAnJyxcclxuICAgICAgJycsXHJcbiAgICAgIDAsXHJcbiAgICAgIDAsXHJcbiAgICAgIGAke3NlcnZlcn0vcmVsYXlgXHJcbiAgICApXHJcbiAgICB0aGlzLmRhdGFQcm9jZXNzb3IgPSBuZXcgVGVybWluYWxEYXRhUHJvY2Vzc29yKHRoaXMudGVybWluYWwpXHJcbiAgICB0aGlzLnRlcm1pbmFsLm9uU2VuZCA9IHRoaXMucmVkaXJlY3Rvci5zZW5kLmJpbmQodGhpcy5yZWRpcmVjdG9yKVxyXG4gICAgdGhpcy5yZWRpcmVjdG9yLm9uTmV3U3RhdGUgPSB0aGlzLnRlcm1pbmFsLlN0YXRlQ2hhbmdlLmJpbmQodGhpcy50ZXJtaW5hbClcclxuICAgIHRoaXMucmVkaXJlY3Rvci5vblN0YXRlQ2hhbmdlZCA9IHRoaXMub25UZXJtaW5hbFN0YXRlQ2hhbmdlLmJpbmQodGhpcylcclxuICAgIHRoaXMucmVkaXJlY3Rvci5vblByb2Nlc3NEYXRhID0gdGhpcy5kYXRhUHJvY2Vzc29yLnByb2Nlc3NEYXRhLmJpbmQodGhpcy5kYXRhUHJvY2Vzc29yKVxyXG4gICAgdGhpcy5kYXRhUHJvY2Vzc29yLnByb2Nlc3NEYXRhVG9YdGVybSA9IHRoaXMuaGFuZGxlV3JpdGVUb1h0ZXJtLmJpbmQodGhpcylcclxuICAgIHRoaXMuZGF0YVByb2Nlc3Nvci5jbGVhclRlcm1pbmFsID0gdGhpcy5oYW5kbGVDbGVhclRlcm1pbmFsLmJpbmQodGhpcylcclxuICAgIHRoaXMudGVybSA9IG5ldyBUZXJtaW5hbCh7XHJcbiAgICAgIGN1cnNvclN0eWxlOiAnYmxvY2snLFxyXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgIHJvd3M6IDMwLFxyXG4gICAgICBjb2xzOiAxMDBcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjbGVhblVwID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy50ZXJtaW5hbCA9IG51bGxcclxuICAgIHRoaXMucmVkaXJlY3RvciA9IG51bGxcclxuICAgIHRoaXMuZGF0YVByb2Nlc3NvciA9IG51bGxcclxuICAgIHRoaXMudGVybSA9IG51bGxcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpOiB2b2lkIHtcclxuICAgIHRoaXMuaW5pdCgpXHJcbiAgfVxyXG5cclxuICAvKiogd3JpdGUgdGhlIHByb2Nlc3NlZCBkYXRhIGZyb20gd2Vic2Nva2V0IGluIHRvIHh0ZXJtICovXHJcblxyXG4gIGhhbmRsZVdyaXRlVG9YdGVybSA9IChzdHIpOiBhbnkgPT4gdGhpcy50ZXJtLndyaXRlKHN0cilcclxuXHJcbiAgaGFuZGxlQ2xlYXJUZXJtaW5hbCA9ICgpOiBhbnkgPT4gdGhpcy50ZXJtLnJlc2V0KClcclxuXHJcbiAgLyoqIGNhcHR1cmUgdGhlIGRhdGEgb24geHRlcm0ga2V5IHByZXNzICovXHJcbiAgaGFuZGxlS2V5UHJlc3MgPSAoZG9tRXZlbnQpOiBhbnkgPT4gdGhpcy50ZXJtaW5hbC5UZXJtU2VuZEtleXMoZG9tRXZlbnQpXHJcblxyXG4gIGhhbmRsZUtleURvd25QcmVzcyA9IChkb21FdmVudCk6IGFueSA9PiB0aGlzLnRlcm1pbmFsLmhhbmRsZUtleURvd25FdmVudHMoZG9tRXZlbnQpXHJcblxyXG4gIHN0YXJ0U09MID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucmVkaXJlY3Rvci5zdGFydChXZWJTb2NrZXQpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdG9wU09MID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucmVkaXJlY3Rvci5zdG9wKClcclxuICAgIH1cclxuICAgIHRoaXMuaGFuZGxlQ2xlYXJUZXJtaW5hbCgpXHJcbiAgICB0aGlzLmNsZWFuVXAoKVxyXG4gICAgdGhpcy5pbml0KClcclxuICB9XHJcblxyXG4gIGhhbmRsZVNPTENvbm5lY3QgPSAoZSk6IHZvaWQgPT4ge1xyXG4gICAgZS5wZXJzaXN0KClcclxuICAgIGlmICh0aGlzLnN0YXRlLlNPTHN0YXRlID09PSAwKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRTT0woKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdG9wU09MKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uVGVybWluYWxTdGF0ZUNoYW5nZSA9IChyZWRpcmVjdG9yLCBzdGF0ZTogbnVtYmVyKTogdm9pZCA9PiB0aGlzLnNldFN0YXRlKHsgU09Mc3RhdGU6IHN0YXRlIH0pXHJcblxyXG4gIC8qKiBzZW5kIHBvd2VyIGFjdGlvbnMgdG8gQU1UIGRldmljZSAqL1xyXG4gIGhhbmRsZVBvd2VyT3B0aW9ucyA9IGFzeW5jIChlKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICAgIGlmIChlLmRldGFpbCA9PT0gMCkge1xyXG4gICAgICBjb25zdCB7IG1wc0tleSB9ID0gdGhpcy5jb250ZXh0LmRhdGFcclxuICAgICAgY29uc3QgcG93ZXJBY3Rpb246IHN0cmluZyA9IGdldEFjdGlvbkJ5SWQocGFyc2VJbnQoZS50YXJnZXQudmFsdWUpKVxyXG4gICAgICBpZiAodGhpcy5zdGF0ZS5TT0xzdGF0ZSA9PT0gMyAmJiAoZS50YXJnZXQudmFsdWUgPT09ICc4JyB8fCBlLnRhcmdldC52YWx1ZSA9PT0gJzUnKSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgc2hvd1N1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICB0eXBlOiAnd2FybmluZycsXHJcbiAgICAgICAgICBtZXNzYWdlOiBgJHtwb3dlckFjdGlvbn0gbm90IGFsbG93ZWQgd2hpbGUgdGVybWluYTEgaXMgY29ubmVjdGVkYCxcclxuICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICB9KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBvd2VyQWN0aW9ucyh0aGlzLnByb3BzLmRldmljZUlkLCBlLnRhcmdldC52YWx1ZSwgdGhpcy5wcm9wcy5tcHNTZXJ2ZXIsIG1wc0tleSwgdHJ1ZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICBjb25zdCByZXNCb2R5ID0gcmVzcG9uc2UuQm9keVxyXG4gICAgICAgICAgaWYgKHJlc0JvZHkgIT09IHVuZGVmaW5lZCAmJiByZXNCb2R5LlJldHVyblZhbHVlU3RyID09PSAnU1VDQ0VTUycpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgc2hvd1N1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGAke3Bvd2VyQWN0aW9ufSBzdWNjZXNzYCxcclxuICAgICAgICAgICAgICBpc1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5pc1NlbGVjdGVkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICBzaG93U3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IChyZXNCb2R5ICE9PSB1bmRlZmluZWQgJiYgcmVzQm9keS5SZXR1cm5WYWx1ZSAhPT0gMCkgPyBgJHtwb3dlckFjdGlvbn0gJHtTdHJpbmcocmVzQm9keS5SZXR1cm5WYWx1ZVN0cil9YCA6IHJlc3BvbnNlLmVycm9yRGVzY3JpcHRpb24gfHwgJ1NvcnJ5ISB0aGVyZSB3YXMgc29tZSB0ZWNobmljYWwgZGlmZmljdWx0aWVzJyxcclxuICAgICAgICAgICAgICBpc1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5pc1NlbGVjdGVkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93U3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICAgIH0pLCA0MDAwKVxyXG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNob3dTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAoaXNGYWxzeShlcnJvci5hamF4RXJyb3IucmVzcG9uc2UpICYmIFN0cmluZyhlcnJvci5hamF4RXJyb3IucmVzcG9uc2UuZXJyb3IpKSB8fCAnUG93ZXIgQWN0aW9uIEZhaWxlZCcsXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93U3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6ICF0aGlzLnN0YXRlLmlzU2VsZWN0ZWRcclxuICAgICAgICAgIH0pLCA0MDAwKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBjYWxsYmFjayBmdW5jdGlvbnMgZnJvbSBjaGlsZCBjb21wb25lbnRzIHRvIHVwZGF0ZSB0aGUgc3RhdGUgdmFsdWVzICovXHJcbiAgaGFuZGxlRmVhdHVyZVN0YXR1cyA9ICh2YWx1ZSk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNvbE5vdEVuYWJsZWQ6IHZhbHVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlUG93ZXJTdGF0dXMgPSAodmFsdWUpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBkZXZpY2VPblNsZWVwOiB2YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHVwZGF0ZVBvd2VyU3RhdHVzID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGlzUG93ZXJTdGF0ZUxvYWRlZDogdHJ1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGdldFNPTFN0YXRlID0gKCk6IGFueSA9PiB0aGlzLnN0YXRlLlNPTHN0YXRlID09PSAzID8gMiA6IDBcclxuXHJcbiAgcmVuZGVyICgpOiBSZWFjdC5SZWFjdE5vZGUge1xyXG4gICAgY29uc3QgeyBTT0xzdGF0ZSwgc2hvd1N1Y2Nlc3MsIG1lc3NhZ2UsIHR5cGUsIGRldmljZU9uU2xlZXAsIHNvbE5vdEVuYWJsZWQsIGlzUG93ZXJTdGF0ZUxvYWRlZCB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIHtzb2xOb3RFbmFibGVkID09PSAnZmFpbGVkJyAmJiBkZXZpY2VPblNsZWVwID09PSAncG93ZXJvbicgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMuZmFpbGVkU29sRmV0Y2gnKX0gdHlwZT0nZXJyb3InIC8+IDogJyd9XHJcbiAgICAgICAge3NvbE5vdEVuYWJsZWQgPT09ICdmYWlsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdzbGVlcCcgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMuZmFpbGVkU29sRmV0Y2hBbmROb3RQb3dlcmVkVXAnKX0gdHlwZT0nd2FybmluZycgLz4gOiAnJ31cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ2ZhaWxlZCcgJiYgZGV2aWNlT25TbGVlcCA9PT0gJ2ZhaWxlZCcgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMuZmFpbGVkU29sRmV0Y2hBbmRGYWlsZWRQb3dlckZldGNoJyl9IHR5cGU9J2Vycm9yJyAvPiA6ICcnfVxyXG4gICAgICAgIHtzb2xOb3RFbmFibGVkID09PSAnbm90RW5hYmxlZCcgJiYgZGV2aWNlT25TbGVlcCA9PT0gJ3NsZWVwJyA/IDxTbmFja0JhciBtZXNzYWdlPXt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5zb2xOb3RFbmFibGVkQW5kTm90UG93ZXJlZFVwJyl9IHR5cGU9eyd3YXJuaW5nJ30gLz4gOiAnJ31cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ25vdEVuYWJsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdmYWlsZWQnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLnNvbE5vdEVuYWJsZWRBbmRGYWlsZWRQb3dlckZldGNoJyl9IHR5cGU9eyd3YXJuaW5nJ30gLz4gOiAnJ31cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ2VuYWJsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdzbGVlcCcgPyA8U25hY2tCYXIgbWVzc2FnZT17dHJhbnNsYXRlVGV4dCgnYW10RmVhdHVyZXMubWVzc2FnZXMubm90UG93ZXJlZFVwJyl9IHR5cGU9eyd3YXJuaW5nJ30gLz4gOiAnJ31cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ2VuYWJsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdmYWlsZWQnID8gPFNuYWNrQmFyIG1lc3NhZ2U9e3RyYW5zbGF0ZVRleHQoJ2FtdEZlYXR1cmVzLm1lc3NhZ2VzLmZhaWxlZFBvd2VyRmV0Y2gnKX0gdHlwZT17J2Vycm9yJ30gLz4gOiAnJ31cclxuICAgICAgICB7c29sTm90RW5hYmxlZCA9PT0gJ25vdEVuYWJsZWQnICYmIGRldmljZU9uU2xlZXAgPT09ICdwb3dlcm9uJyA/IDxTbmFja0JhciBtZXNzYWdlPXt0cmFuc2xhdGVUZXh0KCdhbXRGZWF0dXJlcy5tZXNzYWdlcy5zb2xOb3RFbmFibGVkJyl9IHR5cGU9eyd3YXJuaW5nJ30gLz4gOiAnJ31cclxuICAgICAgICB7c2hvd1N1Y2Nlc3MgJiYgPFNuYWNrQmFyIG1lc3NhZ2U9e21lc3NhZ2V9IHR5cGU9e3R5cGV9IC8+fVxyXG4gICAgICAgIDxIZWFkZXJTdHJpcD5cclxuICAgICAgICAgIDxTdHlsZWREaXY+XHJcbiAgICAgICAgICAgIDxTdHlsZWRMYWJlbD5cclxuICAgICAgICAgICAgICB7aXNQb3dlclN0YXRlTG9hZGVkICYmIDxBbXRGZWF0dXJlc1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlSWQ9e3RoaXMucHJvcHMuZGV2aWNlSWR9XHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXI9e3RoaXMucHJvcHMubXBzU2VydmVyfVxyXG4gICAgICAgICAgICAgICAgZmVhdHVyZT17J1NPTCd9XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVGZWF0dXJlU3RhdHVzPXt0aGlzLmhhbmRsZUZlYXR1cmVTdGF0dXN9XHJcbiAgICAgICAgICAgICAgICBnZXRDb25uZWN0U3RhdGU9e3RoaXMuZ2V0U09MU3RhdGV9XHJcbiAgICAgICAgICAgICAgLz59XHJcbiAgICAgICAgICAgIDwvU3R5bGVkTGFiZWw+XHJcbiAgICAgICAgICA8L1N0eWxlZERpdj5cclxuICAgICAgICAgIDxTdHlsZWREaXY+XHJcbiAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVTT0xDb25uZWN0fT57U09Mc3RhdGUgPT09IDMgPyAnRGlzY29ubmVjdCcgOiAnQ29ubmVjdCd9PC9idXR0b24+XHJcbiAgICAgICAgICA8L1N0eWxlZERpdj5cclxuICAgICAgICAgIDxTdHlsZWREaXY+XHJcbiAgICAgICAgICAgIDxTdHlsZWRMYWJlbD5Qb3dlciBTdGF0dXMgOjwvU3R5bGVkTGFiZWw+XHJcbiAgICAgICAgICAgIDxQb3dlclN0YXRlXHJcbiAgICAgICAgICAgICAgZGV2aWNlSWQ9e3RoaXMucHJvcHMuZGV2aWNlSWR9XHJcbiAgICAgICAgICAgICAgc2VydmVyPXt0aGlzLnByb3BzLm1wc1NlcnZlcn1cclxuICAgICAgICAgICAgICBoYW5kbGVQb3dlclN0YXR1cz17dGhpcy5oYW5kbGVQb3dlclN0YXR1c31cclxuICAgICAgICAgICAgICB1cGRhdGVQYXJlbnQ9e3RoaXMudXBkYXRlUG93ZXJTdGF0dXN9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L1N0eWxlZERpdj5cclxuICAgICAgICAgIDxTdHlsZWREaXY+XHJcbiAgICAgICAgICAgIDxTdHlsZWRMYWJlbD5Qb3dlciBBY3Rpb25zOnsnICd9PC9TdHlsZWRMYWJlbD5cclxuICAgICAgICAgICAgPFBvd2VyT3B0aW9ucyBhdmFpbGFibGVPcHRpb25zPXthdmFpbGFibGVQb3dlckFjdGlvbnN9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVBvd2VyT3B0aW9uc30gaXNTZWxlY3RlZD17dGhpcy5zdGF0ZS5pc1NlbGVjdGVkfSAvPlxyXG4gICAgICAgICAgPC9TdHlsZWREaXY+XHJcbiAgICAgICAgPC9IZWFkZXJTdHJpcD5cclxuICAgICAgICB7U09Mc3RhdGUgPT09IDMgJiYgdGhpcy50ZXJtICYmIDxUZXJtIGhhbmRsZUtleVByZXNzPXt0aGlzLmhhbmRsZUtleVByZXNzfSBoYW5kbGVLZXlEb3duUHJlc3M9e3RoaXMuaGFuZGxlS2V5RG93blByZXNzfSB4dGVybT17dGhpcy50ZXJtfSAvPn1cclxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcblNvbC5jb250ZXh0VHlwZSA9IERvbWFpbkNvbnRleHRcclxuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29ubmVjdGJ1dHRvbi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRW5jb2RpbmdvcHRpb25zLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9IZWFkZXIuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1B1cmVjYW52YXMuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1VJLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ4dGVybS9jc3MveHRlcm0uY3NzXCIpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDIwXHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgUmVtb3RlRGVza3RvcCB9IGZyb20gJy4vS1ZNL1VJJ1xyXG5pbXBvcnQgeyBTb2wgfSBmcm9tICcuL1NlcmlhbE92ZXJMQU4vU29sJ1xyXG5pbXBvcnQgeyBQcm92aWRlciBhcyBNcHNQcm92aWRlciB9IGZyb20gJy4vc2hhcmVkL2NvbnRleHQvQmFzaWNDb250ZXh0UHJvdmlkZXInXHJcblxyXG5leHBvcnQgeyBSZW1vdGVEZXNrdG9wLCBTb2wsIE1wc1Byb3ZpZGVyIH1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==