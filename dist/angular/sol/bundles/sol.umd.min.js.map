{"version":3,"sources":["../../../../src/angular/projects/sol/src/lib/sol.service.ts","../../../../src/angular/projects/sol/src/lib/sol.component.ts","../../../../src/angular/projects/sol/src/lib/sol.component.html","../../../../src/angular/projects/sol/src/lib/sol.module.ts"],"names":["SolService","factory","ɵfac","providedIn","Injectable","SolComponent","params","activatedRoute","this","uuid","server","logger","ConsoleLogger","LogLevel","ERROR","deviceStatus","EventEmitter","deviceConnection","token","localStorage","getItem","prototype","ngOnInit","_this","subscribe","id","init","terminal","AmtTerminal","dataProcessor","TerminalDataProcessor","redirector","AMTRedirector","Protocol","SOL","FileReader","JSON","parse","onSend","send","bind","onNewState","StateChange","onStateChanged","onTerminalStateChange","onProcessData","processData","processDataToXterm","handleWriteToXterm","clearTerminal","handleClearTerminal","container","document","getElementById","term","Terminal","rows","cols","cursorStyle","fontWeight","open","onData","data","handleKeyPress","attachCustomKeyEventHandler","e","stopPropagation","preventDefault","ctrlKey","shiftKey","keyCode","C","navigator","clipboard","writeText","getSelection","V","readText","then","text","code","SPACE","key","domEvent","TermSendKeys","reset","str","write","state","emit","startSol","start","WebSocket","stopSol","stop","dispose","cleanup","ngOnDestroy","i0","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","Component","selector","templateUrl","styleUrls","encapsulation","ViewEncapsulation","None","Inject","Output","Input","SolModule","forRoot","param","ngModule","providers","provide","useValue","declarations","exports","NgModule","imports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolService {\n\n  constructor() { }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output, ViewEncapsulation, OnDestroy, Input } from '@angular/core'\nimport { Terminal } from 'xterm'\nimport { AmtTerminal, AMTRedirector, TerminalDataProcessor, ConsoleLogger, Protocol, LogLevel } from '@open-amt-cloud-toolkit/ui-toolkit/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { C, V, SPACE } from '@angular/cdk/keycodes'\n\n@Component({\n  selector: 'amt-sol',\n  templateUrl: './sol.component.html',\n  styleUrls: ['./sol.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class SolComponent implements OnInit, OnDestroy {\n  uuid: string = ''\n  terminal: any\n  container!: any\n  term: any\n  redirector: any\n  dataProcessor: any\n  token: any\n  server: string = ''\n  logger: ConsoleLogger = new ConsoleLogger(LogLevel.ERROR)\n  @Output() deviceStatus: EventEmitter<number> = new EventEmitter<number>()\n  @Input() deviceConnection: EventEmitter<boolean> = new EventEmitter<boolean>()\n\n  constructor (@Inject('userInput') public params, private readonly activatedRoute: ActivatedRoute) {\n    this.token = localStorage.getItem('loggedInUser')\n  }\n\n  ngOnInit (): void {\n    this.activatedRoute.params.subscribe(params => {\n      this.uuid = params.id\n    })\n  }\n\n  init (): void {\n    this.terminal = new AmtTerminal()\n    this.dataProcessor = new TerminalDataProcessor(this.terminal)\n    this.redirector = new AMTRedirector(this.logger, Protocol.SOL, new FileReader(), this.uuid, 16994, '', '', 0, 0, JSON.parse(this.token).token, this.server)\n    this.terminal.onSend = this.redirector.send.bind(this.redirector)\n    this.redirector.onNewState = this.terminal.StateChange.bind(this.terminal)\n    this.redirector.onStateChanged = this.onTerminalStateChange.bind(this)\n    this.redirector.onProcessData = this.dataProcessor.processData.bind(this)\n    this.dataProcessor.processDataToXterm = this.handleWriteToXterm.bind(this)\n    this.dataProcessor.clearTerminal = this.handleClearTerminal.bind(this)\n    this.container = document.getElementById('terminal')\n    this.term = new Terminal({\n      rows: 30,\n      cols: 100,\n      cursorStyle: 'block',\n      fontWeight: 'bold'\n    })\n    this.term.open(this.container)\n    this.term.onData((data: any) => {\n      this.handleKeyPress(data)\n    })\n    this.term.attachCustomKeyEventHandler((e: any) => {\n      e.stopPropagation()\n      e.preventDefault()\n      if (e.ctrlKey === true && e.shiftKey === true && e.keyCode === C) {\n        return navigator.clipboard.writeText(this.term.getSelection())\n      } else if (e.ctrlKey === true && e.shiftKey === true && e.keyCode === V) {\n        return navigator.clipboard.readText().then(text => {\n          this.handleKeyPress(text)\n        })\n      } else if (e.code === SPACE) {\n        return this.handleKeyPress(e.key)\n      }\n    })\n  }\n\n  handleKeyPress (domEvent: any): void {\n    this.terminal.TermSendKeys(domEvent)\n  }\n\n  handleClearTerminal (): void {\n    this.term.reset()\n  }\n\n  handleWriteToXterm (str: string): void {\n    this.term.write(str)\n  }\n\n  onTerminalStateChange (redirector: AMTRedirector, state: number): void {\n    this.deviceStatus.emit(state)\n  }\n\n  startSol (): void {\n    this.redirector.start(WebSocket)\n  }\n\n  stopSol (): void {\n    this.redirector.stop()\n    this.handleClearTerminal()\n    this.term.dispose()\n    this.cleanup()\n  }\n\n  cleanup (): void {\n    this.terminal = null\n    this.redirector = null\n    this.dataProcessor = null\n    this.term = null\n  }\n\n  ngOnDestroy (): void {\n    this.redirector.stop()\n    this.cleanup()\n  }\n}\n","<div class=\"container\">\r\n    <div id=\"terminal\" class=\"xtermDisplay\" style=\"width: fit-content;\"></div>\r\n</div>","import { ModuleWithProviders, NgModule } from '@angular/core'\nimport { SolComponent } from './sol.component'\n\n@NgModule({\n  declarations: [\n    SolComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    SolComponent\n  ]\n})\nexport class SolModule {\n  public static forRoot (param: any): ModuleWithProviders<SolModule> {\n    return {\n      ngModule: SolModule,\n      providers: [\n        {\n          provide: 'userInput',\n          useValue: param\n        }\n      ]\n    }\n  }\n}\n"]}